{1,
{47,
{"Значения для постановки",1,0,"",""},
{23,
{"АРХИВ",1,0,"",""},
{1,
{"Плюс минус на инфостате",1,0,"",""},
{0,
{"процедурка",0,0,"","// процедура и панель позаимствованы у Rebelx (http://infostart.ru/profile/18122/)
Процедура КоманднаяПанельОценкиПлюсМинус(Кнопка)
	Если Кнопка = ЭлементыФормы.КоманднаяПанельОценки.Кнопки.Плюс тогда
	    СсылкаПлюса = ""http://infostart.ru/projects/3288/rate.php?rate=1"";
		ЗапуститьПриложение(СсылкаПлюса);
	Иначе
	    СсылкаМинуса = ""http://infostart.ru/projects/3288/"";
		ЗапуститьПриложение(СсылкаМинуса);
	КонецЕсли;
КонецПроцедуры
"}
}
},
{1,
{"Работа с флажками",1,0,"",""},
{0,
{"Процедура работы с функционалом флагов ТабЧасти (пометка, товары)",0,0,"","Процедура УстановкаФлажковПоЗначению(Значение=Неопределено)
		
	Для Каждого ТекСтроки Из <?> Товары Цикл
		ТекСтроки.Пометка	=	?(Значение=Неопределено,(не ТекСтроки.Пометка),Значение);			
	КонецЦикла;
		
КонецПроцедуры
"}
}
},
{1,
{"регулярные выражения",1,0,"",""},
{0,
{"ФорматироватьСтроку",0,0,"","Функция ФорматироватьСтроку(ИсходнаяСтрока) Экспорт
	
	// создаем объект для работы с регулярными выражениями
	RegExp = Новый COMОбъект(""VBScript.RegExp"");	
	// истина — текст многострочный, ложь — одна строка
	RegExp.MultiLine = Истина; 
	// истина — поиск по всей строке, ложь — до первого совпадения
	RegExp.Global = Истина; 
	// истина — игнорировать регистр строки при поиске
	RegExp.IgnoreCase = Ложь;
	// шаблон (регулярное выражение)
	RegExp.Pattern = Шаблон;  
	// Получить совпадений по индексу
	Matches = RegExp.Execute(ИсходнаяСтрока);
	ЧислоВхождений=Matches.Count();
	СписокСовпадений = Новый СписокЗначений;
	Если ЧислоВхождений>0 Тогда 
        Для к = 0 По ЧислоВхождений-1 Цикл
            Match = Matches.Item(к);
			СписокСовпадений.Добавить(Match.Value);
        КонецЦикла;
    КонецЕсли;
	
	Возврат СписокСовпадений;
КонецФункции
"}
}
},
{1,
{"Менеджеры временных таблиц",1,0,"",""},
{0,
{"Пример",0,0,"","	//создание менеджера и указание таблицы как источника временной таблицы
	МенеджерВременныхТаблиц 		= Новый МенеджерВременныхТаблиц; 	
	Запрос 							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= МенеджерВременныхТаблиц;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	ТабТоваров.Номенклатура,
	|	ТабТоваров.Количество,
	|	ТабТоваров.НомерСтроки
	|ПОМЕСТИТЬ ВыбрНоменклатура
	|ИЗ
	|	&ТабТоваров КАК ТабТоваров"";
	
	Запрос.УстановитьПараметр(""ТабТоваров""			, Товары.Выгрузить());	 
  	Запрос.Выполнить();
	
	//Далее используем таблицу для соединения 
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	ВыбраннаяНоменклатура.Номенклатура,
	|	ВыбраннаяНоменклатура.НомерСтроки,
	|	ВыбраннаяНоменклатура.Количество КАК КоличествоДокумент,
	|	ЕСТЬNULL(КратностьОтгрузкиРС.КратностьОтгрузки, 0) КАК КратностьОтгрузки,
	|	ВЫБОР
	|		КОГДА НоменклатураПользователя.Ссылка = ВыбраннаяНоменклатура.Номенклатура
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НоменклатураПользователя
	|ИЗ
	|	ВыбрНоменклатура КАК ВыбраннаяНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗначенияСвойствОбъектов.Объект КАК Объект,
	|			ЗначенияСвойствОбъектов.Значение КАК КратностьОтгрузки
	|		ИЗ
	|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Объект В(&МассивНомнеклатуры)
	|			И ЗначенияСвойствОбъектов.Свойство = &Свойство) КАК КратностьОтгрузкиРС
	|		ПО ВыбраннаяНоменклатура.Номенклатура = КратностьОтгрузкиРС.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Номенклатура.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.Номенклатура КАК Номенклатура
	|		ГДЕ
	|			Номенклатура.Ссылка В ИЕРАРХИИ
	|					(ВЫБРАТЬ
	|						НоменклатураПользователя_РДС.Номенклатура
	|					ИЗ
	|						РегистрСведений.НоменклатураПользователя_РДС КАК НоменклатураПользователя_РДС
	|					ГДЕ
	|						НоменклатураПользователя_РДС.Пользователь = &Пользователь)) КАК НоменклатураПользователя
	|		ПО ВыбраннаяНоменклатура.Номенклатура = НоменклатураПользователя.Ссылка"";
	
	Запрос.УстановитьПараметр(""МассивНомнеклатуры""	, Товары.ВыгрузитьКолонку(""Номенклатура""));
	Запрос.УстановитьПараметр(""Пользователь""		, Ответственный);
	Запрос.УстановитьПараметр(""Свойство""			, ПланыВидовХарактеристик.СвойстваОбъектов.КратностьОтгрузки);
	Запрос.УстановитьПараметр(""Ссылка""				, Ссылка);
	
	Результат 						= 	Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 			= 	Результат.Выбрать(); 	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//обработка запроса

	КонецЦикла; 
	
	МенеджерВременныхТаблиц.Закрыть(); "}
}
},
{2,
{"Функционал сохранения настроек",1,0,"",""},
{0,
{"ПроцедурыМодуляФормы",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФУНКЦИОНАЛА СОХРАНЕНИЯ НАСТРОЕК

Процедура ДействияФормыСохранитьНастройку(Кнопка)
	СохранитьНастройки(ЭтотОбъект, ЭтотОбъект, ЭтаФорма);	
КонецПроцедуры

Процедура ДействияФормыВосстановитьНастройки(Кнопка)
	ВосстановитьНастройки(ЭтотОбъект, ЭтотОбъект, ЭтаФорма);
	
	////Начало периода
	//Настройки 		  							= 	ЭтотОбъект.КомпоновщикНастроек.Настройки;
	//ПараметрДанныхНачалоПериода 				= 	Настройки.ПараметрыДанных.Элементы[0];
	//ПараметрДанныхНачалоПериода.Использование 	= 	Истина;
	//ПараметрДанныхНачалоПериода.Значение 		=	НачалоДня(ДатаНачала);
	//
	////Конец периода
	//Настройки 		  = ЭтотОбъект.КомпоновщикНастроек.Настройки;
	//ПараметрДанныхНачалоПериода 				=	Настройки.ПараметрыДанных.Элементы[1];
	//ПараметрДанныхНачалоПериода.Использование 	= 	Истина;
	//ПараметрДанныхНачалоПериода.Значение 		=	КонецДня(ДатаКонец);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ВосстановитьНастрокуПриОткрытии(ЭтотОбъект,ЭтотОбъект,ЭтаФорма);	
КонецПроцедуры



"}
},
{0,
{"Процедуры модуля Объекта",0,0,"","Перем мТекущаяНастройка Экспорт;
Перем глТекущийПользователь Экспорт;



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ НАСТРОЕК

Функция ВосстановитьНастройки(Объект, Отчет, Форма, ИмяОбъекта = Неопределено) Экспорт
	
	Перем СохраненнаяНастройка;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить(""Пользователь"", глТекущийПользователь);
	
	//Если Строка(Отчет)	=	""ВнешняяОбработка.ОтчетПоКристаллу"" Тогда
	ИмяОбъекта		=	неопределено;
	//КонецЕсли;
	
	
	СтруктураНастройки.Вставить(""ИмяОбъекта"", ?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта));
	СтруктураНастройки.Вставить(""НаименованиеНастройки"", ?(Объект.мТекущаяНастройка = Неопределено, Неопределено, Объект.мТекущаяНастройка.НаименованиеНастройки));
	
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
		
		Объект.мТекущаяНастройка = Результат;
		Объект.КомпоновщикНастроек.ЗагрузитьНастройки(Результат.СохраненнаяНастройка);
		//НастройкиПостроителя.Загрузить(Результат.СохраненнаяНастройка);
		
	Иначе
		
		Объект.мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
	Объект.УстановитьЗаголовокФормы(Объект, Отчет, Форма);
	
КонецФункции // ВосстановитьНастройки()
  
Процедура СохранитьНастройки(Объект, Отчет, Форма, ИмяОбъекта = Неопределено) Экспорт
	
	Перем СохраненнаяНастройка;
	
	
	СохраненнаяНастройка	=	ВернутьСтруктуруСохраненияОбъекта();//Объект.КомпоновщикНастроек.ПолучитьНастройки();
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить(""Пользователь"", глТекущийПользователь);
	
	
	СтруктураНастройки.Вставить(""ИмяОбъекта"", ?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта));
	СтруктураНастройки.Вставить(""НаименованиеНастройки"", ?(Объект.мТекущаяНастройка = Неопределено, Неопределено, Объект.мТекущаяНастройка.НаименованиеНастройки));
	СтруктураНастройки.Вставить(""СохраненнаяНастройка"", СохраненнаяНастройка);
	СтруктураНастройки.Вставить(""ИспользоватьПриОткрытии"", Ложь);
	СтруктураНастройки.Вставить(""СохранятьАвтоматически"", Ложь);
	
	Результат = УниверсальныеМеханизмы.СохранениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
		
		Объект.мТекущаяНастройка = Результат;
		
	Иначе
		
		Объект.мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
	Объект.УстановитьЗаголовокФормы(Объект, Отчет, Форма);
	
КонецПроцедуры // СохранитьНастройки()

Процедура ВосстановитьНастрокуПриОткрытии(Объект,Отчет,Форма,ИмяОбъекта	=	неопределено) Экспорт
		
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить(""Пользователь""			, глТекущийПользователь);
	СтруктураНастройки.Вставить(""ИмяОбъекта""			, ?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта));
	//СтруктураНастройки.Вставить(""НаименованиеНастройки""	, СохраненнаяНастройка);
	
	
	Результат = УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки);
	
	Если Результат  Тогда
		
		Объект.мТекущаяНастройка = Результат;
		Объект.КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастройки.СохраненнаяНастройка);
		
		Объект.мТекущаяНастройка = СтруктураНастройки;
	Иначе
		
		Объект.мТекущаяНастройка = Неопределено;
		
	КонецЕсли;
	
	Объект.УстановитьЗаголовокФормы(Объект, Отчет, Форма);
	
	
	
	
КонецПроцедуры


//Заполнение настроек по структуре метаданных объекта - Необязательно
Функция ВернутьСтруктуруСохраненияОбъекта() 
	
	МетаДанныеОбъекта	=	ЭтотОбъект.Метаданные();
	
	СтруктураНастроек	=	Новый Структура;
	для Каждого  ТекРеквизита из МетаДанныеОбъекта.реквизиты ЦИкл
		СтруктураНастроек.Вставить(ТекРеквизита.имя,ЭтотОбъект[ТекРеквизита.имя]);		
	КонецЦикла;
	
	
	для Каждого  ТекРеквизита из МетаДанныеОбъекта.ТабличныеЧасти ЦИкл
		СтруктураНастроек.Вставить(ТекРеквизита.имя,ЭтотОбъект[ТекРеквизита.имя].Выгрузить());		
	КонецЦикла;
        	
	Возврат СтруктураНастроек;
	
КонецФункции
  
Процедура УстановитьЗначенияИзСтруктурыСохраненияОбъекта(СтруктураНастроек) 
	
	МетаДанныеОбъекта	=	ЭтотОбъект.Метаданные();

	для Каждого  ТекРеквизита из МетаДанныеОбъекта.реквизиты ЦИкл		
		СтруктураНастроек.Свойство(ТекРеквизита.имя,ЭтотОбъект[ТекРеквизита.имя]);				
	КонецЦикла;
	
	
	для Каждого  ТекРеквизита из МетаДанныеОбъекта.ТабличныеЧасти ЦИкл
		ЗначениеТабЧасти				=	Неопределено;
		СтруктураНастроек.Свойство(ТекРеквизита.имя,ЗначениеТабЧасти);				
		Если ТипЗнч(ЗначениеТабЧасти) 	= тип(""ТаблицаЗначений"") Тогда		
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ЗначениеТабЧасти,ЭтотОбъект[ТекРеквизита.имя];
		КонецЕсли;		
		
	КонецЦикла;
        	
	
	
КонецПроцедуры


"}
}
},
{2,
{"Работа с ЖР новым",1,0,"",""},
{0,
{"Сообщение",0,0,"","		bpЖурналИзмененийПереопределяемый.РДС_ЗаписьЖурналаРегистрации(""Открытие периода.""+ДатаЗапрета, УровеньЖурналаРегистрации.Информация,, 
		ТекПользователя.Значение ,""Открытие периода.""+ДатаЗапрета+"" -Установлено: ""+ПараметрыСеанса.ТекущийПользователь); 	
"}
},
{0,
{"Логирование проведения",0,0,"","//--< Данилин В.И 15 декабря 2015 г. 16:37:27   
Процедура СформироватьТекстИЛогировать(мСтруктура=неопределено,мТекст	=	"""")
	
	перем мСтрока;
	мСтрока	=	"""";
	Если ТипЗнч(мСтруктура)	=	тип(""Структура"") и ЗначениеЗаполнено(Ссылка)Тогда
		Для Каждого ТекЗначение из мСтруктура Цикл
			мСтрока	=	мСтрока+"" (""+ТекЗначение.Ключ+"" : ""+ТекЗначение.Значение+"")"";			
		КонецЦикла;		
		Если не ПустаяСтрока(мСтрока) Тогда
			НачатьТранзакцию();
			МодульСерверныхПроцедур.РДС_ЗаписьЖурналаРегистрации(Ссылка,мТекст+"" - ""+мСтрока);
			ЗафиксироватьТранзакцию();
		КонецЕсли;		
	КонецЕсли; 	
	
КонецПроцедуры
"}
}
},
{1,
{"Инструкции препроцессору",1,0,"",""},
{0,
{"Если Клиент",0,1,"Если Клиент","#Если Клиент Тогда
			
#КонецЕсли	"}
}
},
{1,
{"Авторизация",1,0,"",""},
{0,
{"Параметры сеанса",0,0,"","		НомерСеансаИнформационнойБазы();
		НомерСоединенияИнформационнойБазы();
"}
}
},
{1,
{"Таблицы Значений",1,0,"",""},
{0,
{"Загрузить_Дополнить Таблицу Значений",0,0,"","		МассивСтрок							=	ТЧТовары.НайтиСтроки(Новый Структура(""Дата"",ТекДня));	
		МТовары								=	ТЧТовары.ВыгрузитьКолонки();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(МассивСтрок,МТовары);
		МТовары.Свернуть(""Номенклатура"",""Количество"");
"}
}
},
{3,
{"Отадка запросов",1,0,"",""},
{0,
{"ВыполнитьПакетСПромежуточнымиДанными (просмотр вложеных таблиц)",0,0,"","Запрос.ВыполнитьПакетСПромежуточнымиДанными()"}
},
{0,
{"Просмотр Вложенныхх таблиц",0,0,""," //МенеджерВТ.Таблицы
 МенеджерВТ.Таблицы[1].ПолучитьДанные().Выгрузить() //Обращение по индексу 1. Не забывайте что индексы ведут счет с 0, поэтому мы получим вторую по счету таблицу в пакете."}
},
{0,
{"ИМЕЮЩИЕ",0,0,"","ВЫБРАТЬ
    ПоступлениеТоваровУслуг.Контрагент,
    СУММА(ПоступлениеТоваровУслуг.СуммаДокумента) КАК СуммаДокумента
ИЗ
    Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг

СГРУППИРОВАТЬ ПО
    ПоступлениеТоваровУслуг.Контрагент

ИМЕЮЩИЕ
    СУММА(ПоступлениеТоваровУслуг.СуммаДокумента) > 1000"}
}
},
{1,
{"Прерывание обработки",1,0,"",""},
{0,
{"Вызвать исключение",0,0,"","	ВызватьИсключение НСтр(""ru = 'По основанию (""+ДанныеЗаполнения+"") уже существует (""+Результат+"").'"");"}
}
},
{1,
{"Границы/Конец периода",1,0,"",""},
{0,
{"Запрос.УстановитьПараметр(""КонецПериодаГ""	,	Новый Граница(КонецДня(КонецПериода),ВидГраницы.Включая));",0,0,"",""}
}
},
{1,
{"Учетная политика",1,0,"",""},
{0,
{"Пример использования",0,0,"","Если РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ТекущаяДата()).СРМ_Задание_ОграничениеДоступа Тогда
	ОграничениеДоступаКРеквизитам 	=	Истина;
КонецЕсли;
"}
}
},
{1,
{"РЕГЛАМ. КАЛЕНДАРЬ",1,0,"",""},
{0,
{"Определим рабочий день или нет",0,0,"","	ВчерашнийДень			=	НачалоДня(ТекДата)-1;
	РабочаяДатаРассылки 	=	ЗаполнениеДокументов.ОпределитьДату(ВчерашнийДень,1);
	
	Если НачалоДня(ТекДата)	=	НачалоДня(РабочаяДатаРассылки) Тогда
		Сообщить(""Сегодня работает рассылка"");			
	КонецЕсли;
"}
}
},
{3,
{"Шаблоны модуля",1,0,"",""},
{1,
{"Шаблоны заполнения ",1,0,"",""},
{0,
{"модуль формы",0,0,"","// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
 
 //ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
 
КонецПроцедуры

// Процедура устанавливает подменю ""Заполнить"" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
 
 СоответствиеТЧ = Новый Соответствие;
 СоответствиеТЧ.Вставить(ЭлементыФормы.Расчет,ЭлементыФормы.КоманднаяПанельРБП.Кнопки.Заполнить);
 
 мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(ЭтотОбъект, СоответствиеТЧ, Новый Действие(""НажатиеНаДополнительнуюКнопкуЗаполненияТЧ""));
 
КонецПроцедуры

// Процедура устанавливает подменю ""Печать"" и кнопку ""Печать по умолчанию"" при необходимости
//
Процедура УстановитьКнопкиПечати()
 
 мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(ЭтотОбъект, ПолучитьСтруктуруПечатныхФорм(), Новый Действие(""ОсновныеДействияФормыПечать""), Новый Действие(""ОсновныеДействияФормыУстановитьПечатьПоУмолчанию""));
 
 УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);//.Строки.Количество() > 0);
 УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие(""ОсновныеДействияФормыПечатьПоУмолчанию""));
 
 Если Не мПодменюПечати = Неопределено Тогда
  УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
 КонецЕсли;
 
КонецПроцедуры //УстановитьКнопкиПечати
////////////////////////////////////////////////////////////////////////////////
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() 
 
 Возврат Новый Структура(""ПроверкаРасчета"",""Проверка расчета"");
 
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
// Процедура вызывается при нажатии кнопки ""Печать"" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

 УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку ""Печать"".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
 
 УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
 
КонецПроцедуры // ОсновныеДействияФормыПечать()"}
}
},
{0,
{"Модуль формы",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ"}
},
{0,
{"Модуль объекта",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ"}
}
},
{1,
{"НомерПривестиКДлиннеДля печати",1,0,"",""},
{0,
{"процедурка",0,0,"","
Функция ПолучитьНомерНаПечатьВлад(НомерДокумента)
	
	ПервыйНолик	=	Найти(НомерДокумента,""0"");
	Префикс		=	Лев(НомерДокумента, ПервыйНолик-1);
	Если СписокПрефиксов.НайтиПоЗначению(Префикс)=Неопределено Тогда
		//префикс не наших организаций
		Возврат НомерДокумента;
	КонецЕсли;
	
	НовыйНомер	=	сред(НомерДокумента,ПервыйНолик);
	//	// так же, может остаться ""минус"" впереди
	//Если Лев(Номер, 1) = ""-"" Тогда
	//	Номер = Сред(Номер, 2);
	//КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(НовыйНомер, 1)=""0"" Цикл
		НовыйНомер=Сред(НовыйНомер, 2);
	КонецЦикла;
	
	Возврат НовыйНомер;
	
	
КонецФункции



СписокПрефиксов					=	Новый СписокЗначений;
Запрос = Новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ РАЗЛИЧНЫЕ
|	Организации.Префикс
|ИЗ
|	Справочник.Организации КАК Организации"";


Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл
	СписокПрефиксов.Добавить(Выборка.Префикс);
КонецЦикла;"}
}
},
{2,
{"ДеревоЗначений",1,0,"",""},
{0,
{"Скопировать Дерево",0,0,"","
ДЗ2	=	ДЗ.Скопировать();
ДЗ2.Строки.Очистить();		
СкопироватьСтрокиДерева(ДЗ2,ДЗ.Строки);

Процедура СкопироватьСтрокиДерева(Родитель,Строки)
	
	Для Каждого ТекСтрока Из Строки Цикл
		НС			=	Родитель.Строки.Добавить();			
		ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
		СкопироватьСтрокиДерева(НС,ТекСтрока.Строки);		
	КонецЦикла;
	
	
КонецПроцедуры
"}
},
{0,
{"построить дерево по ТЧ",0,0,"","
//http://joxi.ru/brR8NL4t7bx742 (скрин таб. части)

&НаСервере
Функция ПостроитьДерево_Рек(мДеревоСкладов,ГИД_Поиска)		
	
	МассивСтрок					=	Объект.ТЧ_ТаблицаСкладовАС.НайтиСтроки(Новый Структура(""ГУИД_СкладРодитель"",ГИД_Поиска));
	Для каждого ТекЭлемента из МассивСтрок Цикл 
		СтрокаСклада			=	мДеревоСкладов.Строки.Добавить();
		СтрокаСклада.ГУИД		=	ТекЭлемента.ГУИД_Склад;
		СтрокаСклада.Склад		=	?(ТекЭлемента.ЭтоГруппа,""+ "",""- "")+ТекЭлемента.СкладНаименование;
		
		ПостроитьДерево_Рек(СтрокаСклада,ТекЭлемента.ГУИД_Склад);
		
	КонецЦикла;

	
КонецФункции

&НаСервере
Процедура ПостроитьДерево_Сервер()
	
	ДеревоСкладов.ПолучитьЭлементы().Очистить();
	
	мДеревоСкладов 	= 	РеквизитФормыВЗначение(""ДеревоСкладов"");			
	ГИД_Поиска		=	Новый УникальныйИдентификатор(""00000000-0000-0000-0000-000000000000"");	
	
	ПостроитьДерево_Рек(мДеревоСкладов,ГИД_Поиска);
	
	ЗначениеВРеквизитФормы(мДеревоСкладов, ""ДеревоСкладов"");
	
КонецПроцедуры
"}
}
},
{1,
{"Заполнение Значений характеристик ",1,0,"",""},
{0,
{"Вернуть Значение по характреристики",0,0,"","
	//Получаем значение вставки														
	СтрокаТЧ.Вставка = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Новый Структура(""Объект,Свойство"",
														Характеристика, ПланыВидовХарактеристик.СвойстваОбъектов.Вставка)).Значение;	
"}
}
},
{0,
{"ВыполнитьЗадержку (процедура)",0,0,"","Процедура ВыполнитьЗадержку(Задержка)
	//Задержка выполняется в секунду
	
	НачальноеВремя	=	ТекущаяДата();
	
	Разница	=	0;
	
	Пока Разница <= Задержка Цикл 
		
		Разница	=	ТекущаяДата()-НачальноеВремя;
		
	КонецЦикла;
	
КонецПроцедуры

"}
},
{0,
{"ПолучитьТаблицуДатЗаПериод(НачДата, КонДата, Интервал)",0,0,"","// Возвращает таблицу значений с датами за период
//
// Параметры:
//  НачДата  - Дата - Начало периода
//  КонДата  - Дата - Конец периода
//  Интервал - Строка - одно из следующих значений:
//             (Секунда, Минута, Час, День, Неделя, Месяц, Квартал, Полугодие, Год)
//
// Возвращаемое значение:
//   Таблица значений с датами за период. Содержит одну колонку ""НачИнтервала""
//
Функция ПолучитьТаблицуДатЗаПериод(НачДата, КонДата, Интервал)

    тзИнтервалов = Новый ТаблицаЗначений;
    тзИнтервалов.Колонки.Добавить(""НачИнтервала"", Новый ОписаниеТипов(""Дата""));

    Запрос = Новый Запрос;
    Запрос.Текст = ""ВЫБРАТЬ
    |   НАЧАЛОПЕРИОДА(&НачДата, День) КАК НачИнтервала
    |УПОРЯДОЧИТЬ ПО
    |   НачИнтервала
    |ИТОГИ ПО
    |   НачИнтервала ПЕРИОДАМИ(""+Интервал+"", &НачДата, &КонДата)"";
    //Параметры запроса
    Запрос.УстановитьПараметр(""НачДата"", НачДата);
    Запрос.УстановитьПараметр(""КонДата"", КонДата);

    Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""НачИнтервала"", ""ВСЕ"");
    Пока Выборка.Следующий() Цикл
        НоваяСтрока = тзИнтервалов.Добавить();
        НоваяСтрока.НачИнтервала = Выборка.НачИнтервала;
    КонецЦикла;

    Возврат  тзИнтервалов;

КонецФункции //ПолучитьТаблицуДатЗаПериод()"}
},
{2,
{"ЗАГРУЗКА САТЕЛИТЫ",1,0,"",""},
{0,
{"Выбор контрагента",0,0,"","	КодКонтрагент				=	"""";	
	КодДоговор					=	"""";
	
	Если ПараметрЗагрузки		=	""ТД Л-ПАК"" Тогда 						
		КодКонтрагент			=	""-0000499 "";
		КодДоговор				=	""00-000242"";	
		
	ИначеЕсли ПараметрЗагрузки	=	""ПРОСТОР"" Тогда 								
		КодКонтрагент			=	""00-000654"";
		КодДоговор				=	""00-000877"";	
		
	ИначеЕсли ПараметрЗагрузки	=	""ДЕЛЬТА"" Тогда	
		КодКонтрагент			=	""00-000641"";
		КодДоговор				=	""00-000801"";	
		
	ИначеЕсли ПараметрЗагрузки	=	""СЫРЬЕ-ИНВЕСТ"" Тогда
		КодКонтрагент			=	""ЛП-000019"";
		КодДоговор				=	""ЛП-000021"";	
		
	КонецЕсли;
	
	Объект.Контрагент			=	Справочники.Контрагенты.НайтиПоКоду(КодКонтрагент);
	Объект.ДоговорПереработки	=	Справочники.ДоговорыКонтрагентов.НайтиПоКоду(КодДоговор,,,Объект.Контрагент);

"}
},
{0,
{"Способ Учета НДС",0,0,"","
			СпособУчетаНДС			=	Неопределено;
			Если УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(асОрганизация, Дата) Тогда
				СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;
"}
}
},
{1,
{"ПФ АНАЛИЗЫ",1,0,"",""},
{0,
{"Проверка новый пост алгоритмов",0,0,"","Процедура ПроверкаРасчетаПФ() Экспорт  
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	ПланыПродажДополнительныеУсловия.Ссылка
		|ИЗ
		|	Документ.ПланыПродаж.ДополнительныеУсловия КАК ПланыПродажДополнительныеУсловия
		|ГДЕ
		|	ПланыПродажДополнительныеУсловия.Ссылка 				= &Ссылка
		|	И (ПланыПродажДополнительныеУсловия.Условие 			= """"ИсключатьРеализацииИзНаценки""""
		|			ИЛИ ПланыПродажДополнительныеУсловия.Условие 	= """"ИскМинусПрофитНаценки_П_У"""")"";
	
	Запрос.УстановитьПараметр(""Ссылка"", ПланПродаж);	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
		ТекстСообщения	=	""В документе ""+ПланПродаж+"", установленны новые настройки, ""+Символы.ПС+""которые не поддерживаются данным ПФ анализом, обратитесь в отдел ИТ, для доработки"";
		Модуль77.глПредупреждениеКрасное(ТекстСообщения+Символы.ПС+"" БОНУС РАСЧИТАН НЕВЕРНО!!!""); 		
	КонецЕсли;
	
	
	
КонецПроцедуры
"}
}
},
{2,
{"Excell",1,0,"",""},
{0,
{"Работа с ехселл",0,0,"","//открыть файл екселл

Excel.Application.Visible 	= 1;
Excel.Windows(1).Visible 	= 1;


Процедура ЗаменитьСтрокиЕкселл(СтрС, Знач СтрНа, Excel)
		
		Excel.ActiveSheet.Application.DisplayAlerts	=	Ложь;
		Excel.ActiveSheet.Cells.Replace(СтрС, СтрНа, 2, 1, False, False, False); 
		
КонецПроцедуры
"}
},
{0,
{"Загрузка из Таб док.",0,0,"","

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)  //интерактивно
	
	ОчиститьСообщения();
	АдресФайлаВоВременномХранилище 	= """"; 	
	ОписаниеОповещения 				= Новый ОписаниеОповещения(""ЗагрузитьДанныеЗавершение"", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище,Нстр(""ru = 'Файл таблицы'""),, УникальныйИдентификатор);
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда		
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		Если Не Файл.Существует() Тогда
			
			сообщить(""Файл не существует"");
			Возврат;
			
		КонецЕсли;
		
		ИмяВременногоФайлаКлиент	=	ВыбранноеИмяФайла;
		ЗагрузитьДанныеНаСервере(Адрес, Файл.Расширение);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, Расширение)	
	
	ДвоичныеДанные 		= ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент.Прочитать(ИмяВременногоФайла,СпособЧтенияЗначенийТабличногоДокумента.Текст);
	
КонецПроцедуры
"}
}
}
},
{14,
{"ЛПАК",1,0,"",""},
{0,
{"Алгоритм Поиска Номенклатуры",0,0,"","Перем КешНоменклатуры;


//Функционал по поиску элементов справочника
Функция ВернутьСсылкуНаНоменклатуру(нАртикул,нНаименование,нНаименованиеПолное,мПотребитель	=	Неопределено) Экспорт//передать чистые значение СокрЛП()
	
	Если КешНоменклатуры 		=	Неопределено Тогда
		ЗаполнитьКешНоменклатуры();	
	КонецЕсли;
	
	НоменклатураСсылка			=	Неопределено;
	
	МассивСтрок					=	КешНоменклатуры.найтиСтроки(Новый Структура(""Наименование,Артикул"",нНаименование,СокрЛП(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(нАртикул))));
	Если МассивСтрок.количество()>1 Тогда
		Сообщить(""Найдены дубли по номенклатуре (арт:""+нАртикул+"") ""+нНаименование);
	КонецЕсли;
	
	Если МассивСтрок.количество()=0 Тогда 	
		Сообщить(""Создана новая номенклатура (арт:""+нАртикул+"") ""+нНаименование);
		
		
		СО							=	Справочники.Номенклатура.СоздатьЭлемент();
		СО.Артикул					=	нАртикул;
		СО.УстановитьНовыйКод();
		СО.Наименование				=	нНаименование;
		СО.НаименованиеПолное		=	нНаименованиеПолное;
		СО.Родитель					=	ГруппаГотовойПродукции;//00000000001
		СО.ЕдиницаИзмерения			=	ЕдИзм;
		со.ВидНоменклатуры			=	ВидНоменклатуры;
		со.НоменклатурнаяГруппа		=	НоменклатурнаяГруппа;
		СО.Комментарий				=	""#LD:""+ТекущаяДата();
		СО.СтавкаНДС				=	Перечисления.СтавкиНДС.НДС18;
		со.УстановитьНовыйКод();
		//ВернутьПотребителя(нНаименование);
		
		Если не ПустаяСтрока(мПотребитель) Тогда 			
			НС							=	СО.ДополнительныеРеквизиты.Найти(ПВХ_ДР_Потребитель);
			Если НС						=	Неопределено Тогда
				НС						=	СО.ДополнительныеРеквизиты.Добавить();		 
				НС.Свойство				=	ПВХ_ДР_Потребитель;
			КонецЕсли;
			НС.Значение					=	СокрЛП(мПотребитель);
		КонецЕсли; 		
		
		СО.ОбменДанными.Загрузка		=	Истина;		
		
		Попытка
			СО.Записать();		
			
			Если ЗначениеЗаполнено(ПВХ_ДР_Потребитель) и ПустаяСтрока(мПотребитель) Тогда
				Сообщить("" Cоздана новая номенклатура ""+?(ПустаяСтрока(мПотребитель),""(укажите потребителя!)"","""")+"":""+СО.Наименование+"" артикул:""+СО.Артикул+"" код:""+СО.Код,СтатусСообщения.Информация);
			КонецЕсли;
			
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;
		
		
		НоваяСтрока						=	КешНоменклатуры.Добавить();
		НоваяСтрока.Наименование		=	СО.Наименование;				
		НоваяСтрока.Артикул				=	СО.Артикул;
		НоваяСтрока.Ссылка				=	СО.Ссылка;
		
		НоменклатураСсылка				=	СО.Ссылка;	
		
		//НС							=	ТЧНоваяНоменклатура.Добавить();
		//НС.НоменклатураСсылка			=	НоменклатураСсылка;
		//НС.Потребитель				=	мПотребитель;
		
		
		
	Иначе
		НоменклатураСсылка			=	МассивСтрок[0].Ссылка;				
	КонецЕсли;
	
	Возврат НоменклатураСсылка;  
	
	
КонецФункции

Процедура ЗаполнитьКешНоменклатуры()  	
	
	сообщить(""Заполнение кеша номенклатуры"");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Наименование,
	|	Номенклатура.Артикул		
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа"";
	
	КешНоменклатуры 			= Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекСтрока из КешНоменклатуры Цикл
		ТекСтрока.Наименование	=	СокрЛП(ТекСтрока.Наименование);		
		ТекСтрока.Артикул		=	СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СокрЛП(ТекСтрока.Артикул));
	КонецЦикла;  	
	
	КешНоменклатуры.Индексы.Добавить(""Наименование"");
	КешНоменклатуры.Индексы.Добавить(""Артикул"");	
	
КонецПроцедуры




ГруппаГотовойПродукции	=	Справочники.Номенклатура.НайтиПоКоду(""00-00035968"");
ЕдИзм					=	справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(""796"");
ВидНоменклатуры			=	Справочники.ВидыНоменклатуры.НайтиПоНаименованию(""Товары"",Истина);
ПВХ_ДР_Потребитель 		=	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(""Потребитель"");
НоменклатурнаяГруппа 	=	Справочники.НоменклатурныеГруппы.НайтиПоКоду(""000000005"");
"}
},
{0,
{"Алгоритм поиска Контрагента",0,0,"","
Функция ВернутьПокупателя(Знач ГруппаПоиска, Знач Строка) Экспорт
	
	Перем ДоговорОбъект, Покупатель;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Родитель В ИЕРАРХИИ(&Родитель)
	|	И ВЫБОР
	|			КОГДА &ИНН = """"""""
	|				ТОГДА Контрагенты.Наименование = &Наименование
	|			ИНАЧЕ Контрагенты.ИНН = &ИНН
	|		КОНЕЦ
	|	И НЕ Контрагенты.ПометкаУдаления"";
	
	Запрос.УстановитьПараметр(""Наименование"", СокрЛП(Строка.адКонтрагент));
	Запрос.УстановитьПараметр(""ИНН""			, СокрЛП(Строка.КонтрагентИНН));
	Запрос.УстановитьПараметр(""Родитель""	, ГруппаПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Покупатель					=	ВыборкаДетальныеЗаписи.ссылка;
		колПокупателей				=	ВыборкаДетальныеЗаписи.Количество();
		Если колПокупателей>1 Тогда
			Сообщить(""Найдено: ""+колПокупателей+"" элементов.""+""(""+Строка.КонтрагентИНН+"")""+Строка.адКонтрагент ,СтатусСообщения.Информация);
		КонецЕсли;
		
	Иначе 		
		Сообщить(""Создание контрагента: ""+Строка.адКонтрагент);
		Покупатель 					= Справочники.Контрагенты.СоздатьЭлемент();
		Покупатель.Родитель 		= ГруппаПоиска;
		Покупатель.ИНН 				= Строка.КонтрагентИНН;
		Покупатель.КодПоОКПО 		= Строка.КодПоОКПО;
		Покупатель.Комментарий		= ""ВНИМАНИЕ!!! КОНТРАГЕНТ ТД Л-ПАК!!!"";			
		Покупатель.КПП 				= Строка.КПП;              			
		Покупатель.Наименование 	= Строка.адКонтрагент;			
		Покупатель.НаименованиеПолное = Строка.НаименованиеПолное;
		
		Если СтрДлина(СокрЛП(Покупатель.ИНН)) = 12 Тогда
			Покупатель.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			Покупатель.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;			
		Покупатель.Записать();			
		Покупатель = Покупатель.Ссылка;
		
		ДоговорОбъект 						= Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорОбъект.Наименование          = ""Основной договор (ком.)"";
		ДоговорОбъект.ВалютаВзаиморасчетов 	= мВалютаРеглУчета;
		ДоговорОбъект.Организация  			= асОрганизация;
		ДоговорОбъект.Владелец    			= Покупатель;
		ДоговорОбъект.ВидДоговора 			= Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		ДоговорОбъект.Записать();
	КонецЕсли; 
	
	Возврат Покупатель;
	
КонецФункции

"}
},
{0,
{"Алгоритм поиска номенклатуры с запросом без кеша.",0,0,"","//166 - КГ



//&НаСервере
//Функция ТоварНаСервере(Наименование,Артикул)
//	
//	ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");
//	Возврат ОбработкаОбъект.ВернутьСсылкуНаНоменклатуру(СокрЛП(Артикул),СокрЛП(Наименование),СокрЛП(Наименование));	
//КонецФункции



//Функционал по поиску элементов справочника
//Функционал по поиску элементов справочника
Функция ВернутьСсылкуНаНоменклатуру(нАртикул,нНаименование,нНаименованиеПолное,мПотребитель	=	Неопределено) Экспорт//передать чистые значение СокрЛП()
	
	
	ГруппаГотовойПродукции	=	Справочники.Номенклатура.НайтиПоКоду(""00-00035968"");
	ЕдИзм					=	справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(""166""); //кг
	ВидНоменклатуры			=	Справочники.ВидыНоменклатуры.НайтиПоНаименованию(""ОСНОВНОЕ СЫРЬЕ"",Истина);
	НоменклатурнаяГруппа 	=	Справочники.НоменклатурныеГруппы.НайтиПоКоду(""000000005"");
	
	
	Если ЗначениеЗаполнено(мПотребитель) Тогда
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(""Потребитель"");	
	Иначе		
		ПВХ_ДР_Потребитель	=	неопределено;//
	КонецЕсли;		
	
	НоменклатураСсылка		=	Неопределено;	
	
	Запрос 					= Новый Запрос;
	Запрос.Текст 			= 
		""ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.Наименование
		|ПОМЕСТИТЬ ТаблицаАртикулов
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И Номенклатура.Артикул ПОДОБНО """"%"""" + &Артикул + """"%""""
		|	И НЕ Номенклатура.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАртикулов.Ссылка,
		|	ТаблицаАртикулов.Ссылка.ЕдиницаИзмерения КАК ЕдИзм
		|ИЗ
		|	ТаблицаАртикулов КАК ТаблицаАртикулов"";
		
		//--< Данилин В.И 30 мая 2017 г. 13:56:49   0000001046
		// для пустого артикула ищем по точному совпадению		
		Если ПустаяСтрока(СокрЛП(нАртикул)) Тогда
			Запрос.Текст	=	Запрос.Текст+""			
			|ГДЕ
			|	ТаблицаАртикулов.Наименование = &Наименование"";			
			
		Иначе
			
			Запрос.Текст	=	Запрос.Текст+""
			|ГДЕ
			|	ТаблицаАртикулов.Наименование ПОДОБНО &Наименование + """"%"""""";
			
		КонецЕсли;
		
	Запрос.УстановитьПараметр(""Артикул""		, нАртикул);
	//--< Данилин В.И 30 мая 2017 г. 13:56:49   0000001046
	// для пустого артикула не обрезаем наименование
	Запрос.УстановитьПараметр(""Наименование"", ?(ПустаяСтрока(СокрЛП(нАртикул)),нНаименование,Лев(СокрЛП(нНаименование),20)));
	
	
	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НоменклатураСсылка	=	ВыборкаДетальныеЗаписи.ссылка;
		
		
		//Если нНаименование<>""""+НоменклатураСсылка  или ВыборкаДетальныеЗаписи.ЕдИзм<>ЕдИзм Тогда
		//	Сообщить(""Корректировка (""нАртикул""):""+?(нНаименование<>""""+НоменклатураСсылка,""""+НоменклатураСсылка+"" -> ""+нНаименование,"""")+ ?(ВыборкаДетальныеЗаписи.ЕдИзм<>ЕдИзм,"" ""+ВыборкаДетальныеЗаписи.ЕдИзм+"" -> ""+ЕдИзм,""""));			
		//	СО							=	НоменклатураСсылка.получитьОбъект();
		//	СО.Наименование				=	нНаименование;
		//	СО.НаименованиеПолное		=	нНаименованиеПолное;
		//	Корректировка				=	Истина;
		//	СО.ОбменДанными.Загрузка	=	Истина;		
		//	СО.Записать();						
		//КонецЕсли;		
		
		
		КолЗаписей			=	ВыборкаДетальныеЗаписи.Количество();
		Если КолЗаписей>1 Тогда
			Сообщить(""Найдены дубли (""+КолЗаписей+"" шт.) в номенклатуре (""+нАртикул+"") ""+нНаименование);	
		КонецЕсли;
		
		
	Иначе
		
		Сообщить(""Создана новая номенклатура (арт:""+нАртикул+"") ""+нНаименование);		
		
		СО							=	Справочники.Номенклатура.СоздатьЭлемент();
		СО.Артикул					=	нАртикул;
		СО.УстановитьНовыйКод();
		СО.Наименование				=	нНаименование;
		СО.НаименованиеПолное		=	нНаименованиеПолное;
		СО.Родитель					=	ГруппаГотовойПродукции;//00000000001
		СО.ЕдиницаИзмерения			=	ЕдИзм;
		со.ВидНоменклатуры			=	ВидНоменклатуры;
		со.НоменклатурнаяГруппа		=	НоменклатурнаяГруппа;
		СО.Комментарий				=	""#LD:""+ТекущаяДата();
		СО.СтавкаНДС				=	Перечисления.СтавкиНДС.НДС18;
		со.УстановитьНовыйКод();
		//ВернутьПотребителя(нНаименование);
		
		Если не ПустаяСтрока(мПотребитель) Тогда 			
			НС							=	СО.ДополнительныеРеквизиты.Найти(ПВХ_ДР_Потребитель);
			Если НС						=	Неопределено Тогда
				НС						=	СО.ДополнительныеРеквизиты.Добавить();		 
				НС.Свойство				=	ПВХ_ДР_Потребитель;
			КонецЕсли;
			НС.Значение					=	СокрЛП(мПотребитель);
		КонецЕсли; 		
		
		СО.ОбменДанными.Загрузка		=	Истина;		
		
		Попытка
			СО.Записать();		
			
			Если ЗначениеЗаполнено(ПВХ_ДР_Потребитель) и ПустаяСтрока(мПотребитель) Тогда
				Сообщить("" Cоздана новая номенклатура ""+?(ПустаяСтрока(мПотребитель),""(укажите потребителя!)"","""")+"":""+СО.Наименование+"" артикул:""+СО.Артикул+"" код:""+СО.Код,СтатусСообщения.Информация);
			КонецЕсли;
			НоменклатураСсылка				=	СО.Ссылка;					
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;		
		
	КонецЕсли;;
	
	Возврат НоменклатураСсылка;     
	
	
КонецФункции





ГруппаГотовойПродукции	=	Справочники.Номенклатура.НайтиПоКоду(""00-00035968"");
ЕдИзм					=	справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(""796"");
ВидНоменклатуры			=	Справочники.ВидыНоменклатуры.НайтиПоНаименованию(""Товары"",Истина);
ПВХ_ДР_Потребитель 		=	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(""Потребитель"");
НоменклатурнаяГруппа 	=	Справочники.НоменклатурныеГруппы.НайтиПоКоду(""000000005"");

//-------------------

ГруппаГотовойПродукции	=	Справочники.Номенклатура.НайтиПоКоду(""00-00035968"");
ЕдИзм					=	справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(""168"");
ВидНоменклатуры			=	Справочники.ВидыНоменклатуры.НайтиПоНаименованию(""ОСНОВНОЕ СЫРЬЕ"",Истина);
НоменклатурнаяГруппа 	=	Справочники.НоменклатурныеГруппы.НайтиПоКоду(""000000005"");


Если ЗначениеЗаполнено(мПотребитель) Тогда
	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(""Потребитель"");	
Иначе		
	ПВХ_ДР_Потребитель	=	неопределено;//
КонецЕсли;


"}
},
{0,
{"Добавить в ЛОГ",0,0,"","

Процедура ДобавитьВЛОГ(ТекстСообщения)
	
	ИмяФайла	=	""C:\sravne.txt"";
	ТекстДок	=	Новый ТекстовыйДокумент;
	
	мФайл		=	новый Файл(ИмяФайла);
	Если мФайл.Существует() Тогда
		ТекстДок.Прочитать(ИмяФайла);
	КонецЕсли;
	
	ТекстДок.ДобавитьСтроку(ТекстСообщения);
	ТекстДок.Записать(ИмяФайла);
	
КонецПроцедуры

"}
},
{0,
{"Почтовый модуль",0,0,"","
Процедура  ОтправитьПростойЕмейл(Почта,Тема,Текст) Экспорт
	
	ТД	=	Новый ТаблицаЗначений;
	ТД.Колонки.Добавить(""Текст"");
	ТД.Колонки.Добавить(""Почта"");
	ТД.Колонки.Добавить(""Тема"");
	
	НС			=	ТД.Добавить();
	НС.Почта 	= 	Почта;
	НС.Тема		=	Тема;
	НС.Текст	=	Текст;
	
	ОтправитьСообщения(ТД);
	
КонецПроцедуры


Процедура ОтправитьСообщения(ТаблицаСообщений) Экспорт
	
	Почта						= ""ta1c@l-pak.ru"";
	Пароль						= ""10241024"";	
	
	Профиль 					= Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераSMTP	= ""mx.l-pak.ru"";
	Профиль.АдресСервераPOP3	= ""mx.l-pak.ru"";
	Профиль.ПортPOP3 			= 110;
	Профиль.ПортSMTP 			= 25;
	Профиль.Пользователь 		= Почта;
	Профиль.Пароль 				= Пароль;
	Профиль.ПользовательSMTP	= Почта;
	Профиль.ПарольSMTP 			= Пароль;
	
	Профиль.АутентификацияSMTP 	= СпособSMTPАутентификации.Login;
	Почта 						= Новый ИнтернетПочта;
	
	Для каждого ТекСтрока из ТаблицаСообщений Цикл	
		
		Письмо 					= Новый ИнтернетПочтовоеСообщение;
		Текст 					= Письмо.Тексты.Добавить(ТекСтрока.Текст);
		Текст.ТипТекста 		= ТипТекстаПочтовогоСообщения.ПростойТекст;
		Письмо.Тема 			= ТекСтрока.Тема; 
		Письмо.Отправитель 		= ""ta1c@l-pak.ru"";
		Письмо.ИмяОтправителя 	= ""Автосообщение1c"";
		
		Получатель				= ?(ПустаяСтрока(ТекСтрока.Почта),""dvi@l-pak.ru"",ТекСтрока.Почта);
		Письмо.Получатели.Добавить(Получатель);
		
		Попытка
			Почта.Подключиться(Профиль);
			Почта.Послать(Письмо);
		Исключение  			
			#Если Клиент Тогда     				
				Сообщить(ОписаниеОшибки());
			#Иначе
				ЗаписьЖурналаРегистрации(""ОшибкаРегламента_ОтправкаПочты"",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());					
			#КонецЕсли							
		КонецПопытки;	
		
	КонецЦикла;	
	
	Почта.Отключиться();
	
КонецПроцедуры
"}
},
{0,
{"Алгоритм поиска номенклатуры",0,0,"","//Функционал по поиску элементов справочника
Функция ВернутьСсылкуНаНоменклатуру(нАртикул,нНаименование,нНаименованиеПолное,мПотребитель	=	Неопределено) Экспорт//передать чистые значение СокрЛП()
	
	
	ГруппаГотовойПродукции	=	Справочники.Номенклатура.НайтиПоКоду(""00-00035968"");
	ЕдИзм					=	справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(""166""); //кг
	ВидНоменклатуры			=	Справочники.ВидыНоменклатуры.НайтиПоНаименованию(""ОСНОВНОЕ СЫРЬЕ"",Истина);
	НоменклатурнаяГруппа 	=	Справочники.НоменклатурныеГруппы.НайтиПоКоду(""000000005"");
	
	
	Если ЗначениеЗаполнено(мПотребитель) Тогда
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(""Потребитель"");	
	Иначе		
		ПВХ_ДР_Потребитель	=	неопределено;//
	КонецЕсли;		
	
	НоменклатураСсылка		=	Неопределено;	
	
	Запрос 					= Новый Запрос;
	Запрос.Текст 			= 
		""ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.Наименование
		|ПОМЕСТИТЬ ТаблицаАртикулов
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И Номенклатура.Артикул ПОДОБНО """"%"""" + &Артикул + """"%""""
		|	И НЕ Номенклатура.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАртикулов.Ссылка,
		|	ТаблицаАртикулов.Ссылка.ЕдиницаИзмерения КАК ЕдИзм
		|ИЗ
		|	ТаблицаАртикулов КАК ТаблицаАртикулов"";
		
		//--< Данилин В.И 30 мая 2017 г. 13:56:49   0000001046
		// для пустого артикула ищем по точному совпадению		
		Если ПустаяСтрока(СокрЛП(нАртикул)) Тогда
			Запрос.Текст	=	Запрос.Текст+""			
			|ГДЕ
			|	ТаблицаАртикулов.Наименование = &Наименование"";			
			
		Иначе
			
			Запрос.Текст	=	Запрос.Текст+""
			|ГДЕ
			|	ТаблицаАртикулов.Наименование ПОДОБНО &Наименование + """"%"""""";
			
		КонецЕсли;
		
	Запрос.УстановитьПараметр(""Артикул""		, нАртикул);
	//--< Данилин В.И 30 мая 2017 г. 13:56:49   0000001046
	// для пустого артикула не обрезаем наименование
	Запрос.УстановитьПараметр(""Наименование"", ?(ПустаяСтрока(СокрЛП(нАртикул)),нНаименование,Лев(СокрЛП(нНаименование),20)));
	
	
	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НоменклатураСсылка	=	ВыборкаДетальныеЗаписи.ссылка;
		
		
		//Если нНаименование<>""""+НоменклатураСсылка  или ВыборкаДетальныеЗаписи.ЕдИзм<>ЕдИзм Тогда
		//	Сообщить(""Корректировка (""нАртикул""):""+?(нНаименование<>""""+НоменклатураСсылка,""""+НоменклатураСсылка+"" -> ""+нНаименование,"""")+ ?(ВыборкаДетальныеЗаписи.ЕдИзм<>ЕдИзм,"" ""+ВыборкаДетальныеЗаписи.ЕдИзм+"" -> ""+ЕдИзм,""""));			
		//	СО							=	НоменклатураСсылка.получитьОбъект();
		//	СО.Наименование				=	нНаименование;
		//	СО.НаименованиеПолное		=	нНаименованиеПолное;
		//	Корректировка				=	Истина;
		//	СО.ОбменДанными.Загрузка	=	Истина;		
		//	СО.Записать();						
		//КонецЕсли;		
		
		
		КолЗаписей			=	ВыборкаДетальныеЗаписи.Количество();
		Если КолЗаписей>1 Тогда
			Сообщить(""Найдены дубли (""+КолЗаписей+"" шт.) в номенклатуре (""+нАртикул+"") ""+нНаименование);	
		КонецЕсли;
		
		
	Иначе
		
		Сообщить(""Создана новая номенклатура (арт:""+нАртикул+"") ""+нНаименование);		
		
		СО							=	Справочники.Номенклатура.СоздатьЭлемент();
		СО.Артикул					=	нАртикул;
		СО.УстановитьНовыйКод();
		СО.Наименование				=	нНаименование;
		СО.НаименованиеПолное		=	нНаименованиеПолное;
		СО.Родитель					=	ГруппаГотовойПродукции;//00000000001
		СО.ЕдиницаИзмерения			=	ЕдИзм;
		со.ВидНоменклатуры			=	ВидНоменклатуры;
		со.НоменклатурнаяГруппа		=	НоменклатурнаяГруппа;
		СО.Комментарий				=	""#LD:""+ТекущаяДата();
		СО.СтавкаНДС				=	Перечисления.СтавкиНДС.НДС18;
		со.УстановитьНовыйКод();
		//ВернутьПотребителя(нНаименование);
		
		Если не ПустаяСтрока(мПотребитель) Тогда 			
			НС							=	СО.ДополнительныеРеквизиты.Найти(ПВХ_ДР_Потребитель);
			Если НС						=	Неопределено Тогда
				НС						=	СО.ДополнительныеРеквизиты.Добавить();		 
				НС.Свойство				=	ПВХ_ДР_Потребитель;
			КонецЕсли;
			НС.Значение					=	СокрЛП(мПотребитель);
		КонецЕсли; 		
		
		СО.ОбменДанными.Загрузка		=	Истина;		
		
		Попытка
			СО.Записать();		
			
			Если ЗначениеЗаполнено(ПВХ_ДР_Потребитель) и ПустаяСтрока(мПотребитель) Тогда
				Сообщить("" Cоздана новая номенклатура ""+?(ПустаяСтрока(мПотребитель),""(укажите потребителя!)"","""")+"":""+СО.Наименование+"" артикул:""+СО.Артикул+"" код:""+СО.Код,СтатусСообщения.Информация);
			КонецЕсли;
			НоменклатураСсылка				=	СО.Ссылка;					
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;		
		
	КонецЕсли;;
	
	Возврат НоменклатураСсылка;     
	
	
КонецФункции


//Функционал по поиску элементов справочника
Функция ВернутьСсылкуНаНоменклатуруСырье(нАртикул,нНаименование,нНаименованиеПолное,мПотребитель	=	Неопределено) Экспорт//передать чистые значение СокрЛП()
	
	ВидНоменклатуры			=	Справочники.ВидыНоменклатуры.НайтиПоНаименованию(""ОСНОВНОЕ СЫРЬЕ"",Истина);
	НоменклатурнаяГруппа 	=	Справочники.НоменклатурныеГруппы.НайтиПоКоду(""000000005"");
	
	
	
	Если ЗначениеЗаполнено(мПотребитель) Тогда
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(""Потребитель"");	
	Иначе		
		ПВХ_ДР_Потребитель	=	неопределено;//
	КонецЕсли;		
	
	НоменклатураСсылка		=	Неопределено;	
	
	Запрос 					= Новый Запрос;
	Запрос.Текст 			= 
		""ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И Номенклатура.Наименование ПОДОБНО &Наименование
		|	И НЕ Номенклатура.ПометкаУдаления"";
	
	Запрос.УстановитьПараметр(""Артикул""		, нАртикул);
	Запрос.УстановитьПараметр(""Наименование"", Лев(СокрЛП(нНаименование),50));
	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НоменклатураСсылка	=	ВыборкаДетальныеЗаписи.ссылка;
		
		
		//Если нНаименование<>""""+НоменклатураСсылка  или ВыборкаДетальныеЗаписи.ЕдИзм<>ЕдИзм Тогда
		//	Сообщить(""Корректировка (""нАртикул""):""+?(нНаименование<>""""+НоменклатураСсылка,""""+НоменклатураСсылка+"" -> ""+нНаименование,"""")+ ?(ВыборкаДетальныеЗаписи.ЕдИзм<>ЕдИзм,"" ""+ВыборкаДетальныеЗаписи.ЕдИзм+"" -> ""+ЕдИзм,""""));			
		//	СО							=	НоменклатураСсылка.получитьОбъект();
		//	СО.Наименование				=	нНаименование;
		//	СО.НаименованиеПолное		=	нНаименованиеПолное;
		//	Корректировка				=	Истина;
		//	СО.ОбменДанными.Загрузка	=	Истина;		
		//	СО.Записать();						
		//КонецЕсли;		
		
		
		КолЗаписей			=	ВыборкаДетальныеЗаписи.Количество();
		Если КолЗаписей>1 Тогда
			Сообщить(""Найдены дубли (""+КолЗаписей+"" шт.) в номенклатуре (""+нАртикул+"") ""+нНаименование);	
		КонецЕсли;
		
		
	Иначе
		
		Сообщить(""Создана новая номенклатура (арт:""+нАртикул+"") ""+нНаименование);		
		
		СО							=	Справочники.Номенклатура.СоздатьЭлемент();
		СО.Артикул					=	нАртикул;
		СО.УстановитьНовыйКод();
		СО.Наименование				=	нНаименование;
		СО.НаименованиеПолное		=	нНаименованиеПолное;
		СО.Родитель					=	ГруппаГотовойПродукции;//00000000001
		СО.ЕдиницаИзмерения			=	ЕдИзмСырья;
		со.ВидНоменклатуры			=	ВидНоменклатуры;
		со.НоменклатурнаяГруппа		=	НоменклатурнаяГруппа;
		СО.Комментарий				=	""#LD:""+ТекущаяДата();
		СО.СтавкаНДС				=	Перечисления.СтавкиНДС.НДС18;
		со.УстановитьНовыйКод();
		//ВернутьПотребителя(нНаименование);
		
		Если не ПустаяСтрока(мПотребитель) Тогда 			
			НС							=	СО.ДополнительныеРеквизиты.Найти(ПВХ_ДР_Потребитель);
			Если НС						=	Неопределено Тогда
				НС						=	СО.ДополнительныеРеквизиты.Добавить();		 
				НС.Свойство				=	ПВХ_ДР_Потребитель;
			КонецЕсли;
			НС.Значение					=	СокрЛП(мПотребитель);
		КонецЕсли; 		
		
		СО.ОбменДанными.Загрузка		=	Истина;		
		
		Попытка
			СО.Записать();		
			
			Если ЗначениеЗаполнено(ПВХ_ДР_Потребитель) и ПустаяСтрока(мПотребитель) Тогда
				Сообщить("" Cоздана новая номенклатура ""+?(ПустаяСтрока(мПотребитель),""(укажите потребителя!)"","""")+"":""+СО.Наименование+"" артикул:""+СО.Артикул+"" код:""+СО.Код,СтатусСообщения.Информация);
			КонецЕсли;
			НоменклатураСсылка				=	СО.Ссылка;					
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;		
		
	КонецЕсли;;
	
	Возврат НоменклатураСсылка;     
	
	
КонецФункции
"}
},
{0,
{"ВернутьДокумент (ВидДокумента,ДеньЗапроса,мКонтрагент=Неопределено,мДОговор=Неопределено)",0,0,"","Функция ВернутьДокумент(ВидДокумента,ДеньЗапроса,мКонтрагент=Неопределено,мДОговор=Неопределено)
	
	//ТекстКомм		=	""#2018_тд_сырье"";
	ТекстКомм		=	""#""+Год(ДеньЗапроса)+""-""+Месяц(ДеньЗапроса)+""_""+?(мКонтрагент	<>Неопределено,мКонтрагент.Код,"""")+?(Сырье,""_бумага"",""_товар"");
	ТекстКомм		=	СтрЗаменить(ТекстКомм,Символы.НПП,"""");

	Запрос 			= Новый Запрос;
	Запрос.Текст 	= 
		""ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.""+ВидДокумента+"" КАК ТаблицаДокумента
		|ГДЕ
		|	(ВЫРАЗИТЬ(ТаблицаДокумента.Комментарий КАК СТРОКА(50))) = &ТекстКомм
		|	И ТаблицаДокумента.Дата МЕЖДУ &ДатаС И &ДатаПО
		|	И НЕ ТаблицаДокумента.ПометкаУдаления
		|	""+?(мКонтрагент	<>Неопределено,""И ТаблицаДокумента.Контрагент = &Контрагент"","""")+""
		|	""+?(мДОговор	<>Неопределено,""И ТаблицаДокумента.ДоговорКонтрагента = &ДоговорКонтрагента"","""");
	
	Запрос.УстановитьПараметр(""ДатаПО""				, КонецДня(ДеньЗапроса));
	Запрос.УстановитьПараметр(""ДатаС""				, НачалоДня(ДеньЗапроса));
	Запрос.УстановитьПараметр(""ТекстКомм""			, ТекстКомм);
	Запрос.УстановитьПараметр(""Контрагент""			, мКонтрагент);
	Запрос.УстановитьПараметр(""ДоговорКонтрагента""	, мДОговор);
	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	ДокСсылка				=	Неопределено;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДО					=	ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();		
		сообщить(""Корректировка: ""+ВыборкаДетальныеЗаписи.ссылка);
	Иначе		
		ДО									=	Документы[ВидДокумента].СоздатьДокумент();		
		сообщить(""Создание: ""+До);		
	КонецЕсли;		
	ДО.Организация							=	Организация;
	ДО.Дата									=	ДеньЗапроса;
	до.Комментарий							=	ТекстКомм;
	
	
	Если ВидДокумента						=	""РеализацияТоваровУслуг"" Тогда 
		
	до.Контрагент							=	мКонтрагент;
	ДО.ДоговорКонтрагента					=	мДОговор;
		
		ДО.Склад							= Склад;			
		ДО.СчетУчетаРасчетовСКонтрагентом 	= СчетУчетаРасчетовСКонтрагентом;
		ДО.СчетУчетаРасчетовПоАвансам 		= СчетУчетаРасчетовПоАвансам;
		ДО.СпособЗачетаАвансов 				= Перечисления.СпособыЗачетаАвансов.Автоматически;		
		ДО.СуммаВключаетНДС 				= Истина;
		до.ВалютаДокумента					=	ВалютаДокумента;
		
		
		ДО.ВидОперации						=	Перечисления.ВидыОперацийРеализацияТоваров.Товары;
		ДО.БанковскийСчетОрганизации 		= 	Организация.ОсновнойБанковскийСчет;
		ДО.Грузоотправитель					= 	Контрагент;
		ДО.Грузополучатель 					= 	Контрагент;								
		
	ИначеЕсли ВидДокумента					=	""ПередачаТоваров"" Тогда 
		
		ДО.ВидОперации						=	Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
		до.Контрагент						=	мКонтрагент;
		ДО.ДоговорКонтрагента				=	мДОговор;
		до.ВалютаДокумента					=	ВалютаДокумента;
		
	ИначеЕсли ВидДокумента					=	""ОтчетПроизводстваЗаСмену"" Тогда 
		
		//ДО.СчетЗатрат						=	СчетЗатратПроизводство;		
		//ДО.ПодразделениеЗатрат 				= 	ПодразделениеЗатрат;
		//ДО.НоменклатурнаяГруппа 			= 	НоменклатурнаяГруппа;
		//ДО.НДСВключенВСтоимость 			= 	ЛОЖЬ;
		//
		//ДО.СчетУчетаРасчетовСКонтрагентом 	= СчетУчетаРасчетовСКонтрагентом;
		//ДО.СчетУчетаРасчетовПоАвансам 		= СчетУчетаРасчетовПоАвансам;
		//ДО.СпособЗачетаАвансов 				= Перечисления.СпособыЗачетаАвансов.Автоматически;		
		//ДО.СуммаВключаетНДС 				= Истина;
	Иначе
		
		
		
		
	КонецЕсли;	
	
	Возврат ДО;
	
КонецФункции"}
},
{0,
{"Процедура ОбработатьДокументы() Экспорт",0,0,"","Процедура ОбработатьДокументы() Экспорт
	
	
	МассивДат					=	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ТЧТовары.ВыгрузитьКолонку(""Дата""));	
	
	СчетДоходов 				= ПланыСчетов.Хозрасчетный.НайтиПоКоду(""90.01.1"");
	СчетУчетаНДСПоРеализации 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду(""90.03"");
	СчетРасходов 				= ПланыСчетов.Хозрасчетный.НайтиПоКоду(""90.02.1"");
		
	ТаблицаВыпуска				=	ТЧТовары.Выгрузить(,""Дата,НоменклатураСвод,Количество,КоличествоВыпуск"");
	ТаблицаВыпуска.Свернуть(""Дата,НоменклатураСвод"",""Количество,КоличествоВыпуск"");
	
	НачатьТранзакцию();
	Для Каждого ТекДня из МассивДат Цикл
		ДокВыпуска							=	ВернутьДокумент(""ОтчетПроизводстваЗаСмену"",ТекДня+116);		
		ДокВыпуска.СчетЗатрат 				= 	СчетЗатратПроизводство;//ПланыСчетов.Хозрасчетный.НайтиПоКоду(""20.01"");
		ДокВыпуска.ПодразделениеЗатрат 		= 	ПодразделениеЗатрат;	
		ДокВыпуска.Склад					=	Склад;
		
		ДокВыпуска.Продукция.Очистить();		
		МассивСтрок							=	ТаблицаВыпуска.НайтиСтроки(Новый Структура(""Дата"",ТекДня));
		
		
		
		Для каждого ТекСтрока из МассивСтрок Цикл									
			СтрокаГП 						= ДокВыпуска.Продукция.Добавить();
			СтрокаГП.НоменклатурнаяГруппа 	= НоменклатурнаяГруппаСубконто;
			СтрокаГП.Номенклатура 			= ТекСтрока.НоменклатураСвод;
			СтрокаГП.Количество				= ТекСтрока.КоличествоВыпуск;
			СтрокаГП.ПлановаяСтоимость		= ЦенаВыпуска;
			СтрокаГП.СуммаПлановая 			= ЦенаВыпуска *	ТекСтрока.Количество;
			СтрокаГП.ЕдиницаИзмерения 		= СтрокаГП.Номенклатура.ЕдиницаИзмерения;
			СтрокаГП.Коэффициент 			= 1;
			СтрокаГП.Счет 					= СчетЗатратПроизводство; 						
		КонецЦикла;		
		
		//ПЕРЕДАЧА ПРОДУКЦИИ		
		ДокОбъектПередача 					= ВернутьДокумент(""ПередачаТоваров"",ТекДня+116,Контрагент,Договор);	;
		ДокОбъектПередача.ВидОперации		=	Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки;	
		ДокОбъектПередача.Склад				= Склад;			
		ДокОбъектПередача.Товары.очистить();						
		МассивСтрок							= ТЧТовары.НайтиСтроки(Новый Структура(""Дата"",ТекДня));
		
		Для каждого ТекСтрока из МассивСтрок Цикл									
			СтрокаГП 						= ДокОбъектПередача.Товары.Добавить();						
			СтрокаГП.Номенклатура 			= ТекСтрока.Номенклатура;
			СтрокаГП.Количество				= ТекСтрока.КоличествоВыпуск;
			СтрокаГП.СчетУчета 				= СчетЗатратПроизводство; 						
			//СтрокаГП.СчетПередачи			= СчетЗатратПроизводство; 						
		КонецЦикла;					
		ЗаписатьСУчетомПроведения(ДокВыпуска);
		ЗаписатьСУчетомПроведения(ДокОбъектПередача);		
	КонецЦикла;
	ЗафиксироватьТранзакцию();	

	
КонецПроцедуры"}
},
{0,
{"Процедура ЗаполнитьЗначенияПоУмолчанию() Экспорт",0,0,"","Процедура ЗаполнитьЗначенияПоУмолчанию() Экспорт
	
	
	//Перем Пароль, пут, реф, СтрокаПодключения, Юзер;
	
	пут 	= 	""1c-1-server,1c-2-server"";
	
	реф 	= 	?(Сырье,""buh-bum-pack"",""buh-td-l-pack"");
	Юзер	=	""Администратор"";
	Пароль	=	?(Сырье,""12343412"",""12345"");
	
	СтрокаПодключения				=	""Srvr = """""" + СокрЛП(Пут) + """""";Ref = """""" + реф + """"""; Usr = """""" + Юзер + """"""; Pwd = """""" + Пароль + """""";"";
	//Сообщить(СтрокаПодключения);
	
	ВалютаДокумента					=	Константы.ВалютаРегламентированногоУчета.Получить();
	
	Организация 					= 	Справочники.Организации.НайтиПоКоду(""000000001"");
	
	
	СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Хозрасчетный.НайтиПоКоду(""62.01"");
	СчетУчетаРасчетовПоАвансам 		= ПланыСчетов.Хозрасчетный.НайтиПоКоду(""62.02"");
	СчетЗатратПроизводство 			= ПланыСчетов.Хозрасчетный.НайтиПоКоду(""20.02"");
	СчетУчетаГотовойПродукции		= ПланыСчетов.Хозрасчетный.НайтиПоКоду(""43"");
	
	ЕдИзмСырья 						= справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(""166"");	
	СчетУчета003_2 					= ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
	СчетУчета003_1					= ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;	
	        	
	НоменклатураСводБУМ_Бумага		=	Справочники.Номенклатура.НайтиПоНаименованию(""Бумага для гофрирования""		,Истина);
	НоменклатураСводБУМ_Картон		=	Справочники.Номенклатура.НайтиПоНаименованию(""Картон для плоских слоев""		,Истина);
	НоменклатураСводТД				=	Справочники.Номенклатура.НайтиПоНаименованию(""Гофроупаковка""				,Истина);
	
	ЦенаВыпуска						=	0.01;
	
	
	Если  Сырье Тогда
		
		НоменклатурнаяГруппаСубконто = Справочники.НоменклатурныеГруппы.НайтиПоКоду(""00-000001"");// пр. бумаги
		ПодразделениеЗатрат 			= 	Справочники.ПодразделенияОрганизаций.НайтиПоКоду(""ЛП-000002"");
		
		Контрагент					= Справочники.Контрагенты.НайтиПоКоду(""-_0000333"");
		Договор						= Справочники.ДоговорыКонтрагентов.НайтиПоКоду(""ЛП-000581""); //давальческий	
		Склад 						= Справочники.Склады.НайтиПоНаименованию(""Склад Рулонов"");
		СкладСырья 					= Справочники.Склады.НайтиПоНаименованию(""Склад Макулатуры"");
		
		
		
	Иначе
		
		
		ПодразделениеЗатрат 			= 	Справочники.ПодразделенияОрганизаций.НайтиПоКоду(""ЛП-000003"");
		НоменклатурнаяГруппаСубконто = Справочники.НоменклатурныеГруппы.НайтиПоКоду(""000000017"");// пр. гофорокартона и упаковки
		
		Контрагент					= Справочники.Контрагенты.НайтиПоКоду(""-0000499"");
		Договор						= Справочники.ДоговорыКонтрагентов.НайтиПоКоду(""ЛП-000586""); //давальческий	
		
		Склад 						= Справочники.Склады.НайтиПоНаименованию(""Склад Готовой продукции"");
		СкладСырья 					= Справочники.Склады.НайтиПоНаименованию(""Склад Рулонов"");		
	КонецЕсли;
	
	
КонецПроцедуры
"}
},
{0,
{"Форма Процедура НайтиНоменклатуруНаСервере()",0,0,"","&НаСервере
Процедура НайтиНоменклатуруНаСервере()
	
	ОбработкаОбъект 	= РеквизитФормыВЗначение(""Объект"");		
	
	ТЗНом				=	Объект.ТЧТовары.Выгрузить(,""Наименование,Артикул,ТНВЭД,Потребитель"");
	ТЗНом.Свернуть(""Наименование,Артикул,ТНВЭД,Потребитель"");
	СтруктураПоиска		=	новый Структура(""Наименование,Артикул,ТНВЭД,Потребитель"");	
	
	Для каждого ТекСтрока из ТЗНом Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекСтрока);
		МассивСтрок		=	Объект.ТЧТовары.НайтиСтроки(СтруктураПоиска);
		
		
		Если Объект.Сырье 	Тогда        														//(нАртикул,нНаименование,нНаименованиеПолное,мПотребитель	=	Неопределено)
			мНоменклатура		=	ОбработкаОбъект.ВернутьСсылкуНаНоменклатуруСырье(СокрЛП(ТекСтрока.Артикул),СокрЛП(ТекСтрока.Наименование),СокрЛП(ТекСтрока.Наименование));
			мНоменклатураСвод	=	?(Найти(ВРег(ТекСтрока.Наименование),""БУМАГА"")>0,Объект.НоменклатураСводБУМ_Бумага,Объект.НоменклатураСводБУМ_Картон);
		Иначе     			
			мНоменклатура		=	ОбработкаОбъект.ВернутьСсылкуНаНоменклатуру(СокрЛП(ТекСтрока.Артикул),СокрЛП(ТекСтрока.Наименование),СокрЛП(ТекСтрока.Наименование),СокрЛП(ТекСтрока.ТНВЭД),СокрЛП(ТекСтрока.Потребитель));
			мНоменклатураСвод	=	Объект.НоменклатураСводТД;
		КонецЕсли;
		Для каждого ТекСтрока Из МассивСтрок Цикл
			ТекСтрока.Номенклатура		=	мНоменклатура;			
			ТекСтрока.НоменклатураСвод	=	мНоменклатураСвод;			
		КонецЦикла; 		
	КонецЦикла;	
	
	//////Для каждого ТекСтрока из Объект.ТЧТовары Цикл
	//////	ТекСтрока.Номенклатура	=	ОбработкаОбъект.ВернутьСсылкуНаНоменклатуру(ТекСтрока.Артикул,ТекСтрока.Наименование,ТекСтрока.Наименование, ТекСтрока.ТНВЭД,ТекСтрока.Потребитель);		
	//////КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"ЗаписатьСУчетомПроведения(ДокументОбъект)",0,0,"","

Функция ЗаписатьСУчетомПроведения(ДокументОбъект)
	
	Сообщить(?(ДокументОбъект.Проведен,""V "",""О "")+ДокументОбъект);			
	
	ОшибкаПроведения		=	ЛОЖЬ;	
	Попытка
		ДокументОбъект.Записать(?(ДокументОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));		
	Исключение
		ОшибкаПроведения	=	Истина;
		Сообщить("" ошибка записи:""+ДокументОбъект+"" ""+ОписаниеОшибки());
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);						
	КонецПопытки;	
		
	Возврат ОшибкаПроведения;	
	
КонецФункции
"}
},
{0,
{"ЗаполнитьЗначенияПоУмолчанию () экспорт",0,0,"","Процедура ЗаполнитьЗначенияПоУмолчанию() Экспорт
	
	Организация					=	Справочники.Организации.ОрганизацияПоУмолчанию(ИмяПользователя());
	ГруппаСозданияНоменклатуры	=	Справочники.Номенклатура.НайтиПоКоду(""00000000066"");
	ЕдИзм						=	Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(""166"");
	ВидНоменклатуры				=	Справочники.ВидыНоменклатуры.НайтиПоНаименованию(""Сырье и материалы"",Истина);
	
	
	КонтрагентЛПАК				=	Справочники.Контрагенты.НайтиПоКоду(""000000008"");
	ДоговорЛПАК					=	Справочники.ДоговорыКонтрагентов.НайтиПоКоду(""БП-000362"");
	
	КонтрагентТД				=	Справочники.Контрагенты.НайтиПоКоду(""000000014"");
	ДоговорТД					=	Справочники.ДоговорыКонтрагентов.НайтиПоКоду(""БП-000401"");
	
	СчетУчета10_01				=	ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
	СчетУчета10_7				=	ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
	
	
	СчетУчетаРасчетовСКонтрагентом 	= 	ПланыСчетов.Хозрасчетный.НайтиПоКоду(""62.01"");
	СчетУчетаРасчетовПоАвансам 		= 	ПланыСчетов.Хозрасчетный.НайтиПоКоду(""62.02"");
	СчетУчетаГотовойПродукции 		= 	ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
	СчетЗатратПроизводство			=	ПланыСчетов.Хозрасчетный.НайтиПоКоду(""20.01"");
	ПодразделениеЗатрат				=	Справочники.ПодразделенияОрганизаций.НайтиПоКоду(""БП-000001"");
	НоменклатурнаяГруппа			=	Справочники.НоменклатурныеГруппы.НайтиПоКоду(""БП-000001"");//бумага	
	СкладВыпуска					=	Справочники.Склады.НайтиПоНаименованию(""Склад рулонов"");
	СкладСырья						=	Справочники.Склады.НайтиПоНаименованию(""Склад макулатуры"");
	Валюта							=	Константы.ВалютаРегламентированногоУчета.Получить();		
	СтатьяЗатрат					=	Справочники.СтатьиЗатрат.НайтиПоКоду(""БП-000064"");
	НоменклатураМакулатура			=	Справочники.Номенклатура.НайтиПоКоду(""БП-00001193"");
	
	
	
	//
	Если не ЗначениеЗаполнено(СкладВыпуска) Тогда
		Сообщить(""не найден склад выпуска: Рулоны"");
		СкладВыпуска	=		Справочники.Склады.НайтиПоКоду(""000000001"");
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(СкладСырья) Тогда
		Сообщить(""не найден склад сырья: макулатура"");
		СкладСырья		=		Справочники.Склады.НайтиПоКоду(""000000001"");
	КонецЕсли;
	//
	
	ЦенаПродажиБумага	=	33;
	ЦенаПродажиКартон	=	34;

	
	
КонецПроцедуры
"}
},
{0,
{"(ORCL) ВыполнитьЗапросаВернутьТаблицу ",0,0,"","//////Таблица QOTHER

//////Текст SQL писать в SQLText

//////Параметры 
//////Имя писать ParamByName
//////Значение в текстовом виде писать в ParamValue
//////Для значений даты использовать строго data1 и data2

//////Поля
//////Номер поля писать FieldNUM
//////Читать из FieldValue

&НаКлиенте
Функция ВыполнитьЗапросаВернутьТаблицу(ЗапросТекст	=	"""",ТЗПараметры)
	
	Попытка
		ВК 			= Новый COMОбъект(""Server.OperUt"");
	Исключение
		ВК 			=	0;
		Результат	=	ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	ВК.NameTable 	= ""QOTHER"";
	
	ВК.SQL			= ЗапросТекст;	
	
	//Установка Параметров	
	//Для каждого ТекЗначение из ТЗПараметры Цикл		
	ВК.ParamByName			=	""data1"";
	ВК.ParamValue			=	Объект.НачалоПериода;						
	
	ВК.ParamByName			=	""data2"";
	ВК.ParamValue			=	Объект.КонецПериода;//						
	
	//КонецЦикла;	
	
	
	ВК.MoveNext();
	//////КоличествоПолей	=	Число(ВК.fields_count)-1;	
	//////ТаблицаЗначений	=	Новый ТаблицаЗначений;
	
	Пока ВК.IsEOF 			= 0 Цикл
		
		НоваяСтрока					=	Объект.ТЧТовары.Добавить();
		ВК.FieldNUM					=	0;						
		НоваяСтрока.Дата			=	Прав(ВК.FieldValue,4)+Сред(ВК.FieldValue,4,2)+Лев(ВК.FieldValue,2);			
		
		ВК.FieldNUM					=	1;						
		НоваяСтрока.Количество		=	Число(ВК.FieldValue);//Прав(ВК.FieldValue,4)+Сред(ВК.FieldValue,4,2)+Лев(ВК.FieldValue,2);	
		
		ВК.FieldNUM					=	2;						
		НоваяСтрока.Наименование		=	СокрЛП(ВК.FieldValue);						
		НоваяСтрока.Отметка			=	Истина;
		
		
		
		ВК.MoveNext();
	КонецЦикла;
	
	ВК 		= Неопределено;
	
	//Возврат ТаблицаЗначений;
	
	
КонецФункции
"}
},
{0,
{"Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор",0,0,"","	Организация					=	Справочники.Организации.НайтиОрганизацию(""4825045539"");	//ТД
		
	Контрагент					=	Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(""0bb833c8-84be-4b02-8ec9-5143e6254281"")); //бум пак
	ДоговорКонтрагента			=	Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(""d4475141-4180-11e8-9eb6-000c295993a2""));;     //Договор; Договор поставки бумаги № 1Б от 01.01.2018
"}
}
},
{7,
{"МАКЕТЫ",1,0,"",""},
{0,
{"Загрузка таблиц содерж данные из макетов",0,0,"","
	
	Макет 			=	ПолучитьМакет(""ТаблицаСоответсвий"");
	ОбластьОбъектов	=	Макет.Области.СоответсвиеСправочников;
	Счетчик = 0;	
	Для к =  ОбластьОбъектов.Верх По ОбластьОбъектов.Низ Цикл		
		ТекВидОбъекта 	= СокрЛП(Макет.Область(""R""+к+""C1"").Текст);
		ДокументТип		= СокрЛП(Макет.Область(""R""+к+""C2"").Текст);
	КонецЦикла;"}
},
{0,
{"Вернуть Макет (функция)",0,0,"","Функция ВернутьМакетДляРаботы(НаименованиеМакета) Экспорт
	
	//Если Наименование макет не существует в обработке.
	Если НаименованиеМакета	=	""РСУсловияПередачиНаценка"" Тогда
		ФайлСодержащийМакет	=	ФайлМакетаУсловий;
	Иначе
		Сообщить(""Неопознанный макет"");
		Возврат Неопределено;
	КонецЕсли;  	
	
	//Значения макета по умолчанию
	МакетПоУмолчанию			=	ПолучитьМакет(НаименованиеМакета);
	
	Если ФайлМакетаУсловий		<>	ФайлМакетаУсловийПоУмолчанию Тогда			
		Попытка
			МакетПоУмолчанию	=	Новый ТабличныйДокумент();
			МакетПоУмолчанию.Прочитать(ФайлМакетаУсловий);
		Исключение
			Сообщить(""Файл  поврежден, будут использованы значения по умолчанию."",СтатусСообщения.Важное);		
			МакетПоУмолчанию	=	ПолучитьМакет(НаименованиеМакета);
		КонецПопытки;		
	КонецЕсли;
	
	Возврат МакетПоУмолчанию;
	
КонецФункции
"}
},
{0,
{"Подправить ширину макета при оформления",0,0,"","Процедура ПодправитьМакет(МакетОформления,СтароеИмя,НовоеИмя,ШиринаКолонки)

	ТекОбласть = МакетОформления.Области.ШапкаТаблицы 
	НайденаяЯчейка	=	МакетОформления.найтитекст(СтароеИмя,,ТекОбласть,,Истина);		
	Если НайденаяЯчейка	=	Неопределено Тогда
		Продолжить;
	конецЕсли;
		
		
	Если НайденаяЯчейка.Параметр=Неопределено Тогда
		Пока НайденаяЯчейка<> Неопределено Цикл 
			НайденаяЯчейка.Текст			=	НовоеИмя;
			НайденаяЯчейка.ШиринаКолонки	=	ШиринаКолонки;
			НайденаяЯчейка.РазмещениеТекста	=	ТипРазмещенияТекстаТабличногоДокумента.Переносить;				
			НайденаяЯчейка	=	МакетОформления.найтитекст(СтароеИмя,,ТекОбласть,,Истина);
		КонецЦикла;
	иначе
		
		НайденаяЯчейка.Формат	=	ФорматВывода;			
	КонецЕсли;
		          
КонецПроцедуры
"}
},
{0,
{"подправить ширину макета при оформлении 2",0,0,"","Процедура ПодправитьМакет(МакетОформления,СтароеИмя,НовоеИмя,ШиринаКолонки)

	ТекОбласть = МакетОформления.Области.ШапкаТаблицы; 
	НайденаяЯчейка	=	МакетОформления.найтитекст(СтароеИмя,,ТекОбласть,,Истина);		
	Если НайденаяЯчейка	=	Неопределено Тогда
		Возврат;
	конецЕсли;    		
		
	Если НайденаяЯчейка.Параметр=Неопределено Тогда
		НайденаяЯчейка.Текст			=	НовоеИмя;
		НайденаяЯчейка.ШиринаКолонки	=	ШиринаКолонки;
		НайденаяЯчейка.РазмещениеТекста	=	ТипРазмещенияТекстаТабличногоДокумента.Переносить;				
	иначе  		
		НайденаяЯчейка.Формат			=	""ЧЦ=15; ЧДЦ=3; ЧРГ="";			
	КонецЕсли;
		          
КонецПроцедуры
"}
},
{0,
{"Установить расшифровку для макета",0,0,"","Процедура ПодправитьМакетРасшифровок(МакетОформления,ИмяПоиска,Расшифровка)

	ТекОбласть = МакетОформления.Области.Детали; 
	НайденаяЯчейка	=	МакетОформления.найтитекст(ИмяПоиска,,ТекОбласть,,Истина);		
	Если НайденаяЯчейка	=	Неопределено Тогда
		Возврат;
	конецЕсли;    		
	
	НайденаяЯчейка.ПараметрРасшифровки	=	Расшифровка;	
		          
КонецПроцедуры"}
},
{0,
{"СохранитьМакетПоИмени",0,0,"","Процедура  СохранитьМакетПоИмени(ИмяМакета,ИмяФайла)
	
	
	ОбработкаОбъект = 	РеквизитФормыВЗначение(""Объект"");
	ДвоичныеДанные	=	ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	ДвоичныеДанные.Записать(ИмяФайла);	

	
КонецПроцедуры
"}
},
{1,
{"СохранитьЗначениеВМакете",1,0,"",""},
{0,
{"#Область СОХРАНЕНИЕ_НАСТРОЕК",0,0,"","#Область СОХРАНЕНИЕ_НАСТРОЕК

//запись настроек в РС Пользовательские макеты печати
Процедура СохранитьНастройки(ЗначенияСохранения) 
	
	МенеджерЗаписи 			     = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();		
	МенеджерЗаписи.ИмяМакета 	 = ""Таблица_Мепинга_ОбработкаПоступленийПоТендеруПеревозок"";
	МенеджерЗаписи.Объект		 = ""ОбработкаПоступленийПоТендеруПеревозок"";	
	МенеджерЗаписи.Макет 		 = Новый ХранилищеЗначения(ЗначенияСохранения);
	МенеджерЗаписи.Использование = Истина;
	
	МенеджерЗаписи.Записать();	
	
КонецПроцедуры

Функция ПолучитьСохраненныеДанные() 
	
	ДанныеСохранения	=	Неопределено;
	
	
	НаборЗаписей = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(""ОбработкаПоступленийПоТендеруПеревозок"");	
	НаборЗаписей.Прочитать();
	
	Для Каждого Настройка Из НаборЗаписей Цикл
		
		ДанныеСохранения 			   = Настройка.Макет.Получить();		
		
	КонецЦикла; 
	
	Возврат ДанныеСохранения



	
КонецФункции

Процедура УдалитьСтаруюЗаписьРС(ТаблицаНабора)
	
	//ТаблицаНабора.Колонки.Добавить(""ДатаНастройки"");
	//
	//Для Каждого Стр Из ТаблицаНабора Цикл
	//	
	//	Буфер 		= СтрЗаменить(Стр.ИмяМакета, ""_"", Символы.ПС);
	//	СтрокаДата  = СтрЗаменить(СтрПолучитьСтроку(Буфер, 2), ""."", Символы.ПС); 
	//	ЧастьДень   = СтрПолучитьСтроку(СтрокаДата, 1);
	//	ЧастьМесяц  = СтрПолучитьСтроку(СтрокаДата, 2);
	//	ЧастьГод    = СтрПолучитьСтроку(СтрокаДата, 3);
	//	ДатаЦеликом = Дата(ЧастьГод + ЧастьМесяц + ЧастьДень + ""000000""); 
	//			
	//	Стр.ДатаНастройки	 = ДатаЦеликом;
	//	
	//КонецЦикла;
	//
	//ТаблицаНабора.Сортировать(""ДатаНастройки Возр"");
	
	//МенеджерЗаписи 		     = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.Объект    = ПредставлениеОбъекта;
	//МенеджерЗаписи.ИмяМакета = ""Таблица_Мепинга"";
	//
	//МенеджерЗаписи.Прочитать();
	//Если МенеджерЗаписи.Выбран() Тогда
	//	МенеджерЗаписи.Удалить();
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
"}
}
}
},
{3,
{"Файлы значения",1,0,"",""},
{0,
{"ЗначениеВфайл",0,0,"","Процедура СохраненияЗначенияВФайл(СохраняемоеЗначене=100)
	
	Имяфайла	=	"""";
	// Сохранение дерева запросов 
	// переменная ДеревоЗапросов имеет тип ДеревоЗначений
	Если ПустаяСтрока(ИмяФайла) Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Заголовок = ""Укажите файл для списка запросов"";
		Диалог.Фильтр = ""Файлы значений (*.znc)|*.znc|Все файлы (*.*)|*.*"";
		Диалог.Расширение = ""znc"";
		Если Диалог.Выбрать() Тогда
			ИмяФайла = Диалог.ПолноеИмяФайла;
			ИмяПути = Диалог.Каталог;
		КонецЕсли;
	КонецЕсли;
	
	Сохранено=ЗначениеВФайл(ИмяФайла, СохраняемоеЗначене);	
	Если Сохранено Тогда
		Сообщить("" Значение сохранено."",СтатусСообщения.Информация);
	Иначе
		Сообщить("" Значение не сохранено."",СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Значение из файла",0,0,"","Функция ЗагрузитьЗначениеИзФайла()
	
	Имяфайла	=	"""";
	Если ПустаяСтрока(ИмяФайла) Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = ""Укажите файл содержащий значения"";
		Диалог.Фильтр = ""Файлы значений (*.znc)|*.znc|Все файлы (*.*)|*.*"";
		Диалог.Расширение = ""znc"";
		Если Диалог.Выбрать() Тогда
			ИмяФайла = Диалог.ПолноеИмяФайла;
			ИмяПути = Диалог.Каталог;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	
	ПолученноеЗначение	=	Неопределено;
	Файл				=	Новый Файл(ИмяФайла);
	Если не Файл.Существует() Тогда
		возврат Неопределено;
	КонецЕсли;
	
	ПолученноеЗначение = ЗначениеИзФайла(ИмяФайла);
	
	Сообщить(""тип данных:""+ТипЗнч(ПолученноеЗначение));
	
	Возврат ПолученноеЗначение;
	
	
КонецФункции
"}
},
{0,
{"Загрузить произвольную таблицу Ехселл 97-2003",0,0,"","
Функция ЗагрузитьФайлВТаблицу()
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Сообщить(""Для запуска обработки необходимо предварительно выбрать файл Microsoft Excel."",СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		// Загрузка Microsoft Excel
		Состояние(""Загрузка Microsoft Excel..."");
		ExcelПриложение = Новый COMОбъект(""Excel.Application"");
	Исключение
		Сообщить(""Ошибка при загрузке Microsoft Excel."" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецПопытки;
	
	
	ТаблицаРезультат	=	новый ТаблицаЗначений;
	
	Попытка
		// Открытие файла Microsoft Excel
		Состояние(""Открытие файла Microsoft Excel..."");
		ExcelФайл = ExcelПриложение.WorkBooks.Open(ИмяФайла);
		
		// Обработка файла Microsoft Excel
		Состояние(""Обработка файла Microsoft Excel..."");
		ExcelЛист 				= 	ExcelФайл.Sheets(1);
		xlCellTypeLastCell 		= 	11;
		ExcelПоследняяСтрока 	= 	ExcelЛист.Cells.SpecialCells(xlCellTypeLastCell).Row;
		ExcelПоследняяКолонка 	= 	ExcelЛист.Cells.SpecialCells(xlCellTypeLastCell).Column;
		ДобавитьКомментарий		=	Ложь;
		
		Для ТекКолонки =1 по ExcelПоследняяКолонка Цикл
			ТаблицаРезультат.Колонки.Добавить(""Кол_""+Строка(ТекКолонки));
		КонецЦикла;      		
		
		Для Строка = 1 По ExcelПоследняяСтрока Цикл
			Состояние("""" + Строка + ""/"" + ExcelПоследняяСтрока);			
			НоваяСтрока	=	ТаблицаРезультат.Добавить();
			
			Для ТекКолонки =1 по ExcelПоследняяКолонка Цикл
				ЗначениеТекКолонки	=	ExcelЛист.Cells(Строка, ТекКолонки).Value;
				
				НоваяСтрока[""Кол_""+Строка(ТекКолонки)]	=	ЗначениеТекКолонки;				
				
			КонецЦикла;
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции"}
}
},
{20,
{"СКД",1,0,"",""},
{0,
{"ЗаполнитьНастройкиСКД",0,0,"","Процедура ЗаполнитьНастройкиСКД()
	
	СКД	=	ОбработкаОбъект.ПолучитьМакет(""СКД_ФормированиеПрайсЛиста"");	
	
	КомпановщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	
	КомпановщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);

	УстановитьПараметры_СКД();	 
	
КонецПроцедуры
"}
},
{0,
{"Установить параметры",0,0,"","	
	Параметры	=	КомпановщикНастроек.Настройки.ПараметрыДанных.Элементы;
	
	///Места учета
	МестоУчетаМагазины	=	Параметры.Найти(""МестоУчетаМагазины"");
	Если МестоУчетаМагазины<>Неопределено Тогда
		СписокМагазинов				=	новый СписокЗначений;
		СписокМагазинов.Добавить(Справочники.МестаУчета.НайтиПоРеквизиту(""Представление"",""30""));
		СписокМагазинов.Добавить(Справочники.МестаУчета.НайтиПоРеквизиту(""Представление"",""47""));
		
		
		МестоУчетаМагазины.Значение			=	СписокМагазинов;
		МестоУчетаМагазины.Использование	=	Истина;
	Иначе
		Сообщить(""Не найдено один из параметров, см. вкладку параметры"");	
	КонецЕсли;
"}
},
{0,
{"Вывод результата в табл. документ",0,0,"","	СхемаКомпоновкиДанных	=	ЭтотОбъект.ПолучитьМакет(""СКД_ФормированиеПрайсЛиста"");			
	//СхемаКомпоновкиДанных.ЗагрузитьНастройки(КомпановщикНастроек);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	ДокументРезультат = новый ТаблицаЗначений;

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	

	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	"}
},
{0,
{"Вывод результата в таблицу значений",0,0,"","	СхемаКомпоновкиДанных	=	ЭтотОбъект.ПолучитьМакет(""СКД_ФормированиеПрайсЛиста"");			
	//СхемаКомпоновкиДанных.ЗагрузитьНастройки(КомпановщикНастроек);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки,,Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	ДокументРезультат = новый ТаблицаЗначений;

	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

	//ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.УстановитьОбъект(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
	
	ОткрытьЗначение(ДокументРезультат)"}
},
{0,
{"Входящие данные, как таблица значений",0,0,"","	СтандартнаяОбработка 		= Ложь;	
	
	мПериод = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""ПараметрПериод"")).Значение;
	
	РезультатЗапроса			= ПолучитьТаблицуДанных_ОРА(мПериод);	
	ДобавитьАналитикуВТаблицу(РезультатЗапроса);
	
	ВнешниеНаборыДанных 		= Новый Структура;
	ВнешниеНаборыДанных.Вставить(""ТаблицаДанных"",РезультатЗапроса);
	
	ДанныеРасшифровки 			= Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 			= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,КомпоновщикНастроек.ПолучитьНастройки(),ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	//Результат.Очистить();	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;	 
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
"}
},
{0,
{"Работа с Расшифровкой",0,0,"","Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	МассивРасшифровываемых = Новый Массив();    
    МассивРасшифровываемых.Добавить(""Статус"");   
	
	ЭтоГруппа 						= 	Ложь;
	РасшифровываемоеЗначение 		= 	ПолучитьРасшифровкуНаСервере(Расшифровка, МассивРасшифровываемых, ЭтоГруппа);
	Если РасшифровываемоеЗначение 	= 	Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
		
	СтандартнаяОбработка 			= Ложь;	
	
    ОбработкаРасшифровки 			= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));	
	
    ВыполненноеДействие 			= ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет;
    ПараметрВыполненногоДействия 	= Неопределено;
    ДоступныеДействия 				= Новый Массив;
    ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);	
	
    ДополнительныеПунктыМеню 		= Новый СписокЗначений;
	
	
	ОбщаяСтрока 					= ""Изменить статус "" + """""""" + Строка(СтруктураДанных.ДокументРезерва) + ?(ЗначениеЗаполнено(СтруктураДанных.Номенклатура),"" для ""+Строка(СтруктураДанных.Номенклатура),"""") +"" на: ""+строка(СтруктураДанных.СледующийСтатус) +"""""""";    
    ДополнительныеПунктыМеню.Добавить( 99, ОбщаяСтрока);
	
	
	//Выдаем меню расшифровки, считываем реакцию пользователя 
    ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыполненноеДействие, ПараметрВыполненногоДействия, ДоступныеДействия, ДополнительныеПунктыМеню);	
	
	
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		
	ИначеЕсли ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		//Имитация стандартного действия
		ОткрытьЗначение(ПараметрВыполненногоДействия);
	ИначеЕсли ВыполненноеДействие = 99 Тогда // Тут требуется наша расшифровка
		
		Если СкорректироватьДокумент(СтруктураДанных) Тогда
			Сообщить(""обработка документа завершена."");	
		КонецЕсли;
		
	КонецЕсли;	
	
	
КонецПроцедуры

Функция ПолучитьРасшифровкуНаСервере(Расшифровка, МассивИменРасшифровки, ЭтоГруппа = Ложь)
    
    Поля 	= ДанныеРасшифровки.Элементы.Получить(Расшифровка).ПолучитьПоля();
    Для Каждого ИмяРасшифровки Из МассивИменРасшифровки Цикл
        НужноеПоле = Поля.Найти(ИмяРасшифровки);
        Если Не НужноеПоле = Неопределено Тогда Прервать; КонецЕсли;
    КонецЦикла;

    Если НужноеПоле = Неопределено Тогда
        Возврат Неопределено;
    Иначе        
        Возврат НужноеПоле.Значение;
	КонецЕсли;
	
КонецФункции

"}
},
{0,
{"В обработке",0,0,"","	СхемаКомпоновкиДанных	=	ПолучитьМакет(""СхемаКомпановкиДанныхИсторияНоменклатуры"");
	
	
	ТекНастройки			=	новый КомпоновщикНастроекКомпоновкиДанных;
	
	ТекНастройки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ТекНастройки.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	
	Параметр				=	ТекНастройки.Настройки.ПараметрыДанных.Элементы[0];//Номенклатура
	Параметр.Значение		=	Номенклатура;
	Параметр.Использование	=	Истина;
	
	//СхемаКомпоновкиДанных.Параметры.Номенклатура.Значение	=	Номенклатура;
	
	//-------------------------------------------------------------------

	КомпановщикМакета		=	Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки		=	Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	МакетКомпановки			=	КомпановщикМакета.Выполнить(СхемаКомпоновкиДанных,ТекНастройки.Настройки,ДанныеРасшифровки);
	
	ПроцессорКомпановкиДанных	=	Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпановкиДанных.Инициализировать(МакетКомпановки,,ДанныеРасшифровки);
	
	ЭлементыФормы.Результат.Очистить();
	
	ДокументРезультат		=	ЭлементыФормы.Результат;
	
	ПроцессорВывода			=	Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпановкиДанных); "}
},
{0,
{"Сформировать отчет",0,0,""," &НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    АвтоОтображениеСостояния = РежимАвтоОтображенияСостояния.НеОтображать;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    СформироватьОтчетНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере()
    ЭтотОтчет = РеквизитФормыВЗначение(""Отчет"");
    ЭтотОтчет.СкомпоноватьРезультат(Результат);
КонецПроцедуры   "}
},
{0,
{"Записать схему программно",0,0,"","	ХДТО = Новый СериализаторXDTO(ФабрикаXDTO);  
    НоваяЗапись = НОвый ЗаписьXML;    
    НоваяЗапись.ОткрытьФайл(""c:\ИмяФайлаСхемы.xml"");     
    ХДТО.ЗаписатьXML(НоваяЗапись, СКД, НазначениеТипаXML.Явное );
"}
},
{0,
{"Открыть значение расшифоровки программно",0,0,"","Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
 	СтандартнаяОбработка	=	Ложь;	
	
	ЭтоГруппа	=	Ложь;	
	Попытка
		ОткрытьЗначение(ДанныеРасшифровки.Элементы.Получить(Расшифровка).ПолучитьПоля()[0].значение);
	Исключение
	КонецПопытки;

КонецПроцедуры
"}
},
{0,
{"Координаты Строки",0,0,"","КоординатыСтроки				=	ПолучитьКоординатыСтроки(Элемент,Элемент.ТекущаяОбласть);


Функция ПолучитьКоординатыСтроки(Элемент,Область) Экспорт
	
	Если Область.Расшифровка	=	Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	  	
	Текст				=	Область.Текст;
	СписокПолей			=	Новый СписокЗначений;
	КоординатыСтроки	=	Новый Структура;
	СписокПолей.Добавить(Область.Расшифровка);
	
	ПолучитьРодителей(Элемент,Область.Расшифровка,СписокПолей);
	
	Для каждого ТекЗначения из СписокПолей Цикл 
		
		Если ТипЗнч(ДанныеРасшифровки.Элементы.Получить(ТекЗначения.Значение))	=	тип(""ЭлементРасшифровкиКомпоновкиДанныхГруппировка"") Тогда
			Продолжить;
		КонецЕсли;
		
		
		Поля 			= 	ДанныеРасшифровки.Элементы.Получить(ТекЗначения.Значение).ПолучитьПоля();				

		Если ТипЗнч(Поля)	=	тип(""ЗначенияПолейРасшифровкиКомпоновкиДанных"") Тогда
			Для каждого ТекПоля из Поля Цикл						
				КоординатыСтроки.Вставить(ТекПоля.Поле,ТекПоля.Значение);		
			КонецЦикла; 			
		КонецЕсли; 		
	КонецЦикла;
	
	Возврат КоординатыСтроки;
	
КонецФункции


Процедура  ПолучитьРодителей(Элемент,ИндексРасшифровки,СписокРодителей)
	
	Если ИндексРасшифровки = Неопределено Тогда
		возврат;
	КонецЕсли;
	
	МассивРодителей			=	ДанныеРасшифровки.Элементы.Получить(ИндексРасшифровки).ПолучитьРодителей();
	
	Для каждого ТекЭлемента из МассивРодителей Цикл  
		
		СписокРодителей.Добавить(ТекЭлемента.Идентификатор);  		
		
		Поля 				= 	ДанныеРасшифровки.Элементы.Получить(ТекЭлемента.Идентификатор).ПолучитьРодителей();			
		
		Для каждого ТекЗначения из Поля Цикл
			ПолучитьРодителей(Элемент,ТекЗначения.Идентификатор,СписокРодителей);			
		КонецЦикла;				
	КонецЦикла;
	
КонецПроцедуры

"}
},
{0,
{"Отчет из Двоичного макета",0,0,"","	  ДвоичныйМакет	=	ПолучитьМакет(""ОтчетРеестр"");
	  ИмяФайла		=	ПолучитьИмяВременногоФайла(""tmp"");
	  ДвоичныйМакет.Записать(ИмяФайла);
	  
	  ВО	=	ВнешниеОтчеты.Создать(ИмяФайла);
	  ВО.получитьформу().открыть();
"}
},
{0,
{"Панель ПАРАМЕТРЫ УСТАНОВКА ДАТ ОТ  СТАНДАРТНОГО ПЕРИОДА",0,0,"","
//Параметр
СтандартныйПериод //тип СтандартныйПериод

//Выражение
&СтандартныйПериод.ДатаНачала
&СтандартныйПериод.ДатаОкончания"}
},
{0,
{"ПриКомпоновкеРезультата (Обработка запроса и вывод в тз во внешний источник)",0,0,"","
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	
	////////////////
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслугТовары.Ссылка.Дата, ДЕНЬ) КАК ПериодДень,
		|	НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслугТовары.Ссылка.Дата, МЕСЯЦ) КАК ПериодМесяц,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.Наименование КАК Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Количество,
		|	ПоступлениеТоваровУслугТовары.Сумма
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка.Проведен
		|	И ПоступлениеТоваровУслугТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2"";
	
	Запрос.УстановитьПараметр(""Дата1"", НачалоДня(ПериодОтчета.ДатаНачала));
	Запрос.УстановитьПараметр(""Дата2"", КонецДня(ПериодОтчета.ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Текстрока из ТаблицаИсключений Цикл
		Для каждого ТекСтрРез из РезультатЗапроса ЦИкл		
			ТекСтрРез.Номенклатура	=	СтрЗаменить(ТекСтрРез.Номенклатура,Текстрока.Исключение,"""");
		КонецЦикла;  		
	КонецЦикла;
	
	
	////////////////////////
	
	СхемаКомпоновкиДанных = ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	
	 
	Настройки 			= КомпоновщикНастроек.ПолучитьНастройки();
	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	
	ВнешнийНаборДанных = Новый Структура(""ТаблицаДанных"", РезультатЗапроса);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки);
	
	
	ДокументРезультат.Очистить();
	
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
КонецПроцедуры
"}
},
{0,
{"НайтиПараметр и установить значение",0,0,"","Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""КолМес"", 		ВернутьТекстКолМесяцев(ДатаНачала,ДатаКон));
"}
},
{0,
{"Отправить по почте",0,0,"","

Процедура ПослатьОтчет()
	
	Результат					=	новый ТабличныйДокумент;
	Отчет.СкомпоноватьРезультат(Результат); 
	
	имяВременногФайла			=	ПолучитьИмяВременногоФайла(""html"");
	Результат.Записать(имяВременногФайла,ТипФайлаТабличногоДокумента.HTML4);	
	ЗаписьЖурналаРегистрации(""ОтчетПросроченных.""+ВыборкаТекущийИсполнитель.ТекущийИсполнитель, , , , имяВременногФайла, ); 
	текст						=	новый ТекстовыйДокумент;
	текст.Прочитать(имяВременногФайла);	  			
	
	ОтправитьПоПочте(текст.ПолучитьТекст(),Отчет.ТекущийИсполнитель.ОсновнойEmail);  
	
	
Конецпроцедуры




Процедура ОтправитьПоПочте(ТекстСообщения,Получатель="""") 
	
	
	Профиль	=	ИнициализацияПочтовыхНастроек();
	//************************
	Сообщение 			= Новый ИнтернетПочтовоеСообщение;
	Сообщение.Кодировка	=	""windows-1251"";
	Сообщение.Тема 		= 	""(""+Формат(ТекущаяДата(),""ДЛФ=DD"")+"") НЕ ВЫПОЛНЕННЫЕ В СРОК ЗАДАНИЯ"";
	СообщениеДляПочты	=	ТекстСообщения;
	
	Сообщение.Тексты.Добавить(СообщениеДляПочты,ТипТекстаПочтовогоСообщения.HTML);
	
	//Для работников ИТ
	Если	ПустаяСтрока(Получатель) Тогда
		Сообщение.Получатели.Добавить(""danilin@rdstroy.ru"");					
		Сообщение.Получатели.Добавить(""alexey@rdstroy.ru"");					
	Иначе
		Сообщение.Получатели.Добавить(Получатель);					
	КонецЕсли;
	
	
	Сообщение.Отправитель.Адрес				=	СокрЛП(""help1c@rdstroy.ru"");		     	
	Сообщение.Отправитель.ОтображаемоеИмя	=	""Служба доставки отчетов."";
	
	Сообщение.Отправитель.Кодировка			=	""windows-1251"";
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
		ИнтернетПочта.Послать(Сообщение);
		ИнтернетПочта.Отключиться();
	Исключение 		
		#Если Клиент Тогда
			ОбщегоНазначения.СообщитьИнформациюПользователю(ОписаниеОшибки());			
		#Иначе
			ЗаписьЖурналаРегистрации(ОписаниеОшибки(), УровеньЖурналаРегистрации.Предупреждение, , , ""Почтовый модуль"");	 
		#КонецЕсли	
	КонецПопытки;
	
КонецПроцедуры

Функция ИнициализацияПочтовыхНастроек() Экспорт
	
	
	УчетнаяЗапись		=	Константы.УчетнаяЗаписьДляРассылки.Получить();
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Профиль 	= СформироватьИнтернетПрофильДляЭлектроннойПочты(УчетнаяЗапись);	
	Иначе 		
		//настройки по умолчанию
		Профиль = Новый ИнтернетПочтовыйПрофиль;		
		Профиль.АдресСервераSMTP	= 	СокрЛП(""192.168.0.7"");
		Профиль.ВремяОжидания		= 	СокрЛП(60);
		Профиль.Пароль 				= 	СокрЛП(""Gaz!1234!"");
		Профиль.Пользователь 		= 	СокрЛП(""st\1c_mail"");
		Профиль.ПортSMTP			= 	СокрЛП(25);		
		
		Профиль.АутентификацияSMTP	=	СпособSMTPАутентификации.Login;		
		Профиль.ПарольSMTP		 	= Профиль.Пароль;
		Профиль.ПользовательSMTP 	= Профиль.Пользователь;	
		
	КонецЕсли;
	
	Возврат Профиль;
	
КонецФункции
"}
},
{0,
{"СоздатьСхемуКомпоновкиДанных",0,0,"","Функция СоздатьСхемуКомпоновкиДанных(НаборДанных, СтруктураРесурсов = Неопределено, АвтоЗаполнениеДоступныхПолей = Истина, ИмяСтандартногоМакетаОформления = """") Экспорт
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	// Заполнение основных данных схемы
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = ""ИсточникДанных"";
	ИсточникДанных.ТипИсточникаДанных = ""Local"";
	
	Если ТипЗнч(НаборДанных) = Тип(""Строка"") или ТипЗнч(НаборДанных) = Тип(""Запрос"") Тогда
		ТекущийНаборДанных = СКД.НаборыДанных.Добавить(Тип(""НаборДанныхЗапросСхемыКомпоновкиДанных""));
		ТекущийНаборДанных.Имя = ""ОсновнойНабор"";
		ТекущийНаборДанных.Запрос = ?(ТипЗнч(НаборДанных) = Тип(""Строка""),НаборДанных,НаборДанных.Текст);
		ТекущийНаборДанных.ИсточникДанных = ""ИсточникДанных"";			
		ТипНабора = ""Запрос"";
		ТекущийНаборДанных.АвтоЗаполнениеДоступныхПолей = АвтоЗаполнениеДоступныхПолей;
	ИначеЕсли ТипЗнч(НаборДанных) = Тип(""ТаблицаЗначений"") или ТипЗнч(НаборДанных) = Тип(""ДеревоЗначений"") Тогда
		ТекущийНаборДанных = СКД.НаборыДанных.Добавить(Тип(""НаборДанныхОбъектСхемыКомпоновкиДанных""));
		ТекущийНаборДанных.Имя = ""ОсновнойНабор"";
		ТекущийНаборДанных.ИмяОбъекта = ""ТаблицаИсточник"";	
		ТекущийНаборДанных.ИсточникДанных = ""ИсточникДанных"";			
		ТипНабора = ""Объект"";
	Иначе			
		Возврат Неопределено;
	КонецЕсли;	
			
	НастройкиПоУмолчанию = СКД.НастройкиПоУмолчанию;
	
	// Создание структуры.
	// Группировка, детальные записи и автовыбранное поле
	Группировка = НастройкиПоУмолчанию.Структура.Добавить(Тип(""ГруппировкаКомпоновкиДанных""));
	Группировка.Использование = Истина;			
	АвтоПоле = Группировка.Выбор.Элементы.Добавить(Тип(""АвтоВыбранноеПолеКомпоновкиДанных""));
	АвтоПоле.Использование = Истина;
	
	КоллекцияКолонок = Новый ТаблицаЗначений;
	КоллекцияКолонок.Колонки.Добавить(""Имя"");
	КоллекцияКолонок.Колонки.Добавить(""ТипЗначения"");
	КоллекцияКолонок.Колонки.Добавить(""Заголовок"");
	
	Если ТипНабора = ""Запрос"" Тогда
		ПостроительЗапроса = Новый ПостроительЗапроса;
		Если ТипЗнч(НаборДанных) = Тип(""Строка"") Тогда
			ПостроительЗапроса.Текст = СокрЛП(НаборДанных);
		Иначе 
			ПостроительЗапроса.Текст = СокрЛП(НаборДанных.Текст);
		КонецЕсли;
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		Для каждого ВыбранноеПоле Из ПостроительЗапроса.ВыбранныеПоля Цикл	
			НоваяКолонка = КоллекцияКолонок.Добавить();
			НоваяКолонка.Имя = ВыбранноеПоле.Имя;			
			НоваяКолонка.ТипЗначения = ПостроительЗапроса.ДоступныеПоля[ВыбранноеПоле.ПутьКДанным].ТипЗначения;
			НоваяКолонка.Заголовок = ВыбранноеПоле.Представление
		КонецЦикла;
		
	ИначеЕсли ТипНабора = ""Объект"" Тогда
		
		Для каждого Колонка Из НаборДанных.Колонки Цикл			
			НоваяКолонка = КоллекцияКолонок.Добавить();
			НоваяКолонка.Имя = Колонка.Имя;
			НоваяКолонка.ТипЗначения = Колонка.ТипЗначения;
			НоваяКолонка.Заголовок = Колонка.Имя;									
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавление ресурсов
	Если ТипЗнч(СтруктураРесурсов) = Тип(""Структура"") Тогда			
		Для Каждого ЭлСтруктуры Из СтруктураРесурсов Цикл
			// Проверка, а существует ли поле ресурса среди полей набора
			Если КоллекцияКолонок.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
				// Проверка на правильность указания агрегатной функции
				Если    ЭлСтруктуры.Значение = ""Сумма"" 
					ИЛИ ЭлСтруктуры.Значение = ""Среднее""
					ИЛИ ЭлСтруктуры.Значение = ""Максимум""
					ИЛИ ЭлСтруктуры.Значение = ""Минимум""
					ИЛИ ЭлСтруктуры.Значение = ""Количество"" Тогда
					
					ПолеРесурса             = СКД.ПоляИтога.Добавить();
					ПолеРесурса.ПутьКДанным = ЭлСтруктуры.Ключ;
					ПолеРесурса.Выражение   = ЭлСтруктуры.Значение + ""("" + ЭлСтруктуры.Ключ + "")"";					
					
				ИначеЕсли ЭлСтруктуры.Значение = ""КоличествоРазличные"" Тогда                      
					
					ПолеРесурса             = СКД.ПоляИтога.Добавить();
					ПолеРесурса.ПутьКДанным = ЭлСтруктуры.Ключ;
					ПолеРесурса.Выражение   = ""Количество(Различные "" + ЭлСтруктуры.Ключ + "")"";
					
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;                             			
	КонецЕсли;
		
	// Добавление полей в набор		
	Для каждого НоваяКолонка Из КоллекцияКолонок Цикл			
		ПолеНабора = ТекущийНаборДанных.Поля.Добавить(Тип(""ПолеНабораДанныхСхемыКомпоновкиДанных""));
		ПолеНабора.Заголовок = СокрЛП(НоваяКолонка.Заголовок);
		ПолеНабора.Поле = СокрЛП(НоваяКолонка.Имя);
		ПолеНабора.ПутьКДанным = СокрЛП(НоваяКолонка.Имя);
		
		// Удалим неопределено и NULL
		Массив = Новый Массив;
		Для каждого ТекущийТип Из НоваяКолонка.ТипЗначения.Типы() Цикл
			Если ТекущийТип = Тип(""Неопределено"") или ТекущийТип = Тип(""NULL"") или ТекущийТип = Неопределено или ТекущийТип = Null Тогда 
				Продолжить; 
			КонецЕсли;
			Массив.Добавить(ТекущийТип);
		КонецЦикла;
		ПолеНабора.ТипЗначения = Новый ОписаниеТипов(Массив,НоваяКолонка.ТипЗначения.КвалификаторыЧисла,НоваяКолонка.ТипЗначения.КвалификаторыСтроки,НоваяКолонка.ТипЗначения.КвалификаторыДаты);
						
		ВыбранноеПолеКомпоновкиДанных = НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип(""ВыбранноеПолеКомпоновкиДанных""));			
		ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных(ПолеНабора.ПутьКДанным);
		ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
	КонецЦикла;
		
	// Оформление
	Если не ПустаяСтрока(ИмяСтандартногоМакетаОформления) Тогда
		ЗначениеПараметраВывода = НастройкиПоУмолчанию.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""МакетОформления""));
		ЗначениеПараметраВывода.Значение = ИмяСтандартногоМакетаОформления;
		ЗначениеПараметраВывода.Использование = Истина;
	КонецЕсли;
		
	Возврат СКД;
	
КонецФункции
"}
},
{0,
{"ПолучитьПараметрыПрограммно",0,0,"","мПериод = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""ПараметрПериод"")).Значение;"}
},
{0,
{"HTTP сервис на формирование отчета",0,0,"","Функция divisionGetOverlap(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Запрос.ПараметрыURL[""uid""]);
	Список = Новый СписокЗначений;
	Для Каждого Элемент Из Массив Цикл 
		Попытка
			УникальныйИдентификатор = Новый УникальныйИдентификатор(Элемент)	
		Исключение
			Продолжить;
		КонецПопытки;
		Список.Добавить(Справочники.ПодразделенияОрганизаций.ПолучитьСсылку(УникальныйИдентификатор));
	КонецЦикла;
	
	//////////////////////////////////////////////////
	// Вывод отчета
	
	ТабличныйДокумент 	= Новый ТабличныйДокумент;
	
	ОтчетУчетПерекрытий = Отчеты.УчетПерекрытий.Создать();
	
	Отчет 				= 	Отчеты.УчетПерекрытий.Создать();
	
	
	//Корректировка настроек((
	НастройкиОтчета				=	Отчет.СхемаКомпоновкиДанных.ВариантыНастроек[0].Настройки;	
	НастройкиОтчета.Отбор.Элементы.Очистить();	
	ЭлементОтбора 				= НастройкиОтчета.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""Подразделение"");
	ЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ЭлементОтбора.ПравоеЗначение= Список;
	ЭлементОтбора.Использование = Истина;
	//Корректировка настроек))
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);

    Отчет.СкомпоноватьРезультат(ТабличныйДокумент);
	
	
	
	//////////////////////////////////////////////////
	// Преобразование отчета
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ИмяФайла =  ""C:\Temp\1c.html""; 
	ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	Тело = ТекстовыйДокумент.ПолучитьТекст();
	//Тело = СтрЗаменить(Тело, ""&lt;"", ""<"");
	//Тело = СтрЗаменить(Тело, ""&gt;"", "">"");
	//Тело = СтрЗаменить(Тело, ""&nbsp;"", "" "");
	
	УдалитьФайлы(ИмяФайла);
	
	//////////////////////////////////////////////////
	// Вывод ответа
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Ответ.Заголовки.Вставить(""Content-type"", ""text/html; charset=utf-8"");
	Ответ.УстановитьТелоИзСтроки(Тело, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции
"}
},
{0,
{"Запрос из СКД",0,0,"","
&НаСервере
Функция AQ_aq_ПеренестиВЗапросыПослеНаСервере()
	
	//из универсального отчета
	СКД	=	ПолучитьИзВременногоХранилища(ЭтотОбъект.НастройкиОтчета.АдресСхемы);
	Результат = Неопределено;
	
	Если СКД.НаборыДанных.количество()=1 Тогда
		СтруктураЗапроса	=	новый Структура(""Запрос_Текст,Запрос_Параметры,Запрос_Наименование"");		
		Для каждого ТекНабора из СКД.НаборыДанных Цикл 
			СтруктураЗапроса.Запрос_Текст = ТекНабора.Запрос;				
		КонецЦикла;		
		
		СтруктураЗапроса.Запрос_Параметры	=	Новый Массив;			
		Для каждого ТекПараметра из СКД.Параметры Цикл 
			СтруктураПараметров = Новый Структура (""Имя,Значение"");			
			ЗаполнитьЗначенияСвойств(СтруктураПараметров,ТекПараметра);			
			СтруктураЗапроса.Запрос_Параметры.добавить(СтруктураПараметров);
		КонецЦикла;		
		
		СтруктураЗапроса.Запрос_Наименование	=	ЭтотОбъект.ВариантНаименование;	
		
		НайденныйЗапрос = Справочники.pbi_запросы.Вернуть_Запрос_поИдентификатору(Справочники.pbi_запросы.Транслит(СтруктураЗапроса.Запрос_Наименование));
		
		Если ЗначениеЗаполнено(НайденныйЗапрос) Тогда
			СтруктураЗапроса.Вставить(""Ключ"",НайденныйЗапрос);
		КонецЕсли;			
		
		Результат = СтруктураЗапроса;  
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
"}
}
},
{1,
{"ORA",1,0,"",""},
{0,
{"Запрос к оракл через драйвер ADODB",0,0,"","	ТЗ	=	новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить(""type"");
	ТЗ.Колонки.Добавить(""sup"");
	ТЗ.Колонки.Добавить(""customer"");
	ТЗ.Колонки.Добавить(""name"");
	ТЗ.Колонки.Добавить(""name_tmz"");
	ТЗ.Колонки.Добавить(""nomer_doc"");
	ТЗ.Колонки.Добавить(""data_doc"");
	ТЗ.Колонки.Добавить(""data_oper"");
	ТЗ.Колонки.Добавить(""qnt"");
	ТЗ.Колонки.Добавить(""summ"");
	ТЗ.Колонки.Добавить(""inn"");
	ТЗ.Колонки.Добавить(""KOD1C"");
	
	Connection = new COMObject(""ADODB.Connection"");
	
	//Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_ERP;PWD=ub3BGGmY;DBQ=PROD_DG"";
	//Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_RELOAD;PWD=ZTvFJ07w;DBQ=TEST_EE_MAIN"";
	//Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_ERP;PWD=ub3BGGmY;DBQ=TEST_EE_MAIN"";
	
	Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_ERP;PWD=ub3BGGmY;DBQ=PROD_DG"";    //рабочая база
	Connection.Mode = 1;
	
	try 
		Connection.Open();
	except		
		
		Connection = undefined; return ТЗ;		
	endtry;
	
	Command 				= new COMObject(""ADODB.Command"");
	Command.ActiveConnection= Connection;	
	Command.CommandType 	= 1;
	Command.Prepared 		= true;	
	
	
	Command.CommandText = ""
	|	SELECT
	|    DECODE(pd.source,
	|    1, 'Поставка',
	|    2, 'Изготовление',
	|    3, 'Возврат',
	|    4, 'C ГА',
	|    5, 'Корректировка',
	|    6, 'Давальческие') as type
	|  , post.name sup
	|  , post.INN inn
	|  , post.KOD1C KOD1C
	|  , pk.name customer
	|  , p.name name
	|  , init.name name_tmz
	|  , pd.num nomer_doc
	|  , pd.num_dt data_doc
	|  , pd.dttm data_oper
	|  , pd.qty qnt
	|  , pd.qty * p.price summ
	|FROM
	|    pallet_debit pd
	|    INNER JOIN pallet p
	|        ON p.id_pal = pd.id_pal
	|    LEFT JOIN invn_item init
	|        ON init.init_id = p.init_id
	|    LEFT JOIN postavshic post
	|        ON post.id_post = pd.id_post
	|    LEFT JOIN pokupatel pk
	|        ON pk.id_pok = pd.id_pok
	|WHERE
	|    TRUNC(pd.dttm) >= :data1
	|    AND TRUNC(pd.dttm) <= :data2
	|    AND pd.accepted_status = 1
	|    AND pd.virtual_flag = 0
	|ORDER BY
	|    pd.dttm DESC;"";    	
	
	
	param = Command.CreateParameter(""data1"", 133, 1, , Период.ДатаНачала); 
	Command.Parameters.Append(param);
	
	param = Command.CreateParameter(""data1"", 133, 1, , Период.ДатаОкончания); 
	Command.Parameters.Append(param);	
	
	Recordset = Command.Execute();
	
	while not Recordset.EOF do
		
		НоваяСтрока					=	ТЗ.Добавить();
		
		Для каждого ТекКолонка из ТЗ.Колонки Цикл
			НоваяСтрока[ТекКолонка.Имя]			=	Recordset.Fields(ТекКолонка.Имя).Value;								
		КонецЦикла;		
		
		Recordset.MoveNext();
		
	enddo;
	
	Connection.Close(); Connection = undefined; Command = undefined; Recordset = undefined;
	
	Возврат ТЗ;"}
}
},
{2,
{"Запросы чтобы не забыть",1,0,"",""},
{0,
{"Последнее число стоимости",0,0,"","	ВЫБОР
		КОГДА ВложенныйЗапрос.ЦенаПродажи - (ВЫРАЗИТЬ(ВложенныйЗапрос.ЦенаПродажи / 10 КАК ЧИСЛО(15, 0))) * 10 < 0
			ТОГДА 10 + ВложенныйЗапрос.ЦенаПродажи - (ВЫРАЗИТЬ(ВложенныйЗапрос.ЦенаПродажи / 10 КАК ЧИСЛО(15, 0))) * 10
		ИНАЧЕ ВложенныйЗапрос.ЦенаПродажи - (ВЫРАЗИТЬ(ВложенныйЗапрос.ЦенаПродажи / 10 КАК ЧИСЛО(15, 0))) * 10
	КОНЕЦ КАК Остаток,"}
},
{0,
{"Остатки по дням",0,0,"","ВЫБРАТЬ
	ВложенныйЗапрос.ДатаКалендаря,
	ПросроченнаяЗадолженностьОстаткиИОбороты.Контрагент,
	СУММА(ВЫБОР
			КОГДА ПросроченнаяЗадолженностьОстаткиИОбороты.Период = &ДатаНачала
				ТОГДА ПросроченнаяЗадолженностьОстаткиИОбороты.СуммаКонечныйОстаток
			ИНАЧЕ ВЫБОР
					КОГДА ПросроченнаяЗадолженностьОстаткиИОбороты.Период < ВложенныйЗапрос.ДатаКалендаря
						ТОГДА ПросроченнаяЗадолженностьОстаткиИОбороты.СуммаОборот
					ИНАЧЕ 0
				КОНЕЦ
		КОНЕЦ) КАК ОстаткиНаДень
ИЗ
	(ВЫБРАТЬ
		РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
	ИЗ
		РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	ГДЕ
		РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания) КАК ВложенныйЗапрос,
	РегистрНакопления.ПросроченнаяЗадолженность.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, День, , ) КАК ПросроченнаяЗадолженностьОстаткиИОбороты
ГДЕ
	ПросроченнаяЗадолженностьОстаткиИОбороты.Контрагент = &Контрагент

СГРУППИРОВАТЬ ПО
	ВложенныйЗапрос.ДатаКалендаря,
	ПросроченнаяЗадолженностьОстаткиИОбороты.Контрагент"}
}
},
{3,
{"Вернуть Неделю, месяц - словом",1,0,"",""},
{0,
{"неделя",0,0,"","Функция вернутьденьНедели(НомерДняНедели)
	
	
	Если НомерДняНедели=1 Тогда
		Возврат ""Понедельник"";
	ИначеЕсли НомерДняНедели=2 Тогда
		Возврат ""Вторник"";
	ИначеЕсли НомерДняНедели=3 Тогда
		Возврат ""Среда"";
		
	ИначеЕсли НомерДняНедели=4 Тогда
		Возврат ""Четверг"";
		
	ИначеЕсли НомерДняНедели=5 Тогда
		Возврат ""Пятница"";
	ИначеЕсли НомерДняНедели=6 Тогда
		Возврат ""Субота"";
		
	ИначеЕсли НомерДняНедели=7 Тогда
		Возврат ""Воскресенье"";
	КонецЕсли;
		
КонецФункции
"}
},
{0,
{"месяц",0,0,"","Функция вернутьМесяц(Номер)
	
	
	Если Номер=1 Тогда
		Возврат ""Январь"";
	ИначеЕсли Номер=2 Тогда
		Возврат ""Февраль"";
	ИначеЕсли Номер=3 Тогда
		Возврат ""Март"";
		
	ИначеЕсли Номер=4 Тогда
		Возврат ""Апрель"";
		
	ИначеЕсли Номер=5 Тогда
		Возврат ""Май"";
	ИначеЕсли Номер=6 Тогда
		Возврат ""Июнь"";
		
	ИначеЕсли Номер=7 Тогда
		Возврат ""Июль"";
		
	ИначеЕсли Номер=8 Тогда
		Возврат ""Август"";
	ИначеЕсли Номер=9 Тогда
		Возврат ""Сентябрь"";
		
	ИначеЕсли Номер=10 Тогда
		Возврат ""Октябрь"";
		
	ИначеЕсли Номер=11 Тогда
		Возврат ""Ноябрь"";
		
	ИначеЕсли Номер=12 Тогда
		Возврат ""Декабрь"";
		
		
		
		
		
	КонецЕсли;
	
КонецФункции
"}
},
{0,
{"День",0,0,"","формат(датаОплаты,""ДФ=dd.MM.yy"") +"" ""+

ВЫБОР 
    КОГДА ДЕНЬНЕДЕЛИ(ДатаОплаты)=1 ТОГДА ""Понедельник""
    КОГДА ДЕНЬНЕДЕЛИ(ДатаОплаты)=2 ТОГДА ""Вторник""
    КОГДА ДЕНЬНЕДЕЛИ(ДатаОплаты)=3 ТОГДА ""Среда""
    КОГДА ДЕНЬНЕДЕЛИ(ДатаОплаты)=4 ТОГДА ""Четверг""
    КОГДА ДЕНЬНЕДЕЛИ(ДатаОплаты)=5 ТОГДА ""Пятница""
    КОГДА ДЕНЬНЕДЕЛИ(ДатаОплаты)=6 ТОГДА ""Суббота""
    КОГДА ДЕНЬНЕДЕЛИ(ДатаОплаты)=7 ТОГДА ""Воскресенье""
    ИНАЧЕ ""день не узнан""
КОНЕЦ"}
}
},
{1,
{"Работа с буфером обмена",1,0,"",""},
{0,
{"текст в буфер",0,0,"","	HTML=Новый COMОбъект(""htmlfile"");
	HTML.parentWindow.clipboardData.setData(""Text"",ТекстБуфера,""mytext"");
"}
}
},
{2,
{"Внешние отчеты и обработки",1,0,"",""},
{0,
{"Запуск отчета из макета",0,0,"","	ДвоичныеДанные	=	ПолучитьМакет(""ОтчетПоРеестру"");
	ИмяФайла		=	ПолучитьИмяВременногоФайла(""erf"");
	ДвоичныеДанные.Записать(ИмяФайла);
	Отчет			=	ВнешниеОтчеты.Создать(ИмяФайла);
	Отчет.ПолучитьФорму().Открыть();
"}
},
{0,
{"Поиск и запуск ВО",0,0,"","	НС	=	Справочники.ВнешниеОбработки.НайтиПоНаименованию(""*АРМ/Обмен АСТОР*"");
	Если не НС.Пустая() Тогда
		
		ИмяФайла 		= ПолучитьИмяВременногоФайла();
		ДвоичныеДанные 	= НС.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);  				
		АсторОбмен		=	ВнешниеОбработки.Создать(ИмяФайла,Ложь);			
		АсторОбмен.РегламентныйОбмен();
	КонецЕсли;"}
}
},
{26,
{"УПРАВЛЯЕМЫЕ ФОРМЫ",1,0,"",""},
{2,
{"ПЕЧ ФОРМЫ",1,0,"",""},
{0,
{"Тестирование печ.форм",0,0,"","//На форму добавить реквизит ТАБДОК- тип табличный документ
&НаСервере
Процедура ПечатьНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");
	Массив	=	Новый Массив;
	Массив.Добавить(Ссылка);		
	//МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) 
	
	КПФ	=	Новый ТаблицаЗначений;								
	КПФ.Колонки.Добавить(""ИмяВРЕГ"");
	КПФ.Колонки.Добавить(""ТабличныйДокумент"");
	КПФ.Колонки.Добавить(""СинонимМакета"");
	КПФ.Колонки.Добавить(""Картинка"");
	КПФ.Колонки.Добавить(""ПолныйПутьКМакету"");
	КПФ.Колонки.Добавить(""ИмяФайлаПечатнойФормы"");
	
	кпф.Добавить().ИмяВРЕГ	=	ВРег(""ПФ_MXL_Акт"");
	
	ОбработкаОбъект.Печать(Массив,КПФ,Новый СписокЗначений,неопределено);
	
	Для каждого ТекСтрока из КПФ ЦИкл
		ТабДок.Вывести(ТекСтрока.ТабличныйДокумент);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	ПечатьНаСервере();
КонецПроцедуры
"}
},
{0,
{"Вывести сформированные печ. формы на печать",0,0,"","&НаКлиенте
Процедура ВывестиНаПечать(Команда)
	
	Документ = ПодготовленныйДокумент();  //таб док
	
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПечатнойФормы = ""ПакетнаяПечать"";
	НазваниеПечатнойФормы = НСтр(""ru = 'Документы'"");
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует(""СтандартныеПодсистемы.Печать"") Тогда
		Документ.Показать(НазваниеПечатнойФормы);
		ДокументыПечатались = Истина;
		Возврат;
	КонецЕсли;
	
	МодульУправлениеПечатьюКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(""УправлениеПечатьюКлиент"");
	
	КоллекцияПечатныхФорм = МодульУправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = МодульУправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НазваниеПечатнойФормы;
	ПечатнаяФорма.ТабличныйДокумент = Документ;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НазваниеПечатнойФормы;
	
	ОбластиОбъектов = Новый СписокЗначений;
	МодульУправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);	
	
КонецПроцедуры"}
}
},
{1,
{"Бухгалтерия",1,0,"",""},
{0,
{"ПолучитьМассивСчетовИзСписка",0,0,"","ЗаполнениеБухгалтерскойОтчетностиВызовСервера.ПолучитьМассивСчетовИзСписка(""90.01.1, 90.01.2"")"}
}
},
{2,
{"СохранитьВосстановить значения",1,0,"",""},
{0,
{"СохранитьЗначение",0,0,"","
&НаСервере
Процедура СохранитьНаСервере()
	
	Настройки = Новый Соответствие;
    ТЗ = Отчет.ТаблицаИсключений.Выгрузить();	
	Настройки.Вставить(""ведомостьпоставкитовара"", ЗначениеВСтрокуВнутр(ТЗ));
    ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(""Объект.Товары"", ""ЗагрузкаПрайсаТабличнаяЧасть"", Настройки);
	
КонецПроцедуры
"}
},
{0,
{"ВосстановитьЗначение",0,0,"","
&НаСервере
Процедура ВосстановитьНаСервере()
	
	ДопНастройки = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(""Объект.Товары"", ""ЗагрузкаПрайсаТабличнаяЧасть"");
	Попытка
		ТЗ = ЗначениеИзСтрокиВнутр(ДопНастройки[""ведомостьпоставкитовара""]);
		Отчет.ТаблицаИсключений.Загрузить(ТЗ);		
	Исключение
	КонецПопытки;
	
КонецПроцедуры
"}
}
},
{3,
{"Значения и ФАЙЛЫ",1,0,"",""},
{0,
{"СохранитьЗначение",0,0,"","//СОХРАНЕНИЕ/ВОССТАНОВЛЕНИЕ ЗНАЧЕНИЕ НА КЛИЕНТЕ В ФАЙЛ
&НаСервере
Процедура СохранитьФайлНаСервере(АдресФайлаВоВременномХранилище)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""znc"");
	ЗначениеВФайл(ИмяВременногоФайла,Объект.ТЧСчета.Выгрузить());
	
	Файл = Новый Файл(ИмяВременногоФайла);
	
	Если Файл.Существует() Тогда
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;	


КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	АдресФайлаВоВременномХранилище = """";
	СохранитьФайлНаСервере(АдресФайлаВоВременномХранилище);
	
	ИмяФайла = ""Расшифровка ""+ВидЗадолженности+"" ""+ФОРМАТ(ТекущаяДата(),""ДФ=dd.MM.yy"")+"".ZNC"";
	ПолучитьФайл(АдресФайлаВоВременномХранилище, ИмяФайла);
	
КонецПроцедуры
"}
},
{0,
{"ВосстановитьЗначение",0,0,"","&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ОчиститьСообщения();
	АдресФайлаВоВременномХранилище 	= """"; 	
	ОписаниеОповещения 				= Новый ОписаниеОповещения(""ЗагрузитьДанныеЗавершение"", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище,Нстр(""ru = 'Файл выгрузки'""),, УникальныйИдентификатор);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда		
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		Если Не Файл.Существует() Тогда
			
			сообщить(""Файл не существует"");
			Возврат;
			
		КонецЕсли;
		
		ЗагрузитьДанныеНаСервере(Адрес, Файл.Расширение);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, Расширение)	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	Попытка
		Объект.ТЧСчета.Загрузить(ЗначениеИзФайла(ИмяВременногоФайла));
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
КонецПроцедуры

"}
},
{0,
{"ДиалогВыбораФайла",0,0,"","

&НаКлиенте
Процедура ФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборФайлаДляВыгрузки(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляВыгрузки(Элемент) Экспорт
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр                  = НСтр(""ru = 'Текстовый файл'"") + "" (*.xlsx)|*.xlsx"";
	ДиалогВыбора.Заголовок               = НСтр(""ru = 'Выберите папку для импорта в 1C'"");
	ДиалогВыбора.ПредварительныйПросмотр = Ложь;
	ДиалогВыбора.Расширение              = ""xlsx"";
	ДиалогВыбора.ИндексФильтра           = 0;
	ДиалогВыбора.ПолноеИмяФайла          = ?(ПустаяСтрока(Элемент.ТекстРедактирования),""*.xlsx"", Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(""ВыборФайлаДляВыгрузкиЗавершение"", ЭтотОбъект);
	ДиалогВыбора.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество()>0 Тогда
		
		ФайлВыгрузки = ВыбранныеФайлы.Получить(0);
		
	КонецЕсли;
	
	
КонецПроцедуры



"}
}
},
{3,
{"МАССИВ",1,0,"",""},
{0,
{"УдалитьПовторяющиесяЭлементыМассива",0,0,"","ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивКБК);"}
},
{0,
{"ГАЛКИ",0,0,"","	Для каждого ТекСтрока из Объект.ТЧСчета Цикл
		ТекСтрока.Отметка	=	ЗначениеГалки;	
	КонецЦикла; "}
},
{0,
{"РазложитьСтрокуВМассивСлов",0,0,"","
СтрРазделить(Строка, ""."");

МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Реквизиты, "","");"}
}
},
{3,
{"____ХРАНИЛИЩЕ",1,0,"",""},
{0,
{"Поместить",0,0,"","ПоместитьВоВременноеХранилище(Данные,АдресРезультата);"}
},
{0,
{"Получить из хранилища",0,0,"","СтруктураРезультата	=	ПолучитьИзВременногоХранилища(АдресХранилища);"}
},
{0,
{"Удалить из временного хранилища",0,0,"","УдалитьИзВременногоХранилища(ТекСтрока.АдресРезультата);		"}
}
},
{1,
{"ФОНОВЫЕ ЗАДАНИЯ",1,0,"",""},
{0,
{"ЫВА",0,0,"","&НаСервере
Процедура ТестФонНаСервере(ИтераторЗадания=0,СтруктураПечати)
	
	ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить(""СтруктураПечати"", СтруктураПечати);  
	
	МодульДлительныеОперации 		= ОбщийМодуль(""ДлительныеОперации"");
	Если МодульДлительныеОперации 	= Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить(""ИмяОбработки""				, ИмяОбработки(ОбработкаОбъект));
	ПараметрыЗадания.Вставить(""ИмяМетода""					, ""СформироватьТабДок_ФЗ"");
	ПараметрыЗадания.Вставить(""ПараметрыВыполнения""			, ПараметрыПроцедуры);
	ПараметрыЗадания.Вставить(""ЭтоВнешняяОбработка""			, Истина);
	ПараметрыЗадания.Вставить(""ДополнительнаяОбработкаСсылка"", """");	
	
	ПараметрыВыполненияВФоне = МодульДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания 	= НСтр(""ru = 'тестирование'""+""_"")+ИтераторЗадания;
	ПараметрыВыполненияВФоне.ОжидатьЗавершение 				= Ложь;	
	ПараметрыВыполненияВФоне.КлючФоновогоЗадания			= ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания+""_""+ИтераторЗадания;
	
	РезультатФоновогоЗадания = МодульДлительныеОперации.ВыполнитьВФоне(
	""ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки"",
	ПараметрыЗадания,
	ПараметрыВыполненияВФоне);
	
	ЗаполнитьЗначенияСвойств(Объект.ТЧСформированныеДокументы.Добавить(),РезультатФоновогоЗадания);
	
КонецПроцедуры
"}
}
},
{2,
{"ЗАМЕТКИ СПЕЦИАЛИСТА 1С",1,0,"",""},
{0,
{"Новый граница",0,0,"","Момент = Новый Граница(КонецДня(ИмяПараметра),ВидГраницы.Включая);"}
},
{0,
{"Привязка сообщения к элементу форму",0,0,"","Сообщение. Текст = "" Не хватает"" + Выборка.Представление + "" в количестве "" + Число(Выборка.Количество - Выборка.КоличествоОстаток) ;
Сообщение. Поле = ""Товары["" + (Выборка.НомерСтроки -1) + ""].Количество"";
Сообщение.УстановитьДанные(ЭтотОбъект);"}
}
},
{2,
{"COM - конектор",1,0,"",""},
{0,
{"ком конект",0,0,"","	пут 					=	""1c-1-server,1c-2-server"";
	реф 					=	""buh-l-pack"";
	Юзер					=	""Данилин"";
	Пароль					=	""59769"";
	ПараметрыПодключения 	=	""Srvr = """""" + СокрЛП(Пут) + """""";Ref = """""" + реф + """"""; Usr = """""" + Юзер + """"""; Pwd = """""" + Пароль + """""";""; 
	
	
	//Подключение
	База 			= Новый COMОбъект(""V83.COMConnector""); 
	Попытка
		Источник 	= База.Connect(ПараметрыПодключения); 
	Исключение
		сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки; "}
},
{0,
{"КомЗагрузка",0,0,"","	ПроверитьЗаполнение();
	
	//Подключение
	База 			= Новый COMОбъект(""V83.COMConnector""); 
	Попытка
		Источник 	= База.Connect(Объект.ПараметрыПодключения); 
	Исключение
		сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 	            	
	
	Объект.ТЧДокументыОКП.Очистить();
	Объект.ТЧДененжныеСредства.Очистить();
	
	Запрос = Источник.NewObject(""Запрос"");
	Запрос.Текст = ""ВЫБРАТЬ
	               |	ИСТИНА КАК Создавать,
	               |	ОтчетКомитентуОПродажах.Номер КАК Номер,
	               |	ОтчетКомитентуОПродажах.Дата КАК Дата,
	               |	ВЫРАЗИТЬ(ОтчетКомитентуОПродажах.Комментарий КАК СТРОКА(300)) КАК Комментарий,
	               |	ОтчетКомитентуОПродажах.Контрагент.Наименование КАК Контрагент,
	               |	ВЫРАЗИТЬ(ОтчетКомитентуОПродажах.СуммаДокумента КАК ЧИСЛО(15, 2)) КАК СуммаДокумента,
	               |	ОтчетКомитентуОПродажах.ДенежныеСредства.(
	               |		Сумма,
	               |		СуммаНДС,
	               |		ДатаСобытия,
	               |		Покупатель.Код,
	               |		Покупатель.Наименование,
	               |		Покупатель.НаименованиеПолное,
	               |		Покупатель.ИНН,
	               |		Покупатель.КПП,
	               |		Покупатель.КодПоОКПО
	               |	)
	               |ИЗ
	               |	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	               |ГДЕ
	               |	ОтчетКомитентуОПродажах.ПометкаУдаления = ЛОЖЬ
	               |	И ОтчетКомитентуОПродажах.Дата МЕЖДУ &дДатаНач И &дДатаКон
	               |	И ОтчетКомитентуОПродажах.Организация.Код = """"000000001""""
	               |	И (ВЫРАЗИТЬ(ОтчетКомитентуОПродажах.СуммаДокумента КАК ЧИСЛО(15, 2))) = 0
	               |	И НЕ ОтчетКомитентуОПродажах.Номер ПОДОБНО """"РБ%"""""";	
	
	Запрос.УстановитьПараметр(""дДатаНач"",НачалоДня(Объект.Период.ДатаНачала));
	Запрос.УстановитьПараметр(""дДатаКон"",КонецДня(Объект.Период.ДатаОкончания));
	
	Выборка 		= Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		ОбработкаПрерыванияПользователя();
		
		НоваяСтрока = Объект.ТЧДокументыОКП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.Номер				=	Выборка.Номер;
		НоваяСтрока.Дата				=	Выборка.Дата;		
		НоваяСтрока.ДокументЗагрузки 	= ""Отчет комиссионеру о продажах №""+Строка(Выборка.Номер)+"" от ""+Выборка.Дата;
		
	КонецЦикла;"}
}
},
{2,
{"БУХ 3.0",1,0,"",""},
{0,
{"СЧЕТА РАСЧЕТА",0,0,"","	СчетаРасчета						=	БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация,Контрагент,ДоговорКонтрагента);	
	до.СчетУчетаРасчетовПоАвансам		=	СчетаРасчета.СчетАвансовПокупателя;
	до.СчетУчетаРасчетовСКонтрагентом	=	СчетаРасчета.СчетРасчетовПокупателя;

	
	СчетаУчета								=	БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация,НоваяСтрока.Номенклатура,Склад,до.Дата,);
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СчетаУчета);
	НоваяСтрока.СчетУчетаНДСПоРеализации	=	СчетаУчета.СчетУчетаНДСПродажи;

	"}
},
{0,
{"СЧЕТА ФАКТУРА -  СФОРМИРОВАТЬ",0,0,"","Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ТекСтрока.ПоступлениеТиУ,текСтрока.НомерВходящегоДокумента,текСтрока.ДатаВходящегоДокумента);	
"}
}
},
{0,
{"ОТЛАДКА ЗАПРОСА",0,0,"","ЗначениеВФайл(""F:\1С_Запрос\""+СтрЗаменить(Формат(ТекущаяДата(),""ДЛФ=T""),"":"",""_"")+"".znc"",Новый Структура(""текстЗапроса,Параметры"",Запрос.Текст,Запрос.Параметры))"}
},
{0,
{"ПоказатьОповещениеПользователя",0,0,"","ПоказатьОповещениеПользователя(""Заголовок"", , ""Обнуление паролей, и валют"", БиблиотекаКартинок.Пользователь); "}
},
{0,
{"ПривестиНомерКДлинне",0,0,"","&НаСервере
Функция ПривестиНомерКДлине(знач СтрокаТекст,знач КоличествоСимволов)
	  	
	ДлиннаСтроки	=	СтрДлина(СтрокаТекст);
	Результат		=	СтрокаТекст;
	Если ДлиннаСтроки > КоличествоСимволов Тогда
		Результат = Прав(СтрокаТекст,КоличествоСимволов);
	ИначеЕсли ДлиннаСтроки < КоличествоСимволов Тогда			
		Для ф 	= 1 По (КоличествоСимволов - ДлиннаСтроки) Цикл
			стр = ""0"" + стр;
		КонецЦикла;
		Результат = стр + Результат;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции
"}
},
{0,
{"Параметры подключения к 1с",0,0,"","
	Пут							=	""1c-server"";
	Реф 						=	""buh-l-pack"";
	Пользователь				=	""Сотрудник"";
	Пароль						=	"""";
	Объект.ПараметрыПодключения	=	""Srvr = """""" + СокрЛП(Пут) + """""";Ref = """""" + реф + """"""; Usr = """""" + Пользователь + """"""; Pwd = """""" + Пароль + """""";""

	База = Новый COMОбъект(""V83.COMConnector""); 
	Попытка		
		Источник = База.Connect(Объект.ПараметрыПодключения);
	Исключение
		сообщить(ОписаниеОшибки());
	КонецПопытки;
"}
},
{0,
{"Пример запроса к другой базе 1с Ком-коннектор",0,0,"","	Запрос = Источник.NewObject(""Запрос"");
	Запрос.Текст = ""ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.СчетФактураВыданный КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Дата МЕЖДУ &дДатаНач И &дДатаКон
	               |	И (РеализацияТоваровУслуг.ВидСчетаФактуры = &Вид
	               |			ИЛИ РеализацияТоваровУслуг.ВидСчетаФактуры = &Вид2)
	               |	И РеализацияТоваровУслуг.КодВидаОперации = &КодВидаОперации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РеализацияТоваровУслуг.Дата"";
	Организация = Источник.Справочники.Организации.НайтиПоКоду(""000000001"");
	Запрос.УстановитьПараметр(""дДатаНач"",НачалоДня(дДатаНач));
	Запрос.УстановитьПараметр(""дДатаКон"",КонецДня(дДатаКон));
	Запрос.УстановитьПараметр(""КодВидаОперации"",""04"");
	Запрос.УстановитьПараметр(""Вид"",Источник.Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	Запрос.УстановитьПараметр(""Вид2"",Источник.Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
"}
},
{0,
{"Пример загрузки из базы склад",0,0,"","
&НаКлиенте
Процедура Загрузить(Команда)
	Попытка
		ВК = Новый COMОбъект(""Server.OperUt"");
	Исключение
		ВК = 0;
		сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	ВК.Section = ""БухТД07"";
	ВК.NameTable = ""PRODNAKL"";
	ВК.Data1 = Объект.ДатаС;
	ВК.Data2 = Объект.ДатаПО;
	Сообщить(""Поехали!"");
	Для каждого Контрагент1С из ОБъект.Контрагенты Цикл
		ВК.MoveNext();
		Пока ВК.IsEOF = 0 Цикл
			Если (Контрагент1С.Загружать = Истина)И(ВК.Kod1C = Контрагент1С.Код) Тогда
				стр = """";
				КолвоНулей = 11 - СтрДлина(СокрЛП(ВК.Name_TN));
				Для й = 1 По КолвоНулей Цикл
					стр = стр + ""0"";
				КонецЦикла;
				НомерРеализации = стр + СокрЛП(ВК.Name_TN);
				ДатаРеализации  = Прав(ВК.Data,4)+Сред(ВК.Data,4,2)+Лев(ВК.Data,2);
				стр = """";
				КолвоНулей = 11 - СтрДлина(СокрЛП(ВК.Name_SF));
				Для й = 1 По КолвоНулей Цикл
					стр = стр + ""0"";
				КонецЦикла;
				НомерСФ = стр + ВК.Name_SF;
				ДатаСФ  = Прав(ВК.DataSTH,4)+Сред(ВК.DataSTH,4,2)+Лев(ВК.DataSTH,2);
				КодТовара = СокрЛП(ВК.KOD);
				ДлинаКодТовара = СтрДлина(КодТовара);
				стр="""";
				Если ДлинаКодТовара > 9 Тогда
					КодТовара = Прав(КодТовара,9);
				ИначеЕсли ДлинаКодТовара < 9 Тогда
					Для ф = 1 По (9 - ДлинаКодТовара) Цикл
						стр = ""0"" + стр;
					КонецЦикла;
					КодТовара = стр + КодТовара;
				КонецЕсли;
				Товар = ТоварНаСервере(КодТовара,ВК.ARTIKUL,ВК.Name);
				СоздатьДокументНаСервере(ДатаСФ,НомерСФ,ДатаРеализации,НомерРеализации,Контрагент1С.Контрагент,Контрагент1С.Договор,Товар,ВК.Kol,ВК.Cena);
			КонецЕсли;
			ВК.MoveNext();
		КонецЦикла;
	КонецЦикла;
	Сообщить(""ЭКСПОРТ Документы реализация и с-ф загружены"");
	ВК = 0;
КонецПроцедуры
"}
},
{0,
{"Показать Оповещение",0,0,"","	ПоказатьОповещениеПользователя(
		НСтр(""ru = 'Курсы валют устарели'""),
		НавигационнаяСсылкаОбработки(),
		НСтр(""ru = 'Обновить курсы валют'""),
		БиблиотекаКартинок.Предупреждение32);
		
		
Функция НавигационнаяСсылкаОбработки()
	Возврат ""e1cib/app/Обработка.ЗагрузкаКурсовВалют"";
КонецФункции
		"}
},
{0,
{"ПолучитьРеквизитСсылки",0,0,"","ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,""НаименованиеПолное""); //для сервера"}
},
{0,
{"Открыть форму обработки программно",0,0,"","
&НаКлиенте
Процедура ОткрытьСтарыйВариант(Команда)
		
	ПараметрыФормы = Новый Структура(); 
    ОткрытьФорму(ПолучитьПолноеИмяФормы(""Форма""), ПараметрыФормы, ЭтаФорма);   //форма - имя формы обработки
КонецПроцедуры

&НаКлиенте 
Функция ПолучитьПолноеИмяФормы(ИмяФормы)

    СимволТочка = ""."";
    ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
    Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; //
    Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;

КонецФункции
"}
},
{0,
{"Добавление (ТАБЛИЦА ЗНАЧЕНИЯ)  программно",0,0,"","&НаСервере
Процедура Команда1НаСервере()
	
	ИмяРеквизита = ""Док"";
	Имядок = ВидДокументов;
	ТаблицаРеквизита = ""Документ."" + Имядок;	
	
	РеквизитДобавлен = Истина;
 	
	Если Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
		РеквизитДобавлен = Ложь;						
		ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(""ДинамическийСписок"");	
		ТаблЗначений = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповДляРеквизита);		
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(ТаблЗначений);		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);  			
	КонецЕсли;
	
	РеквизитТаблЗначений = ЭтаФорма[ИмяРеквизита];
	РеквизитТаблЗначений.ОсновнаяТаблица = ТаблицаРеквизита;        
	
	Если РеквизитДобавлен Тогда
		Элементы.Удалить(Элементы[ИмяРеквизита]);
	КонецЕсли;	
	
	ТаблицаФормы = Элементы.Добавить(ИмяРеквизита, Тип(""ТаблицаФормы""), Элементы.ГруппаДокСписок);
	ТаблицаФормы.ПутьКДанным = ИмяРеквизита;
		
	Для Каждого Эл Из Метаданные.Документы[Имядок].СтандартныеРеквизиты Цикл
		Если Эл.Имя = ""Ссылка"" или Эл.Имя = ""ПометкаУдаления"" Тогда
			Продолжить;
		КонецЕсли;			
		НоваяКолонкаТаблицы = Элементы.Добавить(Эл.Имя, Тип(""ПолеФормы""), ТаблицаФормы);    
		НоваяКолонкаТаблицы.ПутьКДанным = ИмяРеквизита + "".""+ Строка(Эл.Имя);
	КонецЦикла;
	
	//--< Данилин В.И 20 октября 2016 г. 10:01:13   0000000079
	ИмяРеквизитовДокумента	=	""Контрагент,СуммаДокумента""; 
	МассивСлов				=	СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИмяРеквизитовДокумента,"","");	
	Для каждого ТекЭлементаР из МассивСлов Цикл
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ТекЭлементаР,Метаданные.Документы[Имядок]) Тогда	
			НоваяКолонкаТаблицы = Элементы.Добавить(ТекЭлементаР, Тип(""ПолеФормы""), ТаблицаФормы);    
			НоваяКолонкаТаблицы.ПутьКДанным = ИмяРеквизита + "".""+ ТекЭлементаР;			
		КонецЕсли;	
	КонецЦикла;
	
	
КонецПроцедуры
"}
},
{0,
{"Выбрать ПЕРИОД (кнопка)",0,0,"","
&НаКлиенте
Процедура ВыбратьПериод(Команда)
		
	ПараметрыВыбора 	= Новый Структура(""НачалоПериода,КонецПериода"", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения(""ВыбратьПериодЗавершение"", ЭтотОбъект);
	ОткрытьФорму(""ОбщаяФорма.ВыборСтандартногоПериода"", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, ""НачалоПериода,КонецПериода"");

КонецПроцедуры
"}
},
{0,
{"Открыть список документов",0,0,"","

	ПараметрыОтбор = Новый Структура;
	ПараметрыОтбор.Вставить(""Организация"",		Объект.Организация);
	ПараметрыОтбор.Вставить(""ВидСчетаФактуры"",	ПредопределенноеЗначение(""Перечисление.ВидСчетаФактурыВыставленного.НаАванс""));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""ПараметрыОтбораСписка"", ПараметрыОтбор);
	
	Если Объект.НачалоПериода <> '00010101' ИЛИ Объект.КонецПериода <> '00010101' Тогда
		Если Объект.НачалоПериода = '00010101' Тогда
			ПараметрыФормы.Вставить(""ДатаМеньшеИлиРавно"", КонецДня(Объект.КонецПериода));
		ИначеЕсли Объект.КонецПериода = '00010101' Тогда
			ПараметрыФормы.Вставить(""ДатаБольшеИлиРавно"", Объект.НачалоПериода);
		Иначе
			// ИнтервалВключаяГраницы с НачалоПериода по КонецПериода
			ПараметрыФормы.Вставить(""ДатаБольшеИлиРавно"", Объект.НачалоПериода);
			ПараметрыФормы.Вставить(""ДатаМеньшеИлиРавно"", КонецДня(Объект.КонецПериода));
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму(""Документ.СчетФактураВыданный.ФормаСписка"", ПараметрыФормы, ЭтаФорма);
	//ОткрытьФорму(""Документ.""+Элемент.Имя+"".ФормаСписка"", ПараметрыФормы, ЭтаФорма);

"}
},
{0,
{"Открыть оборотно сальдовую",0,0,"","&НаКлиенте
Процедура ДекорацияОСВНажатие(Элемент)
	
	//Имя вызываемого отчета карточка,анализ, ОСВ по счету . Я делал только для этих трех.
    ИмяОтчета = ""ОборотноСальдоваяВедомостьПоСчету"";
    
    //Заполняем реквизиты отчета и обязательные поля (могут отличаться в зависимости от отчета) 
    ПользовательскиеНастройкиКомпоновкиДанных = Новый ПользовательскиеНастройкиКомпоновкиДанных;
    ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить(""Счет""          , Счет);
    ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить(""НачалоПериода"" , НачалоМесяца(Объект.Период));
    ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить(""КонецПериода""  , КонецМесяца(Объект.Период));
    ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить(""Организация""   , Объект.Организация);
	ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить(""ПоСубсчетам""   , Истина);
	ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить(""Периодичность"" , 9);
	
	
    
    //Заполняем дополнительные отборы (в примере только для субконто1 и субконто2)
    НовыйОтбор                                        = ПользовательскиеНастройкиКомпоновкиДанных.Элементы.Добавить(Тип(""ОтборКомпоновкиДанных""));
    НовыйОтбор.ИдентификаторПользовательскойНастройки = ""Отбор"";    
    ЗаполнитьЭлементОтбораКомпоновкиДанных(НовыйОтбор,Истина,ВидСравненияКомпоновкиДанных.Равно,""Субконто1"", Контрагент);
	//ЗаполнитьЭлементОтбораКомпоновкиДанных(НовыйОтбор,Истина,ВидСравненияКомпоновкиДанных.Равно,""Субконто2"", Договор);
	
	
	//Заполняем группировки
    ГруппировкаОтчета 			= Новый Массив;    
    ОписаниеГруппировки 		= Новый Структура(""Использование,Поле"", Истина, ""Субконто2"");
    ГруппировкаОтчета.Добавить(ОписаниеГруппировки);    
    ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить(""Группировка"", ГруппировкаОтчета);	
	
	
    //Обязателньо указываем ключ (Равным параметру ""ИДРасшифровки"",я указывал Имя отчета ) НастройкиРасшифровки
    НастройкиРасшифровки = Новый Структура;
    НастройкиРасшифровки.Вставить(ИмяОтчета, ПользовательскиеНастройкиКомпоновкиДанных);
    
    УсловияОтбора = Новый Структура();
    УсловияОтбора.Вставить(""НастройкиРасшифровки"", НастройкиРасшифровки);
    
    //Дублируем настройки (у меня в файловой без этого не открывалось)
    ОбщиеНастройки = Новый Структура();
    ОбщиеНастройки.Вставить(""Объект""              , УсловияОтбора);
    ОбщиеНастройки.Вставить(""НастройкиРасшифровки"", НастройкиРасшифровки);
    
    //Помещаем во временное хранилище (Уид можно случайный)
    АлресХранилища = ПоместитьВоВременноеХранилище(ОбщиеНастройки, Новый УникальныйИдентификатор);
    
    //Обращаем внимания на заполнемые настройки, если вы укажете отбор = истина то затрется все выше указанные отборы ( поскольку показатели и группировки я не менял, то оставил их типоыми) 
    ЗаполнятьТиповыеНастройки = Новый Структура;
    ЗаполнятьТиповыеНастройки.Вставить(""Отбор""          , Ложь);
    ЗаполнятьТиповыеНастройки.Вставить(""Группировка""    , ЛОЖЬ);
    ЗаполнятьТиповыеНастройки.Вставить(""ВыводимыеДанные"", Истина);
    ЗаполнятьТиповыеНастройки.Вставить(""Показатели""     , Истина);
    
    //Сами параметры для предачи на форму (""ИДРасшифровки"" - в данном случаи ключ от структуры НастройкиРасшифровки , если ""СформироватьПриОткрытии"" будет равно Ложь то отчет откроется с ранее сохраненными настройками)     
    ПараметрыОтчета = Новый Структура;
    ПараметрыОтчета.Вставить(""ВидРасшифровки""         , 1);
    ПараметрыОтчета.Вставить(""АдресНастроек""          , АлресХранилища);
    ПараметрыОтчета.Вставить(""СформироватьПриОткрытии"", Истина);
    ПараметрыОтчета.Вставить(""ИДРасшифровки""          , ИмяОтчета);
    ПараметрыОтчета.Вставить(""РежимРасшифровки""       , Истина);
    ПараметрыОтчета.Вставить(""ЗаполняемыеНастройки""   , ЗаполнятьТиповыеНастройки);
    
    //Ну и открываем саму форму
    ОткрытьФорму(""Отчет."" + ИмяОтчета + "".Форма.ФормаОтчета"", ПараметрыОтчета,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭлементОтбораКомпоновкиДанных(ОтборНастройкиКомпоновкиДанных,Использование,ВидСрав,ИмяПоля,ЗначениеОтбора)
    
    НовыйЭлемент = ОтборНастройкиКомпоновкиДанных.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
    
    НовыйЭлемент.Использование  = Использование;
    НовыйЭлемент.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);
    НовыйЭлемент.ВидСравнения   = ВидСрав;
    НовыйЭлемент.ПравоеЗначение = ЗначениеОтбора;
    
КонецПроцедуры
"}
},
{0,
{"Записать в форме документа",0,0,"","&НаКлиенте
Процедура ПечатьЗакрыть(Команда)
    Если Записать(Новый Структура(""РежимЗаписи"", РежимЗаписиДокумента.Проведение)) тогда
		ТабДок.Напечатать();	
		Закрыть(Неопределено);
    Иначе
       //... какие-то действия и для проверки:
	   //Сообщить(""Не провелось!"");
   КонецЕсли;
	
	
КонецПроцедуры
"}
},
{0,
{"Переоткрыть форму - программно (Reopen)",0,0,"","
&НаСервере
Функция ИмяФайлаВнешнейОбработки(ИмяОбработки)
    #Если НЕ МобильноеПриложениеСервер Тогда

        Возврат ВнешниеОбработки.Создать(ИмяОбработки).ИспользуемоеИмяФайла;
    #КонецЕсли

КонецФункции	

&НаКлиенте
Процедура КомандаПереоткрытьОбработку(Команда)
	
	//Элементы.КомандаПереоткрытьОбработку.Заголовок	=	Элементы.КомандаПереоткрытьОбработку.Заголовок+"" ""+Формат(ТекущаяДатаСеанса(),""ДЛФ=T"");
	
	текОкно    					= АктивноеОкно();
	Если ТипЗнч(текОкно) 		= Тип(""ОкноКлиентскогоПриложения"") Тогда
		текФорма    			= текОкно.ПолучитьСодержимое();
		
		Если ТипЗнч(текФорма) 	= Тип(""УправляемаяФорма"") Тогда
			ПолноеИмяФормы      = текФорма.ИмяФормы;
			позПервойТочки      = Найти(ПолноеИмяФормы,""."");
			ТипОбъекта   		= Лев(ПолноеИмяФормы,позПервойТочки-1);
			Если ТипОбъекта    	= ""ВнешняяОбработка"" Тогда
				ИмяОбработки    = Сред(ПолноеИмяФормы,позПервойТочки+1);
				ИмяОбработки    = Лев(ИмяОбработки,Найти(ИмяОбработки,""."")-1);
				ПоместитьФайл(,ИмяФайлаВнешнейОбработки(ИмяОбработки),, Ложь);
				текФорма.Закрыть();
				ОткрытьФорму(ПолноеИмяФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Создать реквизит и элемент формы программно",0,0,"","Процедура _ДобавитьНетиповыеРеквизиты(Форма)
	
	//ПОЛУЧИМ ДАННЫЕ
	МенеджерЗаписи 			= РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект 	= Форма.Объект.Ссылка;
	МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(""Имя"", ""ПодразделениеУпр_6de157e375fc4cbd94112d212d2ebd1a"");
	МенеджерЗаписи.Прочитать();

	
	//СОЗДАНИЕ ГРУППЫ
	ГруппаШапкаЛевая	=	Форма.Элементы.Найти(""ГруппаШапкаЛевая"");
	
	////////ГруппаШапкаЛеваяЛПАК = Форма.Элементы.Добавить(
	////////	""ГруппаШапкаЛеваяЛПАК"",
	////////	Тип(""ГруппаФормы""),
	////////	ГруппаШапкаЛевая);
	////////	
	////////ГруппаШапкаЛеваяЛПАК.Вид 			= ВидГруппыФормы.ОбычнаяГруппа;	
	////////ГруппаШапкаЛеваяЛПАК.отображение	=	ОтображениеОбычнойГруппы.Нет;	
	////////ГруппаШапкаЛеваяЛПАК.Заголовок 		= """";
	
	//СОЗДАНИЕ РЕКВИЗИТА	
	ДобавляемыеРеквизиты = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы(""ЛПАК_Подразделения_Упр"", Новый ОписаниеТипов(""СправочникСсылка.ПодразделенияОрганизаций""), """", ""Подразделения (упр)"");
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Форма.ЛПАК_Подразделения_Упр 	= МенеджерЗаписи.Значение;
	
	ПолеВвода 						= Форма.Элементы.Добавить(""ЛПАК_Подразделения_Упр"", Тип(""ПолеФормы""), ГруппаШапкаЛевая);
	ПолеВвода.Вид 					= ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным 			= ""ЛПАК_Подразделения_Упр"";
	
	ПолеВвода.УстановитьДействие(""ПриИзменении"",""Подключаемый_ВыполнитьКоманду"");
	
	//ДЛЯ РЕКВИЗИТА НАСТРОИМ ОТБОР И СВЯЗИ
    НовыйМассив 					= Новый Массив();
    НовыйМассив.Добавить(Новый СвязьПараметраВыбора(""Отбор.Владелец"", ""Объект.Организация""));	
    НовыеСвязи 						= Новый ФиксированныйМассив(НовыйМассив);	
    ПолеВвода.СвязиПараметровВыбора = НовыеСвязи;		

	
	//СОЗДАНИЕ КНОПКИ	
	//Добавление команды формы
	Команда = форма.Команды.Добавить(
		""КнопкаСохранитьЗначениеРеквизита""); //Имя команды
	Команда.Заголовок = ""Сохранить"";	
	Команда.Действие  = ""Подключаемый_ВыполнитьКоманду""; //Имя связанной процедуры	
	
	//Полный перечень свойств команды в синтакс-помощнике
	//	Интерфейс (управляемый)->Форма клиентского приложения->КомандаФормы
	
	////////////Добавление кнопки формы
	//////////КнопкаФормы = Форма.Элементы.Добавить(
	//////////	""КнопкаСохранитьЗначениеРеквизита"", //Имя кнопки
	//////////	Тип(""КнопкаФормы""),             	//Тип, всегда КнопкаФормы
	//////////	ГруппаШапкаЛеваяЛПАК);                      		//Контейнер для кнопки (Форма, Группа, Командная панель)
	//////////	
	//////////КнопкаФормы.ИмяКоманды = ""КнопкаСохранитьЗначениеРеквизита""; //Связь с командой по имени
	//////////
	////////////Возможные варианты вида кнопки:
	////////////	-Гиперссылка
	////////////	-ГиперссылкаКоманднойПанели
	////////////	-КнопкаКоманднойПанели
	////////////	-ОбычнаяКнопка
	////////////Если контейнер для формы - командная панель
	////////////то вид кнопки должен быть КнопкаКоманднойПанели
	//////////КнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 	
	//////////
	////////////ВНЕСЕНИЕ КОМАНДЫ В ТАБЛИЦУ 
	//////////ТЗКоманды 			= ПолучитьИзВременногоХранилища(Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	//////////ТекСтрока			=	ТЗКоманды.Добавить();
	//////////ТекСтрока.ИмяВФорме	=	""КнопкаСохранитьЗначениеРеквизита"";	
	//////////ПоместитьВоВременноеХранилище(ТЗКоманды,Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	//----
	
КонецПроцедуры"}
}
},
{4,
{"ТАБ. ЧАСТЬ",1,0,"",""},
{0,
{"УстановитьОтборСтрок (При активизации строки)",0,0,"","&НаКлиенте
Процедура ТЧ_ЗагрузкаПриАктивизацииСтроки(Элемент)
	
	ТекДанныеСтрока 						= Элементы.ТЧ_Загрузка.ТекущиеДанные;
	
	Если ТекДанныеСтрока <> Неопределено Тогда                                   		
		Элементы.ТЧ_Остатки.ОтборСтрок 		= Новый ФиксированнаяСтруктура(""Номенклатура"", ТекДанныеСтрока.Номенклатура);		
	Иначе
		Элементы.ТЧ_Остатки.ОтборСтрок 		= Новый ФиксированнаяСтруктура(""Номенклатура"", Неопределено);		
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"УстановитьВыбранноеЗначениеВПодобныхСтроках",0,0,"","
&НаКлиенте
Процедура ТЧ_ДанныеИсточникаПодразделениеУУПриИзменении(Элемент)
	
	ТекДанныеСтрока 		= Элементы.ТЧ_ДанныеИсточника.ТекущиеДанные;	
	Если ТекДанныеСтрока 	= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаданияЗаменыРеквизитов					=	Новый Структура();
	Если Элементы.ТЧ_ДанныеИсточника.ТекущийЭлемент.Имя	=	""ТЧ_ДанныеИсточникаПодразделениеУУ""	 Тогда
		
		СтруктураПоиска	=	Новый Структура();
		СтруктураПоиска.Вставить(""Подразделение0Уровень"",ТекДанныеСтрока.Подразделение0Уровень);
		СтруктураПоиска.Вставить(""Подразделение1Уровень"",ТекДанныеСтрока.Подразделение1Уровень);
		СтруктураПоиска.Вставить(""Подразделение2Уровень"",ТекДанныеСтрока.Подразделение2Уровень);
		СтруктураПоиска.Вставить(""Подразделение3Уровень"",ТекДанныеСтрока.Подразделение3Уровень);
		СтруктураПоиска.Вставить(""Подразделение4Уровень"",ТекДанныеСтрока.Подразделение4Уровень);
		
		СтруктураЗаданияЗаменыРеквизитов.Вставить(""СтруктураПоиска""	,СтруктураПоиска);
		СтруктураЗаданияЗаменыРеквизитов.Вставить(""ИмяРеквизита""	,""ПодразделениеУУ"");		
		СтруктураЗаданияЗаменыРеквизитов.Вставить(""ЗначениеЗамены""	,ТекДанныеСтрока.ПодразделениеУУ);				
	КонецЕсли;
	
	Если СтруктураЗаданияЗаменыРеквизитов.Количество()>0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения(""УстановитьРеквизитВПодобныхСтроках"", ЭтотОбъект,ТекДанныеСтрока),
		""Установить в незаполненных?"", РежимДиалогаВопрос.ДаНет);		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте 
Процедура УстановитьРеквизитВПодобныхСтроках(Результат, ТекДанныеСтрока) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	УстановитьДанныеРеквизита();			
	
КонецПроцедуры


&НаСервере
Процедура УстановитьДанныеРеквизита()
	
	МассивСтрок	=	Объект.ТЧ_ДанныеИсточника.НайтиСтроки(СтруктураЗаданияЗаменыРеквизитов.СтруктураПоиска);
	Для каждого ТекЭлемента из МассивСтрок Цикл
		ТекЭлемента[СтруктураЗаданияЗаменыРеквизитов.ИмяРеквизита]	=	СтруктураЗаданияЗаменыРеквизитов.ЗначениеЗамены;			
	КонецЦикла;	
	
КонецПроцедуры
"}
},
{0,
{"Сообщения в строках об ошибках",0,0,"","&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    ТЧ = Объект.ТабличнаяЧасть1;
    Для каждого СтрокаТЧ ИЗ ТЧ Цикл
        Если СтрокаТЧ.Реквизит2 = 55 Тогда
            Индекс = ТЧ.Индекс(СтрокаТЧ);
            Сообщить = Новый СообщениеПользователю;
            Сообщить.Текст = ""Ошибка в этом поле строки"";
            Сообщить.Поле = ""Объект.ТабличнаяЧасть1[""+Индекс+""].Реквизит2"";
            Сообщить.Сообщить();
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры"}
},
{1,
{"Отбор табличной части формы по значению",1,0,"",""},
{0,
{"ТоварыПриАктивизацииСтроки()",0,0,"","Процедура ТоварыПриАктивизацииСтроки(Элемент)
		
	Отбор						=	ЭлементыФормы.ПрохождениеТовара.ОтборСтрок;
	
	Отбор.ИндексСтроки.Значение			=	Элемент.ТекущаяСтрока.НомерСтроки;
	Отбор.ИндексСтроки.Использование	=	Истина;
	
КонецПроцедуры
"}
}
}
},
{2,
{"Параметры запуска",1,0,"",""},
{0,
{" /C РежимОтладки",0,0,""," /C РежимОтладки"}
},
{0,
{"Запустить Приложение ()",0,0,"","ЗапуститьПриложение(""C:\Папка\программа.exe"");"}
}
},
{2,
{"РЕГИСТР БУХГАЛТЕРИИ",1,0,"",""},
{0,
{"Перезаписать движения",0,0,"","Процедура ПерезаписатьДвижения(ДокументРегистратор) Экспорт
	
	Выборка		=	РегистрыБухгалтерии.Хозрасчетный.ВыбратьПоРегистратору(ДокументРегистратор);
	
	НЗБух		=	РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();	
	
	Пока Выборка.Следующий() Цикл
		Проводка	=	НЗБух.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка,Выборка);
		
		
		Для каждого ТекСубконто из Выборка.СубконтоДт Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,ТекСубконто.Ключ,ТекСубконто.Значение);
		КонецЦикла;
		
		Для каждого ТекСубконто из Выборка.СубконтоКт Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКТ,ТекСубконто.Ключ,ТекСубконто.Значение);
		КонецЦикла; 
		
	КонецЦикла;
	
	
	НЗБух.Отбор.Регистратор.Значение	=	ДокументРегистратор;
	НЗБух.Записать(Истина);
	
	
	
	
КонецПроцедуры
"}
},
{1,
{"Движения Регистров (чтение обработка и прочее)",1,0,"",""},
{0,
{"Обработка проводок",0,0,"","	РБ			=	РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();	
	Выборка		=	РегистрыБухгалтерии.Хозрасчетный.ВыбратьПоРегистратору(ДокументКорректировки);
	
	БылаЗамена	=	ЛОЖЬ;
	
	Пока Выборка.Следующий() Цикл 		
		Проводка	=	РБ.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка,Выборка);
		
		Если Проводка.СчетДт	=	СчетПоиска Тогда
			Проводка.СчетДт		=	СчетЗамены;				
			БылаЗамена			=	Истина;
		КонецЕсли;
		
		Если Проводка.СчетКт	=	СчетПоиска Тогда
			Проводка.СчетКт		=	СчетЗамены;
			БылаЗамена			=	Истина;
		КонецЕсли;
		
		Для каждого ТекСубконто из Выборка.СубконтоДт Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,ТекСубконто.Ключ,ТекСубконто.Значение);
		КонецЦикла;
		
		Для каждого ТекСубконто из Выборка.СубконтоКт Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКТ,ТекСубконто.Ключ,ТекСубконто.Значение);
		КонецЦикла; 		
		
	КонецЦикла;
	
	
	Если БылаЗамена Тогда
		РБ.Отбор.Регистратор.Значение	=	ДокументКорректировки;
		РБ.Записать(Истина);

		ДО								=	ДокументКорректировки.ПолучитьОбъект();
		ДО.РучнаяКорректировка			=	Истина;
		до.ОбменДанными.Загрузка		=	Истина;
		до.Записать(); 
		
		Сообщить(""Корректировка ""+ДокументКорректировки+"" - выполнена"");
	Иначе
		Сообщить(""Неободимости корректировки ""+ДокументКорректировки+"" - нет"", СтатусСообщения.Информация);
	КонецЕсли;
"}
}
}
},
{2,
{"ОФОРМЛЕНИЕ КОДА",1,0,"",""},
{0,
{"ОБЛАСТИ",0,0,"","#Область <?>


#КонецОбласти
"}
},
{0,
{"НАЧАЛО И КОНЕЦ области",0,0,"","#Область ОСНОВНЫЕ АЛГОРИТМЫ




#КонецОбласти
"}
}
},
{2,
{"ФОНОВЫЕ ЗАДАНИЯ",1,0,"",""},
{0,
{"ПРОВЕРКА И ЗАПУСК",0,0,"","		МассивФоновыхЗаданий 	= ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура(""Ключ,Состояние"", ПараметрыСеанса.ТекущийПользователь.УникальныйИдентификатор(), СостояниеФоновогоЗадания.Активно));
		
		Если МассивФоновыхЗаданий.Количество()	=	0 Тогда
			МассивПараметров	= Новый Массив;
			МассивПараметров.Добавить(ПараметрыСеанса.ТекущийПользователь);
			Задание				= ФоновыеЗадания.Выполнить(""УправлениеКонтактами.СформироватьНапоминанияОЗадачах"", МассивПараметров, МассивПараметров[0].УникальныйИдентификатор(), ""(Генерация СРМ напоминаний) "" + МассивПараметров[0]);
		КонецЕсли;
"}
},
{0,
{"ЗапуститьЗадачуВФоне",0,0,"","&НаСервере 
Процедура ЗапуститьЗадачуВФоне(ТаблицаЗадания,Поток)
	
	ПК	=	Новый Структура(""ДополнительнаяОбработкаСсылка,ИдентификаторКоманды"",ОбъектСсылка,""ФоноваяЗагрузка"");
	
	
	ПК.Вставить(""ТЗ"",ТаблицаЗадания);
	ПК.Вставить(""Родитель"",ГруппаДляЗагрузкиКонтрагентов);
	
	МассивПараметров	=	Новый Массив;
	МассивПараметров.Добавить(УникальныйИдентификатор);
	МассивПараметров.Добавить(ПК);	
	
	Задание				= ФоновыеЗадания.Выполнить(""ДополнительныеОтчетыИОбработкиВызовСервера.ЗапуститьДлительнуюОперацию"", МассивПараметров, Новый УникальныйИдентификатор, "" поток ""+Поток);
	
	//ДополнительныеОтчетыИОбработкиВызовСервера.ЗапуститьДлительнуюОперацию(УникальныйИдентификатор, ПК);	
	
	
	
	//ПараметрыКоманды = Новый Структура(""ДополнительнаяОбработкаСсылка, СопровождающийТекст"");
	//ПараметрыКоманды.ДополнительнаяОбработкаСсылка = ОбъектСсылка;
	//ПараметрыКоманды.СопровождающийТекст = НСтр(""ru = 'Выполняем из формы в фоне...'"");
	//Состояние(ПараметрыКоманды.СопровождающийТекст);
	//ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне(""ФоноваяЗагрузка"", ПараметрыКоманды, ЭтаФорма);	
	
КонецПроцедуры
"}
}
},
{7,
{"ИНТЕГРАЦИЯ",1,0,"",""},
{1,
{"Api_Query",1,0,"",""},
{0,
{"Отправка запроса POST",0,0,"","	мСоединение	=	Неопределено;
	ИмяСервераПриема = ""danilin-vi""; 
	ИмяИБПриема = ""danv_copy_lpack_buh3""; 
	ИмяСервисаПриема = ""Test_koda"";       
	
	Попытка
		мСоединение = Новый HTTPСоединение(ИмяСервераПриема, 80, ""1cv8"", """");
	Исключение
		Сообщить(ОписаниеОшибки());					
		//todo Регистрация ошибки;
	КонецПопытки;		
	
	Если мСоединение=Неопределено Тогда
		//todo Регистрация ошибки;
	Иначе	
		
		ПараметровФайла	=	РегистрыСведений._СтруктураФайл.ВернутьСтруктуруФайла(Спр_Файлы);
		ПараметрыЗапроса = новый Структура(""id_api_query,param"",ИмяСервисаПриема,ПараметровФайла);
		
		Параметры_json = _МодульОбработки.СерилизацияJSON(ПараметрыЗапроса); 
		//HTTPЗапрос = ""/""+ИмяИБПриема+""/hs/query/query_data/{""""id_api_query"""": """"""+ИмяСервисаПриема+"""""",""""param"""":""+СтрокаПараметров+""}"";					
		HTTPЗапрос = ""/""+ИмяИБПриема+""/hs/query/query_data/""+ИмяСервисаПриема;					
		
		//Сообщить(HTTPЗапрос);Для отладки		
		Запрос = Новый HTTPЗапрос(HTTPЗапрос);
		Запрос.Заголовки.Вставить(""Content-type"", ""application/JSON; charset=utf-8"");
		Запрос.УстановитьТелоИзСтроки(Параметры_json);
		
		//Результат =  мСоединение.Получить(Запрос);
		Результат =  мСоединение.ОтправитьДляОбработки(Запрос);
		ОтветСтрокой =	Результат.ПолучитьТелоКакСтроку(""UTF-8""); 	
		Если Результат.КодСостояния<>200 Тогда						
			//todo Регистрация ошибки (ОтветСтрокой); Для отладки							
		КонецЕсли;		
		
		Сообщить(""""+Результат.КодСостояния+"":""+ОтветСтрокой);		
	КонецЕсли;
	
"}
}
},
{2,
{"HTTP сервисы",1,0,"",""},
{3,
{"Ответ",1,0,"",""},
{0,
{"ОтветJson",0,0,"","//Перечень ответов хттп сервиса
//https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BA%D0%BE%D0%B4%D0%BE%D0%B2_%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D1%8F_HTTP
Функция ТестированиеСервисаget(Запрос)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОтвета	=	СерилизацияОтветаJSON(Новый Структура(""result,basestring"",""get - ok"",СтрокаСоединенияИнформационнойБазы()));		
	
	Ответ = Новый HTTPСервисОтвет(200); 
	
	Ответ.Заголовки.Вставить(""Content-type"", ""application/JSON; charset=utf-8""); 
	Ответ.УстановитьТелоИзСтроки(СтруктураОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать); 	
	
	УстановитьПривилегированныйРежим(Ложь);

	
	Возврат Ответ;

КонецФункции
"}
},
{0,
{"ПриемФайлаНаСторонеСервиса(Запрос ХТТП сервис)",0,0,"","

#Область Сервисные_Инструменты

Функция СерилизацияОтветаJSON(ЗначениеСериализации)		
	//сериализуем массив клиентов в JSON 
	ЗаписьJSON 		= Новый ЗаписьJSON; 
	ЗаписьJSON.УстановитьСтроку(); 
	ЗаписатьJSON(ЗаписьJSON, ЗначениеСериализации); 
	СтрокаДляОтвета = ЗаписьJSON.Закрыть(); 
	Возврат СтрокаДляОтвета;
	
КонецФункции 

Функция ПрочитатьТекстовыйФайл(ПолноеИмяФайла,Кодировка=Неопределено)
	
	Если Кодировка=Неопределено Тогда
		Кодировка	=	КодировкаТекста.UTF8;	
	КонецЕсли;
	
	
	мТекстовыйФайл	=	новый ЧтениеТекста(ПолноеИмяФайла,Кодировка);
	мЗначение		=	мТекстовыйФайл.Прочитать();
	
	Возврат мЗначение;	
	
КонецФункции

Функция ПоместитьВХранилищеФайлИзТелаСтрокиХТТП(Запрос)
	СтруктураОтвета	=	Новый Структура(""ИмяФайла,АдресХранилища,ОписаниеОшибок,ЭтоОтчет,ИмяОбъекта"");
	
	СтруктураОтвета.ИмяФайла	=	Запрос.Заголовки.Получить(""fileName"");
	СтруктураОтвета.ЭтоОтчет	=	?(Запрос.Заголовки.Получить(""report"")=""Истина"",Истина,Ложь);	
	СтруктураОтвета.ИмяОбъекта	=	Запрос.Заголовки.Получить(""name_1c_Object"");
	
	boundary					=	Запрос.Заголовки.Получить(""boundary"");	
	РазмерФайла					=	Запрос.Заголовки.Получить(""Content-Lenght"");	
	
	
	Если ЗначениеЗаполнено(СтруктураОтвета.ИмяФайла) и ЗначениеЗаполнено(boundary) Тогда
		
		ОписаниеОшибки		=	"""";
		
		
		ТелоСтрока		=	Запрос.ПолучитьТелоКакСтроку();		
		МаркерНачала	=	""start_""+Boundary;
		ДлиннаМаркера1	=	СтрДлина(МаркерНачала);
		ПозицияНачала	=	СтрНайти(ТелоСтрока,МаркерНачала)+ДлиннаМаркера1+1;
		
		
		МаркерОкончания	=	""end_""+Boundary;			
		ПозицияОкончания=	СтрНайти(ТелоСтрока,МаркерОкончания);
		
		ТелоФайла		=	Сред(ТелоСтрока,ПозицияНачала,ПозицияОкончания-ПозицияНачала);			
		
		Попытка			
			СтруктураОтвета.АдресХранилища	=	ПоместитьВоВременноеХранилище(Base64Значение(ТелоФайла));
		Исключение			
			ОписаниеОшибки	=	ОписаниеОшибки+ОписаниеОшибки();
		КонецПопытки;
		
		СтруктураОтвета.ОписаниеОшибок	=	ОписаниеОшибки;	
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции


#КонецОбласти

#Область Работа_С_Обработками_Отчетами



Процедура ЗагрузитьОбъект1С_в_спр_допОбработок(СтруктураЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование"";
	
	Запрос.УстановитьПараметр(""Наименование"", СтруктураЗадания.ИмяОбъекта);
	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	ХД	=	Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтруктураЗадания.АдресХранилища));
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		СО						=	ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
		со.ХранилищеОбработки	=	ХД;
		со.Версия				=	формат(ТекущаяДата(),""ДФ=dd/MM/yy"");
		СО.Записать();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры



#КонецОбласти



//пример запроса
//http://localhost/danv_copy_lpack_buh3/hs/load1c/obj/
Функция uploadpost(Запрос)
	
	СтруктураОтвета	=	ПоместитьВХранилищеФайлИзТелаСтрокиХТТП(Запрос);	
	ЗагрузитьОбъект1С_в_спр_допОбработок(СтруктураОтвета);
	
	Если ПустаяСтрока(СтруктураОтвета.ОписаниеОшибок) Тогда		
		Ответ 			= Новый HTTPСервисОтвет(200);		
		
	иначе
		Ответ 			= Новый HTTPСервисОтвет(500,СтруктураОтвета.ОписаниеОшибок);		
	КонецЕсли;
	
	
	Возврат Ответ;
КонецФункции
"}
},
{0,
{"Ответ на get с параметром",0,0,"","Функция getsource_by_idВернутьДанныеПоГуид(Запрос)
	
	filename = Запрос.ПараметрыURL[""filename""];
	СтруктураОтвета	= СформироватьОтветПоЗапросу(filename);

	Ответ = Новый HTTPСервисОтвет(200);
	
	Ответ.УстановитьТелоИзСтроки(СерилизацияJSON(СтруктураОтвета), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	
	Возврат Ответ;
КонецФункции
"}
}
},
{4,
{"Запрос",1,0,"",""},
{0,
{"ОтправкаЗапроса_постМетод",0,0,"","//пост метод
Функция ОтправитьЗапросВСервисХТТП(ПараметрыЗапроса,СтруктураЗапроса) Экспорт
	
	Ошибка			=	Ложь;
	СтруктураОтвета	=	новый Структура(""Ошибка,Ответ,Запрос"");	
	
	Если мСоединение=Неопределено Тогда
		Попытка
			мСоединение = Новый HTTPСоединение(ПараметрыЗапроса.имяХоста, 80, ПараметрыЗапроса.Пользователь, ПараметрыЗапроса.ПарольПользователя);
		Исключение
			Сообщить(ОписаниеОшибки());		
			Возврат СтруктураОтвета;
		КонецПопытки;			
	КонецЕсли;
	
	json_структура		=	СерилизацияJSON(СтруктураЗапроса);
	
	HTTPЗапрос = Новый HTTPЗапрос(""/""+ПараметрыЗапроса.ИмяБазы+""/hs/mp_tfr_data/get_desc/"");
		
	// передадим данные на сервер 	
	HTTPЗапрос.Заголовки.Вставить(""Content-type"", ""application/JSON; charset=utf-8"");
	HTTPЗапрос.УстановитьТелоИзСтроки(json_структура);
	
	HTTPОтвет	=	мСоединение.ОтправитьДляОбработки(HTTPЗапрос);		
	//HTTPОтвет	=	мСоединение.Получить(HTTPЗапрос);		
	
	Если 	HTTPОтвет.КодСостояния	<>	200 Тогда
		Ошибка	=	Истина;			
	КонецЕсли;	
	
	СтруктураОтвета.Ошибка	=	Ошибка;
	СтруктураОтвета.Ответ	=	HTTPОтвет.ПолучитьТелоКакСтроку(""utf-8"");
	СтруктураОтвета.Запрос	=	HTTPЗапрос.АдресРесурса;
	
	возврат СтруктураОтвета
	
КонецФункции
"}
},
{0,
{"ОтправкаФайлаОбработкиВХТТПСервис (Клиент)",0,0,"","
#Область Сервисные_Инструменты
&НаСервере
Функция ПолучитьСведенияОВнешнейОбработке(ПараметрыРегистрации)
	
	ИмяОбъекта 		= ПолучитьИмяВременногоФайла();	

	ДвоичныеДанные 	= ПолучитьИзВременногоХранилища(ПараметрыРегистрации.АдресДанныхОбработки);
	ДвоичныеДанные.Записать(ИмяОбъекта);

	// Получение сведений о внешней обработке.	
	Менеджер				=	?(ПараметрыРегистрации.ЭтоОтчет,ВнешниеОтчеты,ВнешниеОбработки);
	
	ВнешнийОбъект 			= Менеджер.Создать(ИмяОбъекта);
	ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
	
	Сведения 				= ВнешнийОбъект.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вставить(""Наименование"",Сведения.Наименование);	
	
КонецФункции

#КонецОбласти

#Область Основная

&НаКлиенте
Процедура ОтправитьФайлОбработкиВСервисХТТП(ПараметрыЗапроса)
	
	мФайл		=	новый Файл(ПараметрыЗапроса.ПолноеИмяФайла);
	ИмяФайла	=	мФайл.Имя;  	
	
	//Сведения о обработке
	ПараметрыРегистрации	=	новый Структура(""ЭтоОтчет,ИмяФайла,АдресДанныхОбработки"");
	ПараметрыРегистрации.ЭтоОтчет				=	ВРег(Прав(ИмяФайла,3))=""ERF"";
	ПараметрыРегистрации.ИмяФайла				=	ИмяФайла;
	ПараметрыРегистрации.АдресДанныхОбработки	=	ПоместитьВоВременноеХранилище(новый ДвоичныеДанные(ПутьФайла));
	
	ПолучитьСведенияОВнешнейОбработке(ПараметрыРегистрации);	
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыЗапроса.имяХоста, 80, ""1cv8"", """");
	Исключение
		Сообщить(ОписаниеОшибки());		
		Возврат;
	КонецПопытки;	
	
	//Адрес сервиса
	HTTPЗапрос = Новый HTTPЗапрос(""/""+ПараметрыЗапроса.ИмяБазы+""/hs/load1c/obj/"");
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), ""-"", """");
	
	// передадим данные на сервер 	
	HTTPЗапрос.Заголовки.Вставить(""Content-Type""	, ""multipart/form-data"");	
	HTTPЗапрос.Заголовки.Вставить(""boundary""		, boundary);
	HTTPЗапрос.Заголовки.Вставить(""fileName""		, ИмяФайла);
	HTTPЗапрос.Заголовки.Вставить(""report""			, Формат(ПараметрыРегистрации.ЭтоОтчет,""БЛ=Ложь; БИ=Истина""));
	HTTPЗапрос.Заголовки.Вставить(""name_1c_Object""	, ПараметрыРегистрации.Наименование);
	
	//Формирование тела запроса
	// параметр ""file""	
	имяФайлаОтправки 	= ПолучитьимяВременногоФайла(""txt"");		
	ЗаписьТекста 		= Новый ЗаписьТекста(имяФайлаОтправки,КодировкаТекста.UTF8);	
	
	ЗаписьТекста.ЗаписатьСтроку(""Content-Disposition: form-data; name=""""file""""; filename=""""""+ИмяФайла+"""""""");
	ЗаписьТекста.ЗаписатьСтроку(""Content-Type: binary"");
	ЗаписьТекста.ЗаписатьСтроку(""start_""+Boundary);
	ЗаписьТекста.Записать(Base64Строка(Новый ДвоичныеДанные(ПутьФайла)));
	ЗаписьТекста.ЗаписатьСтроку(""end_""+Boundary);	
	ЗаписьТекста.Закрыть();	
	
	HTTPЗапрос.УстановитьИмяФайлаТела(имяФайлаОтправки);
	
	HTTPОтвет	=	Соединение.ОтправитьДляОбработки(HTTPЗапрос);	
	
	Если 	HTTPОтвет.КодСостояния	<>	200 Тогда
		Сообщить(""Ошибка отправки запроса"");
	КонецЕсли;
	
	
КонецПроцедуры


#КонецОбласти


&НаКлиенте
Процедура Команда1(Команда)
	
	ПараметрыЗапроса	=	Новый Структура(""ИмяХоста,ИмяБазы,ПолноеИмяФайла"");
	
	ПараметрыЗапроса.ПолноеИмяФайла	=	ПутьФайла;
	ПараметрыЗапроса.ИмяХоста		=	ИмяХоста;	
	ПараметрыЗапроса.ИмяБазы		=	ИмяБазы;	
	
	ОтправитьФайлОбработкиВСервисХТТП(ПараметрыЗапроса);

	
	
	
КонецПроцедуры
"}
},
{0,
{"ПолучитьЗапросНаСервере",0,0,"","&НаСервере
Функция ПолучитьЗапросНаСервере(мДата)
	
	//http://1c-www-server/zup301w/hs/workday/20200222
	
	//инф!!!
	//https://1c-programmer-blog.ru/programmirovanie/rabota-s-http-v-1s-8-2-i-8-3.html
	
	ИмяСервера      = ""1c-www-server"";
	ПортСервера     = 80;
	ИмяПользователя = ""1cv8"";
	Пароль          = ""1cv8"";
	
	мЗапрос			=	""/zup301w/hs/workday/""+Формат(мДата,""ДФ=yyyyMMdd"");
	
	HTTP 			= Новый HTTPСоединение(ИмяСервера, 80,ИмяПользователя ,Пароль );		
	запросPOST 		= Новый HTTPЗапрос(мЗапрос);
	
	HTTPОтвет 		= HTTP.Получить(запросPOST); //отправляем
	
	ЗначениеJSON	=	Неопределено;
	мДата			=	'00010101';
	
	
	Если НЕ HTTPОтвет.КодСостояния = 200 Тогда				
		ТекстСообщения = HTTPОтвет.ПолучитьТелоКакСтроку(""UTF-8""); 
		Сообщить(""err: "" + HTTPОтвет.КодСостояния );		 
	Иначе                                           		
		ТекстСообщения = HTTPОтвет.ПолучитьТелоКакСтроку(""UTF-8""); 
		
		//Сообщить(ТекстСообщения);                   		 
		ЗаписьJSON 			= Новый ЧтениеJSON;	
		ЗаписьJSON.УстановитьСтроку(ТекстСообщения);
		
		Пока ЗаписьJSON.Прочитать() Цикл
			TипJSON 		=	ЗаписьJSON.ТипТекущегоЗначения;
			ЗначениеJSON	=	ЗаписьJSON.ТекущееЗначение;			
		КонецЦикла; 		
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ЗначениеJSON) Тогда
		СтрокаДата	=	Сред(ЗначениеJSON,1,СтрНайти(ЗначениеJSON,""T"")-1);
		СтрокаДата	=	СтрЗаменить(СтрокаДата,""-"","""");		
		мДата		=	дата(СтрокаДата);		
	КонецЕсли;
	
	Возврат Формат(мДата,""ДЛФ=DD"");	
	
КонецФункции
"}
},
{0,
{"get запрос с параметрами (json)",0,0,"","Процедура ОтослатьНаСервере()	
	
	//1)-Не Работает
	//СтрокаПараметров	=	_МодульОбработки.СерилизацияJSON(Новый Структура(""file_exist"",Спр_Файлы.Наименование));
	
	//2)-работает
	СтрокаПараметров	=	""{""""data"""": """"""+Спр_Файлы.Наименование+""""""}"";
	
	
	//3 - Не работает, не корректные символы
	//СтрокаПараметров	=	"""";
	//Для каждого ТекПараметр из СтруктураПараметров Цикл
	//	СтрокаПараметров	=	СтрокаПараметров+""""+Кав+ТекПараметр.Ключ+Кав+"":""+Кав+ТекПараметр.Значение+Кав+"", "";	
	//КонецЦикла;
	//СтрокаПараметров = ""{""+СтрокаПараметров+""}"";
	
	
	мСоединение	=	Неопределено;
	ИмяСервераПриема = ""danilin-vi""; 
	ИмяИБПриема = ""danv_copy_lpack_buh3""; 
	ИмяСервисаПриема = ""Test_koda"";       
	
	Попытка
		мСоединение = Новый HTTPСоединение(ИмяСервераПриема, 80, ""1cv8"", """");
	Исключение
		Сообщить(ОписаниеОшибки());					
		//todo Регистрация ошибки;
	КонецПопытки;		
	
	Если мСоединение=Неопределено Тогда
		//todo Регистрация ошибки;
	Иначе	
		
		СтрокаПараметров = ""{""""data"""": """"""+Спр_Файлы.Наименование+""""""}"";		
		HTTPЗапрос = ""/""+ИмяИБПриема+""/hs/query/query_data/{""""id_api_query"""": """"""+ИмяСервисаПриема+"""""",""""param"""":""+СтрокаПараметров+""}"";					
		
		//Сообщить(HTTPЗапрос);Для отладки		
		Запрос = Новый HTTPЗапрос(HTTPЗапрос);
		Запрос.Заголовки.Вставить(""Content-type"", ""application/JSON; charset=utf-8"");
		
		Результат =  мСоединение.Получить(Запрос);
		ОтветСтрокой =	Результат.ПолучитьТелоКакСтроку(""UTF-8""); 	
		Если Результат.КодСостояния<>200 Тогда						
			//todo Регистрация ошибки (ОтветСтрокой); Для отладки							
		КонецЕсли;		
		
		Сообщить(""""+Результат.КодСостояния+"":""+ОтветСтрокой);		
	КонецЕсли;

	
КонецПроцедуры
"}
}
}
},
{2,
{"ORACLE",1,0,"",""},
{0,
{"Запросы",0,0,"","
&НаКлиенте
Процедура ЗаполнитьЗначенияТаблицы()
	
	//было t.kod стало |, prih.id2   
	
	ТекстЗапроса = ""
	//|select
	//|  prih.kol - rash.kol count
	//|, t.name
	//|, pro.name
	//|, prih.id2   
	//|from
	//|(select sum(p.kol) kol, p.id2 from naklprih np 
	//|inner join prihod p
	//|on p.nnakl = np.nnakl
	//|where np.data < :data1
	//|group by p.id2
	//|order by p.id2
	//|) prih
	//|inner join
	//|(
	//|select sum(r.kol) kol, r.id2 from naklrashod nr 
	//|inner join rashod r
	//|on r.nsthet = nr.nsthet
	//|where nr.data < :data1
	//|group by r.id2
	//|order by r.id2
	//|) rash on rash.id2 = prih.id2
	//|inner join tovar t
	//|on t.id2 = prih.id2
	//|and t.idk1 in (2, 3)
	//|inner join proizvoditel pro
	//|on pro.idproizv = t.idproizv
	//|where prih.kol - rash.kol <> 0"";
	
	
	|select nvl(pk.kol,0) - nvl(prih.sum,0) + nvl(rash.sum,0) count, t.name, p.name, t.id2	
	|from tovar t 
	|inner join proizvoditel p on p.idproizv = t.idproizv 	
	|left join (select p1.id2, sum(kol) sum from prihod p1
	|inner join naklprih n on n.nnakl = p1.nnakl 
	|where n.data >= :data1
	|group by p1.id2) prih on prih.id2 = t.id2	
	|left join (select r.id2, sum(kol) sum from rashod r
	|inner join naklrashod n on n.nsthet = r.nsthet 
	|where n.data >= :data1  
	|group by r.id2) rash on rash.id2 = t.id2 	
	|left join (select sum(kol) kol, id2 from pokupka 
	|group by id2)pk on pk.id2=t.id2          	
	|where t.idk1 in (2,3)
	|and (nvl(pk.kol,0) - nvl(prih.sum,0) + nvl(rash.sum,0))<>0
	|group by t.id2, prih.sum, rash.sum, t.name, pk.kol, p.name "";
	
	
	ЗаполнитьЗначенияТаблицыНаСервере(ТекстЗапроса); Возврат; // bev
	
	ТЗЗапроса						=	ВыполнитьЗапросаВернутьТаблицу(	ТекстЗапроса,Неопределено);	
	//СвернутьПоПолям();	
	//СообщитьКолвоУник();	
КонецПроцедуры



Процедура ЗаполнитьЗначенияТаблицыНаСервере(ТекстЗапроса)
	
	Объект.ТЧ_ОК.Очистить();
	
	Connection = new COMObject(""ADODB.Connection"");
	
	//Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_ERP;PWD=ub3BGGmY;DBQ=PROD_DG"";
	Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_RELOAD;PWD=ZTvFJ07w;DBQ=TEST_EE_MAIN"";
	Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_ERP;PWD=ub3BGGmY;DBQ=TEST_EE_MAIN"";
	//Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_ERP;PWD=ub3BGGmY;DBQ=PROD_DG"";    //рабочая база
	Connection.Mode = 1;
	
	try 
		Connection.Open();
	except
		
		//ЗаписьЖурналаРегистрации("""", УровеньЖурналаРегистрации.Ошибка, , , 
		//	""Unsuccessful connection: "" + Connection.ConnectionString + Символы.ПС + ОписаниеОшибки());
		
		Connection = undefined; return;
		
	endtry;
	
	Command = new COMObject(""ADODB.Command"");
	Command.ActiveConnection= Connection;
	
	Command.CommandType = 1;
	Command.Prepared = true;	

	//Command.NamedParameters = true;
	Command.CommandText = ""select nvl(pk.kol,0) - nvl(prih.sum,0) + nvl(rash.sum,0) count, t.name proname, p.name, t.id2	
	|from tovar t 
	|inner join proizvoditel p on p.idproizv = t.idproizv 	
	|left join (select p1.id2, sum(kol) sum from prihod p1
	|inner join naklprih n on n.nnakl = p1.nnakl 
	|where n.data >= :data1
	|group by p1.id2) prih on prih.id2 = t.id2	
	|left join (select r.id2, sum(kol) sum from rashod r
	|inner join naklrashod n on n.nsthet = r.nsthet 
	|where n.data >= :data1  
	|group by r.id2) rash on rash.id2 = t.id2 	
	|left join (select sum(kol) kol, id2 from pokupka 
	|group by id2)pk on pk.id2=t.id2          	
	|where t.idk1 in (2,3)
	|and (nvl(pk.kol,0) - nvl(prih.sum,0) + nvl(rash.sum,0))<>0
	|group by t.id2, prih.sum, rash.sum, t.name, pk.kol, p.name "";
	
	Command.CommandText = СтрЗаменить(Command.CommandText, "":data1"", ""?"");
	
	ДатаН = НачалоДня(Объект.Дата);
	
	param = Command.CreateParameter(""data1"", 133, 1, , НачалоДня(Объект.Дата)); // НачалоДня(Объект.Дата)=data1
	//param = Command.CreateParameter(""data1"", 7, 1, , НачалоДня(Объект.Дата)); // НачалоДня(Объект.Дата)=data1
	Command.Parameters.Append(param);

	param = Command.CreateParameter(""data1"", 133, 1, , НачалоДня(Объект.Дата)); // НачалоДня(Объект.Дата)=data1
	//param = Command.CreateParameter(""data1"", 7, 1, , НачалоДня(Объект.Дата)); // НачалоДня(Объект.Дата)=data1
	Command.Parameters.Append(param);
	
	Recordset = Command.Execute();
	
	while not Recordset.EOF do
		
		//...
		НоваяСтрока					=	Объект.ТЧ_ОК.Добавить();
		
		НоваяСтрока.count			=	Число(Recordset.Fields(""count"").Value);			
		
		НоваяСтрока.name			=	СокрЛП(Recordset.Fields(""name"").Value);//Прав(ВК.FieldValue,4)+Сред(ВК.FieldValue,4,2)+Лев(ВК.FieldValue,2);	
		
		НоваяСтрока.ProName			=	СокрЛП(Recordset.Fields(""proname"").Value);						
		//Установить остаток
		НоваяСтрока.id2				=	Число(Recordset.Fields(""id2"").Value);	
		//...
		
		Recordset.MoveNext();
		
	enddo;
	
	Объект.ТЧ_ОК.Сортировать(""name"");
	
	Connection.Close(); Connection = undefined; Command = undefined; Recordset = undefined;
	
КонецПроцедуры

"}
},
{0,
{"Запрос 2 версия",0,0,"","
Процедура ЗаполнитьЗначенияТаблицыНаСервере()
	
	//Объект.ТЧ_ОК.Очистить();
	
	Connection = new COMObject(""ADODB.Connection"");
	
	//Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_ERP;PWD=ub3BGGmY;DBQ=PROD_DG"";
	//Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_RELOAD;PWD=ZTvFJ07w;DBQ=TEST_EE_MAIN"";
	//Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_ERP;PWD=ub3BGGmY;DBQ=TEST_EE_MAIN"";
	
	Connection.ConnectionString = ""DRIVER={Oracle in instantclient_12_2};UID=1C_ERP;PWD=ub3BGGmY;DBQ=PROD_DG"";    //рабочая база
	Connection.Mode = 1;
	
	try 
		Connection.Open();
	except		
		
		Connection = undefined; return;		
	endtry;
	
	Command 				= new COMObject(""ADODB.Command"");
	Command.ActiveConnection= Connection;	
	Command.CommandType 	= 1;
	Command.Prepared 		= true;	
	
	//Command.NamedParameters = true;
	Command.CommandText = ""
	|SELECT
	|        N.NAME_NAKL                    AS NAME_TN,
	|        N.DATASF                       AS DataSTH,
	|        SUM(R.KOL)                        KOL    ,
	|        SUM(ROUND(R.KOL*R.CENAPOKR,2)) AS CENA   ,
	|        N.DATASF                       AS DATASTH,
	|        N.NAMESF                       AS name_sf,
	|        R.ID2                                    ,
	|        t.nds                                    ,
	|        p.kod1c                                  ,
	|        t.name                                   ,
	|        t.artikul                                ,
	|        i.name AS izm                            ,
	|        p.name 						AS name_kontr,
	|        n.ID_PROD                   
	|        
	|FROM
	|        naklprih   n,
	|        postavshic p,
	|        prihod     r,
	|        tovar      t,
	|        izm        i
	|WHERE
	|        n.id_post           =p.id_post
	|AND     n.nnakl             =r.nnakl
	|AND     t.idk1              =r.idk1
	|AND     t.id2               =r.id2
	|AND     n.dataSF           >=:d1
	|AND     n.dataSF           <=:d2
	|AND     t.artikul IS NOT NULL
	|AND     (
	|                TRIM(NVL(N.NAMESF,'0'))<>'0' )        
	|AND     t.idizm=i.idizm
	|AND     t.idk1 IN (10,15)
	|GROUP BY	
	|        n.ID_PROD   ,
	|        N.NNakl    ,
	|        N.NAME_NAKL,
	|        N.DATASF   ,
	|        N.DATA     ,
	|        N.NAMESF   ,
	|        R.ID2      ,
	|        t.nds      ,
	|        p.kod1c    ,
	|        t.name     ,
	|        t.artikul  ,
	|        i.idizm    ,
	|        i.name     ,
	|        p.name
	|ORDER BY
	|        n.DATASF"";
	
	
	param = Command.CreateParameter(""d1"", 133, 1, , НачалоДня(Объект.НачалоПериода)); 
	Command.Parameters.Append(param);
	
	param = Command.CreateParameter(""d2"", 133, 1, , НачалоДня(Объект.КонецПериода)); 
	Command.Parameters.Append(param);
	
	Recordset = Command.Execute();
	
	while not Recordset.EOF do
		
		НоваяСтрока				=	Объект.ТЧЗагрузка.Добавить();
		НоваяСтрока.DataSTH		=	Recordset.Fields(""DataSTH"").Value;	
		
		//ПЕРЕНОШУ КАК ЕСТЬ
		стр = """";
		КолвоНулей = 11 - СтрДлина(СокрЛП(Recordset.Fields(""Name_TN"").Value)) - 2;
		Для й = 1 По КолвоНулей Цикл
			стр = стр + ""0"";
		КонецЦикла;
		НомерНакл 				= ""ММ"" + стр + СокрЛП(Recordset.Fields(""Name_TN"").Value);		
		НоваяСтрока.Name_TN		=	НомерНакл;	
		//
		
		НоваяСтрока.Name_SF		=	Recordset.Fields(""name_sf"").Value;	
		НоваяСтрока.Kod1C		=	Recordset.Fields(""Kod1C"").Value;	
		НоваяСтрока.ID2			=	Recordset.Fields(""ID2"").Value;	
		НоваяСтрока.Name		=	Recordset.Fields(""Name"").Value;	
		НоваяСтрока.Cena		=	Recordset.Fields(""Cena"").Value;	
		НоваяСтрока.Kol			=	Recordset.Fields(""Kol"").Value;	
		НоваяСтрока.SECTION		=	Recordset.Fields(""izm"").Value;	
		НоваяСтрока.name_kontr	=	Recordset.Fields(""name_kontr"").Value;	
		НоваяСтрока.ID_PROD		=	Recordset.Fields(""ID_PROD"").Value;	
		
		Recordset.MoveNext();
		
	enddo;
	
	//Объект.ТЧ_ОК.Сортировать(""name"");
	
	Connection.Close(); Connection = undefined; Command = undefined; Recordset = undefined;
	
КонецПроцедуры
"}
}
},
{0,
{"СЕРИАЛИЗАЦИЯ (xml, json)",0,0,"","#Область Механизмы_Сериализации

Функция Сериализовать(ОбъектСериализации)
	
	ДеревоВОбъектеХДТО	=	СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации);
	мЗаписьХМЛ			=	новый ЗаписьXML;
	мЗаписьХМЛ.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(мЗаписьХМЛ,ДеревоВОбъектеХДТО);
	возврат мЗаписьХМЛ.Закрыть();
	
	
КонецФункции

Функция Десериализовать(XML_СтруктураСериализованногоОбъекта)
	
	ЧтениеХМЛ	=	Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(XML_СтруктураСериализованногоОбъекта);
	ТЗ	=	СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ);
	ЧтениеХМЛ.Закрыть();
	
	возврат ТЗ;	
	
КонецФункции


Функция СерилизацияJSON(ЗначениеСериализации)	
	
	//2. сериализуем массив клиентов в JSON 
	ЗаписьJSON 		= Новый ЗаписьJSON; 
	ЗаписьJSON.УстановитьСтроку(); 
	ЗаписатьJSON(ЗаписьJSON, ЗначениеСериализации); 
	СтрокаДляОтвета = ЗаписьJSON.Закрыть(); 
	Возврат СтрокаДляОтвета;
	
КонецФункции

Функция ДесереализацияJSON(Строка_json)
	
	ЧтениеJSON 			= Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(Строка_json); 
	ДанныеЗагрузки		=	ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеЗагрузки;
	
КонецФункции


#КонецОбласти
"}
},
{0,
{"default.vrd",0,0,"","<?xml version=""1.0"" encoding=""UTF-8""?>
<point xmlns=""http://v8.1c.ru/8.2/virtual-resource-system""
		xmlns:xs=""http://www.w3.org/2001/XMLSchema""
		xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		base=""/analitic""
		ib=""Srvr=&quot;localhost&quot;;Ref=&quot;analitic&quot;;"">
	<ws enable=""false""
			publishExtensionsByDefault=""true"">
		<point name=""InterfaceVersion""
				alias=""InterfaceVersion.1cws""
				enable=""false""
				reuseSessions=""dontuse""
				sessionMaxAge=""20""
				poolSize=""10""
				poolTimeout=""5""/>
	</ws>
	<httpServices publishByDefault=""true"" publishExtensionsByDefault=""true"">
	
	</httpServices>
	<standardOdata enable=""false""
			reuseSessions=""autouse""
			sessionMaxAge=""20""
			poolSize=""10""
			poolTimeout=""5""/>
	<analytics enable=""false""/>
</point>"}
},
{0,
{"Двоичные данные (Запись/Чтение - поток)",0,0,"","#Область Двоичные_данные

Функция ВернутьДвоичныеДанныеИзСтроки(мПроизвольнаяСтрока) Экспорт
	
	Поток = Новый ПотокВПамяти;
	ЗаписьТекста = Новый ЗаписьТекста(Поток) ;
	ЗаписьТекста.Записать(мПроизвольнаяСтрока);
	ЗаписьТекста.Закрыть();
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();	
	
	Возврат ДвоичныеДанные;	
	
КонецФункции

Функция ВернутьСтрокуИзДвоичныхДанных(ДвоичныеДанные) Экспорт
	
	ПотокДанных = ФайловыеПотоки.ОткрытьДляЧтения();
	ЧтениеДанных = Новый ЧтениеДанных(ПотокДанных);
	CтрокаДанных = ЧтениеДанных.ПрочитатьСтроку();
	ЧтениеДанных.Закрыть();
	
	Возврат CтрокаДанных;	
	
КонецФункции



#КонецОбласти
"}
},
{0,
{"СтрокаИзОбъектаXDTO",0,0,"","Функция СтрокаИзОбъектаXDTO(ОбъектXDTO)
	
	Фабрика = Новый СериализаторXDTO(ФабрикаXDTO);  

	НоваяЗаписьXML = Новый ЗаписьXML;
	ПотокВПамяти = Новый ПотокВПамяти();
	НоваяЗаписьXML.ОткрытьПоток(ПотокВПамяти, ""UTF-8"");
	Фабрика.ЗаписатьXML(НоваяЗаписьXML, ОбъектXDTO, , , , НазначениеТипаXML.Явное);
	НоваяЗаписьXML.Закрыть();
	ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);
	ЧтениеДанных = Новый ЧтениеДанных(ПотокВПамяти, ""UTF-8"");
	СтрокаВозврата = ЧтениеДанных.ПрочитатьСимволы();
	ПотокВПамяти.Закрыть();
	Возврат СтрокаВозврата;

КонецФункции"}
}
},
{1,
{"Работа с электронной почтой",1,0,"",""},
{0,
{"отправить",0,0,"","	#Если НаСервере Тогда
	Попытка
		УчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить(""Тема"", ""Совпадение в документе События по договору в базе ""  + Константы.ЗаголовокСистемы.Получить());
		ПараметрыПисьма.Вставить(""Тело"", ТекстПисьма.ПолучитьТекст());
		ПараметрыПисьма.Вставить(""ТипТекста"", ТипТекстаПочтовогоСообщения.HTML);
		ПараметрыПисьма.Вставить(""Кому"", Получатель);
		ПараметрыПисьма.Вставить(""Копии"", Копия);

	
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись,  параметрыПисьма);
		
	Исключение
		ЗаписьЖурналаРегистрации(""ИнформационнаяБаза.ПроверкаСовпаденийСобытийПоДоговору"", 
        УровеньЖурналаРегистрации.Ошибка, , ,
        ""Не удалось отправить электронное письмо: "" + ОписаниеОшибки());
	КонецПопытки;
	#КонецЕсли
"}
}
},
{2,
{"НДС",1,0,"",""},
{0,
{"Расчет в таб. части ",0,0,"","			//Данилин 29-12-18			
			ВидСтавкиНДС					= ?(ЭтоЭкспорт, перечисления.ВидыСтавокНДС.Нулевая,перечисления.ВидыСтавокНДС.Общая);			
			Строка.СтавкаНДС 				= Перечисления.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, ТекСтрокаРеализации.ДатаРеализации);
			//Строка.СуммаНДС 				= ?(ЭтоЭкспорт, 0,Строка.Сумма / 118 * 18);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, ДокРР.СуммаВключаетНДС);
			//Данилин 29-12-18
"}
},
{0,
{"Обработка табличный частей",0,0,"","
ЭтоЭкспорт				=	ЛОЖЬ; // для товара беларусь
БезНДС					=	ЛОЖЬ;

ВидСтавкиНДС			= ?(ЭтоЭкспорт, перечисления.ВидыСтавокНДС.Нулевая,перечисления.ВидыСтавокНДС.ОбщаяРасчетная);			

Строка.СтавкаНДС		= Перечисления.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, ТекСтрокаРеализации.ДатаРеализации);
ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, ДокРР.СуммаВключаетНДС);
"}
}
},
{7,
{"ВНЕШ. ОТЧЕТЫ / ОБРАБОТКИ",1,0,"",""},
{0,
{"Сведения о внешней обработке (05-04-19)",0,0,"","
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПредставлениеОбъекта	=	""<?>"";	
	
	ОписаниеИзменений	=	""
	|<?"""", ДатаВремя, ""ДФ=dd/MM/yy"">			-	Создание разработчик:<?"""", ИмяПользователя> / ид.польз. хранилища:<?"""", ИмяПользователяХранилищаКонфигурации> 
	|		
	|"";
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Наименование		= ПредставлениеОбъекта;	
	ПараметрыРегистрации.Информация 		= ОписаниеИзменений;
	ПараметрыРегистрации.Вид 				= ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия 			= ""<?"""", ДатаВремя, ""ДФ=dd/MM/yy"">"";
	ПараметрыРегистрации.БезопасныйРежим 	= Ложь; //Истина;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр(""ru = '""+ПредставлениеОбъекта+""'"");
	Команда.Идентификатор = ""ИнтерактивнаяЗагрузка"";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Ложь;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр(""ru = 'Фоновая обработка'"");
	Команда.Идентификатор = ""ФоноваяЗагрузка"";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Истина;
	
	Возврат ПараметрыРегистрации;

КонецФункции

// Обработчик серверных команд.
//
// Параметры:
//   ИдентификаторКоманды - Строка - Имя команды, определенное в функции СведенияОВнешнейОбработке().
//   ОбъектыНазначения    - Массив - Ссылки объектов, для которых вызвана команда.
//       - Неопределено - для команд ""ЗаполнениеФормы"".
//   ПараметрыВыполнения  - Структура - Контекст выполнения команды.
//       * ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Ссылка обработки.
//           Может использоваться для чтения параметров обработки.
//           Пример см. в комментарии к функции ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы().
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	ДатаЗавершенияВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах() + 4;
	
	Если ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована Тогда 
		ВызватьИсключение НСтр(""ru = 'Запуск обмена невозможен, работа с внешними ресурсами заблокирована!'"");
	КонецЕсли;
	
	////ЗаписьЖурналаРегистрации(ИдентификаторКоманды, УровеньЖурналаРегистрации.Предупреждение, 
	////	Метаданные.Обработки.УниверсальныйОбменДаннымиXML, ИдентификаторКоманды, 
	////	СтрокаСоединенияИнформационнойБазы, РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	
	Если ИдентификаторКоманды = ""ФоноваяЗагрузка"" Тогда
		ФоноваяЗагрузка();
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Команда """"%1"""" не поддерживается обработкой """"%2""""'""),
			ИдентификаторКоманды,
			Метаданные().Представление());
	КонецЕсли;
	
	// Имитация длительной операции.
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < ДатаЗавершенияВМиллисекундах Цикл
	КонецЦикла;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик команд ФоноваяЗагрузка.
Процедура ФоноваяЗагрузка() Экспорт 
	
	////ТекущаяДата = НачалоДня(ТекущаяДата());
	////
	////ДатаНачала = Макс(ТекущаяДата - 2 * 86400, '20180701');
	////ДатаОкончания = Макс(ТекущаяДата, '20180701') - 1;
	////

	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
"}
},
{0,
{"СведенияОВнешнейОбработке()  (ОТЧЕТ ОБРАБОТКА)",0,0,"","Перем ПредставлениеОбъекта;

Функция СведенияОВнешнейОбработке() Экспорт
	
	
	ОписаниеИзменений	=	""
	|<?"""", ДатаВремя, ""ДФ=dd/MM/yy"">			-	Добавлена служебная рассылка по отправленым просьбам об актам сверки Лебедеву А.В.
	|		
	|"";

	РегистрационныеДанные = Новый Структура();
	РегистрационныеДанные.Вставить(""Наименование""	, ПредставлениеОбъекта);
	РегистрационныеДанные.Вставить(""БезопасныйРежим"", Ложь);
	РегистрационныеДанные.Вставить(""Версия""			, ""<?"""", ДатаВремя, ""ДФ=dd/MM/yy"">"");
	РегистрационныеДанные.Вставить(""Информация""		, ОписаниеИзменений);
	РегистрационныеДанные.Вставить(""Вид""			, ""ДополнительныйОтчет"");  //ДополнительнаяОбработка,ПечатнаяФорма,ЗаполнениеОбъекта,Отчет,СозданиеСвязанныхОбъектов
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить(""Идентификатор"");
	тз.Колонки.Добавить(""Использование"");
	тз.Колонки.Добавить(""Представление"");
	НоваяСтрока = тз.Добавить();
	НоваяСтрока.Идентификатор = ""ОткрытьОтчет"";
	НоваяСтрока.Использование = ""ОткрытиеФормы"";
	НоваяСтрока.Представление = ПредставлениеОбъекта;
	РегистрационныеДанные.Вставить(""Команды"", тз);
	
	Возврат РегистрационныеДанные;
	
КонецФункции




ПредставлениеОбъекта	=	""Ведомость по поставщикам по номенклатуре в днях"";	"}
},
{0,
{"СведенияОВнешнейОбработке() (ВНЕШ. ПЕЧ. ФОРМА) ",0,0,"","Перем ОбъектНазначения,НаименованиеПФ,ИмяПечатнойФормы;


Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации 	= Новый Структура;
    МассивНазначений 		= Новый Массив;
    МассивНазначений.Добавить(ОбъектНазначения); //Указываем документ к которому делаем внешнюю печ. форму
    ПараметрыРегистрации.Вставить(""Вид""				, ""ПечатнаяФорма""); //может быть - ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов,,,
    ПараметрыРегистрации.Вставить(""Назначение""		, МассивНазначений);
    ПараметрыРегистрации.Вставить(""Наименование""	, НаименованиеПФ); //имя под которым обработка
    ПараметрыРегистрации.Вставить(""БезопасныйРежим""	, Истина);
    ПараметрыРегистрации.Вставить(""Версия""			, ""1.0"");    
    ПараметрыРегистрации.Вставить(""Информация""		, НаименованиеПФ);
    ТаблицаКоманд 			= ПолучитьТаблицуКоманд();
    ДобавитьКоманду(ТаблицаКоманд, НаименованиеПФ, ИмяПечатнойФормы, ""ВызовСерверногоМетода"", Истина, ""ПечатьMXL"");
    ПараметрыРегистрации.Вставить(""Команды"", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()
	Команды = Новый ТаблицаЗначений;
  	Команды.Колонки.Добавить(""Представление"", Новый ОписаниеТипов(""Строка""));//как будет выглядеть описание печ.формы для пользователя
  	Команды.Колонки.Добавить(""Идентификатор"", Новый ОписаниеТипов(""Строка"")); //имя макета печ.формы
  	Команды.Колонки.Добавить(""Использование"", Новый ОписаниеТипов(""Строка"")); //ВызовСерверногоМетода
  	Команды.Колонки.Добавить(""ПоказыватьОповещение"", Новый ОписаниеТипов(""Булево""));
  	Команды.Колонки.Добавить(""Модификатор"", Новый ОписаниеТипов(""Строка""));
  	Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = """")
	НоваяКоманда = ТаблицаКоманд.Добавить();
  	НоваяКоманда.Представление = Представление;  
  	НоваяКоманда.Идентификатор = Идентификатор;
  	НоваяКоманда.Использование = Использование;
  	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  	НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////










ОбъектНазначения	=	""Документ.ПоступлениеТоваровУслуг"";	
НаименованиеПФ		=	""М-4 (+ТД)/впф"";
ИмяПечатнойФормы	=	""ПФ_MXL_М4"";	"}
},
{0,
{"СведенияОВнешнейОбработке (Обработка + Регламентное задание)",0,0,"","
#Область СведенияОбОбработке
Функция СведенияОВнешнейОбработке() Экспорт

    ПараметрыРегистрации = Новый Структура;
	
    ПараметрыРегистрации.Вставить(""Вид"", ""ДополнительнаяОбработка"");
	ПараметрыРегистрации.Вставить(""Наименование"", ""Рассылка SMS (Легасофт)"");
    ПараметрыРегистрации.Вставить(""Версия"", ""1.2"");
    ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Ложь);
    ПараметрыРегистрации.Вставить(""Информация"", ""Дополнительная обработка Рассылка SMS (Легасофт)"");

    ТаблицаКоманд = ПолучитьТаблицуКоманд();

    ДобавитьКоманду(ТаблицаКоманд,
    ""Рассылка SMS (Легасофт)"",
    ""ЛС_Рассылка_SMS_Легасофт"",
    ""ОткрытиеФормы"",
    Истина,
	"""");
		
	ДобавитьКоманду(ТаблицаКоманд,
    ""Рассылка SMS (Легасофт), тихий режим"",
    ""ЛС_Рассылка_SMS_Легасофт"",
    ""ВызовСерверногоМетода"",
    Истина,
	"""");
	

    ПараметрыРегистрации.Вставить(""Команды"", ТаблицаКоманд);

    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить(""Представление"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Идентификатор"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Использование"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""ПоказыватьОповещение"", Новый ОписаниеТипов(""Булево""));
	Команды.Колонки.Добавить(""Модификатор"", Новый ОписаниеТипов(""Строка""));
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = """")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры
#КонецОбласти

//Регламентный режим
Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	ЗагрузитьНастройкиНаСервере();
	ЗаполнитьКонтактыИДанные();
	РассылкаСМСПоСписку();	
КонецПроцедуры

"}
},
{3,
{"ЗУП",1,0,"",""},
{0,
{"ПолучитьСтруктуруПараметровПриказаТ5",0,0,"","Функция ПолучитьСтруктуруПараметровПриказаТ5()
	
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить(""ДатаНачала"");
	Параметры.Вставить(""ДатаОкончания"");
	Параметры.Вставить(""ВидПеревода"");
	Параметры.Вставить(""Подразделение"");
	Параметры.Вставить(""Должность"");
	Параметры.Вставить(""НовоеПодразделение"");
	Параметры.Вставить(""НоваяДолжность"");
	Параметры.Вставить(""НовыйРазрядКатегория"");
	Параметры.Вставить(""ОкладТарифнаяСтавкаЦелаяЧасть"");
	Параметры.Вставить(""ОкладТарифнаяСтавкаДробнаяЧасть"");
	Параметры.Вставить(""ВалютаТарифнойСтавки"", ""руб."");
	Параметры.Вставить(""КопейкиТарифнойСтавки"", ""коп."");
	Параметры.Вставить(""Надбавка"", 0);
	Параметры.Вставить(""ОснованиеПеревода"");
	Параметры.Вставить(""ПричинаПеревода"");

	Возврат Параметры;
	
КонецФункции"}
},
{0,
{"УстановитьОграниченияТипа",0,0,"","Процедура УстановитьОграниченияТипа()
	
	Попытка
		РегистрационныеДанные = ЭтотОбъект().СведенияОВнешнейОбработке();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр(""ru = 'Возможно, обработка (отчет) устарела или не является дополнительной:'"")
					+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	//Установим заголовок формы
	ЭтаФорма.Заголовок = ""Отладка внешних печатных форм: "" + РегистрационныеДанные.Наименование;
	
	ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид];
	//ПолноеНазначениеЗначение = ДополнительныеОтчетыИОбработки.НазначаемыеОбъектыМетаданныхПоВидуВнешнегоОбъекта(ВидОбработки);
	
	СписокОграниченияТипа = Новый Массив;
	
	Если РегистрационныеДанные.Свойство(""Назначение"") Тогда
		Для Каждого ЭлементЗаданноеНазначение Из РегистрационныеДанные.Назначение Цикл
			РазделеннаяСтрока = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементЗаданноеНазначение, ""."");
			СписокОграниченияТипа.Добавить(ЭлементЗаданноеНазначение);
			
			//Если РазделеннаяСтрока[1] = ""*"" Тогда
			//	НайденныеНазначения = ПолноеНазначениеЗначение.НайтиСтроки(Новый Структура(""ВидОбъектаМетаданных"", РазделеннаяСтрока[0]));
			//	Для Каждого ЭлементНайденноеНазначение Из НайденныеНазначения Цикл
			//		СписокОграниченияТипа.Добавить(ЭлементНайденноеНазначение.ПолноеИмяОбъектаМетаданных);
			//	КонецЦикла;
			//Иначе
			//	Если ПолноеНазначениеЗначение.НайтиСтроки(Новый Структура(""ПолноеИмяОбъектаМетаданных"", ЭлементЗаданноеНазначение)).Количество() > 0 Тогда
			//		СписокОграниченияТипа.Добавить(ЭлементЗаданноеНазначение);
			//	КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокОграниченияТипа.Количество() > 0 Тогда
		Для А = 0 По СписокОграниченияТипа.Количество() - 1 Цикл
			ЭлементМассива = СписокОграниченияТипа[А];
			ПозицияРазделителя = Найти(ЭлементМассива, ""."");
			Если Лев(ЭлементМассива, ПозицияРазделителя - 1) = ""Документ"" Тогда
				ТипДокумента = Документы[Сред(ЭлементМассива, ПозицияРазделителя + 1)].ПустаяСсылка();
				ЭлементМассива = ТипЗнч(ТипДокумента);
			ИначеЕсли Лев(ЭлементМассива, ПозицияРазделителя - 1) = ""Справочник"" Тогда
				ТипСправочника = Справочники[Сред(ЭлементМассива, ПозицияРазделителя + 1)].ПустаяСсылка();
				ЭлементМассива = ТипЗнч(ТипСправочника);
			КонецЕсли;
			СписокОграниченияТипа[А] = ЭлементМассива;
		КонецЦикла;
		Элементы.СсылкаНаОбъект.ОграничениеТипа = Новый ОписаниеТипов(СписокОграниченияТипа);
	КонецЕсли; 
	
КонецПроцедуры
"}
},
{0,
{"Получить данные трудового договора",0,0,"","		//--< Данилин В.И 6 марта 2017 г. 14:23:58   0000000703
		МассивОбъектов	=	новый Массив();
		МассивОбъектов.Добавить(Выборка.Ссылка);
		ВыборкаКУ 			= КадровыйУчет.СформироватьЗапросДляТ5(МассивОбъектов).Выбрать();
"}
}
},
{0,
{"ПередачаПараметровВоВнешнююОбработку()",0,0,"","
//в качестве примера приведена внешняя печатная форма для документа
ВнешниеОбработкиФайла					=	ВнешниеОбработки.Создать(ИмяФайлаОбработки);		
ВнешниеОбработкиФайла.СсылкаНаОбъект	=	ПередаваемоеЗначение;	
РезультатОбработки						=	ВнешниеОбработкиФайла.Печать();	

РезультатОбработки.Показать();
"}
},
{0,
{"ЭКСПОРТНЫЙ МОДУЛЬ ДЛЯ ОТЧЕТОВ API QUERY",0,0,"","#Область Экспортные_инструменты_API_QUERY

Функция ПолучитьТаблицуДанных() Экспорт
	
	
	
	
	
	
	
КонецФункции


Функция Выполнить_СКД_ВернутьТЗ(ТабДок = Ложь) Экспорт	
	
	//определение переменных
	СКД = СхемаКомпоновкиДанных;
	мНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//подготовка данных
	ВнешниеНаборыДанных 		= Новый Структура;
	ВнешниеНаборыДанных.Вставить(""ТаблицаДанных"",ПолучитьТаблицуДанных());  	
	
	//формирование результата	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, мНастройки, ДанныеРасшифровки,,?(ТабДок,Неопределено,Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"")));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных , ДанныеРасшифровки);
	
	Если ТабДок Тогда
		ДокументРезультат = Новый ТабличныйДокумент;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	Иначе		
		ДокументРезультат = новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДокументРезультат);
	КонецЕсли;	
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
	
	возврат ДокументРезультат;                 
	
КонецФункции

#КонецОбласти"}
}
},
{2,
{"СОЗДАНИЕ/ИЗМЕНЕНИЕ ДОКУМЕНТОВ",1,0,"",""},
{0,
{"ЗаписатьСУчетомПроведения",0,0,"","Функция ЗаписатьСУчетомПроведения(ДокументОбъект,ВыводСообщений=Истина,мТекстСообщений)
	
	
	
	ОшибкаПроведения		=	ЛОЖЬ;	
	Попытка
		ДокументОбъект.Записать(?(ДокументОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));		
	Исключение
		ОшибкаПроведения	=	Истина;		
		Сообщить("" ошибка записи:""+ДокументОбъект+"" ""+ОписаниеОшибки());
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);						
	КонецПопытки;	
	
	
	Если ВыводСообщений Тогда
		//Сообщить(?(ДокументОбъект.Проведен,""V "",""О "")+ДокументОбъект);																			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""""+мТекстСообщений+?(ДокументОбъект.Проведен,""V "",""О "")+ДокументОбъект.Ссылка, ДокументОбъект.Ссылка, """", ""Объект"", Ложь);		
	КонецЕсли;
	
	
	Возврат ОшибкаПроведения;	
	
КонецФункции
"}
},
{0,
{"ВернутьДокумент",0,0,"","Функция ВернутьДокумент(ШаблонДокумента,ДеньЗапроса,мТекстСообщения)
	
	
	МетаданныеДокумента	=	ШаблонДокумента.метаданные();
	
	ВидДокумента		=	МетаданныеДокумента.имя;
	
	
	мКонтрагент			=	Неопределено;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(""Контрагент"",МетаданныеДокумента) Тогда
		мКонтрагент		=	ШаблонДокумента.Контрагент;		
	КонецЕсли;
	
	мДОговор			=	Неопределено;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(""ДоговорКонтрагента"",МетаданныеДокумента) Тогда
		мДОговор		=	ШаблонДокумента.ДоговорКонтрагента;		
	КонецЕсли;
	
	мОрганизация		=	Неопределено;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(""Организация"",МетаданныеДокумента) Тогда
		мОрганизация	=	ШаблонДокумента.Организация;		
	КонецЕсли;
	
	ТекстКомм		=	""#""+Год(ДеньЗапроса)+""-""+Месяц(ДеньЗапроса)+""_ДИ"";
	ТекстКомм		=	СтрЗаменить(ТекстКомм,Символы.НПП,"""");
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= 
	""ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.""+ВидДокумента+"" КАК ТаблицаДокумента
	|ГДЕ
	|	(ВЫРАЗИТЬ(ТаблицаДокумента.Комментарий КАК СТРОКА(50))) = &ТекстКомм
	|	И ТаблицаДокумента.Дата МЕЖДУ &ДатаС И &ДатаПО
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|	""+?(мКонтрагент	<>Неопределено,""И ТаблицаДокумента.Контрагент = &Контрагент"","""")+""
	|	""+?(мДОговор	<>Неопределено,""И ТаблицаДокумента.ДоговорКонтрагента = &ДоговорКонтрагента"","""");
	
	Запрос.УстановитьПараметр(""ДатаПО""				, КонецДня(ДеньЗапроса));
	Запрос.УстановитьПараметр(""ДатаС""				, НачалоДня(ДеньЗапроса));
	Запрос.УстановитьПараметр(""ТекстКомм""			, ТекстКомм);	
	Запрос.УстановитьПараметр(""Контрагент""			, мКонтрагент);
	Запрос.УстановитьПараметр(""ДоговорКонтрагента""	, мДОговор);
	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	ДокСсылка				=	Неопределено;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДО					=	ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();		
		мТекстСообщения		=	мТекстСообщения+""Корректировка: "";
	Иначе		
		ДО									=	Документы[ВидДокумента].СоздатьДокумент();		
		мТекстСообщения		=	""Создание: "";		
	КонецЕсли;		
	
	
	СтрокаВсехИсключений	=	""Комментарий,Ответственный,РучнаяКорректировка,КурсВзаиморасчетов,КратностьВзаиморасчетов,СуммаДокумента"";
	СтрокаИсключений		=	"""";
	МассивПолей 			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИсключений, "","");
	Для каждого ТекЭлемента из МассивПолей Цикл 
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(""ТекЭлемента"",МетаданныеДокумента) Тогда
			СтрокаИсключений	=	СтрокаИсключений+ТекЭлемента+"","";
		КонецЕсли;
		
	КонецЦикла;	
	
	ЗаполнитьЗначенияСвойств(ДО,ШаблонДокумента,,""Дата,Номер,Проведен""+СтрокаИсключений);
	
	
	
	ДО.Дата									=	ДеньЗапроса+(ШаблонДокумента.Дата-НачалоДня(ШаблонДокумента.Дата)); //дополнительно приведем к времени документа
	до.Комментарий							=	ТекстКомм;
	
	
	Возврат ДО;
	
КонецФункции
"}
}
},
{1,
{"РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ",1,0,"",""},
{0,
{"РЕГУЛЯРНЫЕ_ВЫРАЖЕНИЯ",0,0,"","#Область РЕГУЛЯРНЫЕ_ВЫРАЖЕНИЯ

//.MultiLine = Истина;          // истина — текст многострочный, ложь — одна строка
//.Global = Истина;   			// истина — поиск по всей строке, ложь — до первого совпадения
//.IgnoreCase = Ложь;        	// истина — игнорировать регистр строки при поиске
//.test = Ложь; 				//механизм вхождения, (Истина возврат массива вхождения, Ложь - проверка) 
Функция ПолучитьПараметрыРегулярныхВыражений() Экспорт
	
	Возврат Новый Структура(""MultiLine,Global,IgnoreCase,test"",Истина,Истина,Ложь,Ложь);
	
	
КонецФункции

Функция РегулярныеВыражения(ПроверяемыйТекст,Паттерн,Параметры_РВ=Неопределено,RegExp=Неопределено) Экспорт
	
	Если RegExp=Неопределено Тогда
		RegExp = Новый COMОбъект(""VBScript.RegExp"");    // создаем объект для работы с регулярными выражениями
	КонецЕсли;	
	
	Если не ЗначениеЗаполнено(Параметры_РВ) Тогда
		Параметры_РВ = ПолучитьПараметрыРегулярныхВыражений();	
	КонецЕсли;
	
	
	//Заполняем данные
	RegExp.MultiLine = Параметры_РВ.MultiLine;      // истина — текст многострочный, ложь — одна строка
	RegExp.Global = Параметры_РВ.Global;   			// истина — поиск по всей строке, ложь — до первого совпадения
	RegExp.IgnoreCase = Параметры_РВ.IgnoreCase;    // истина — игнорировать регистр строки при поиске
	RegExp.Pattern = Паттерн;	       				// шаблон анализа
	
	Результат	=	Неопределено;	
	
	Если Не Параметры_РВ.test Тогда
		Matches=RegExp.Execute(ПроверяемыйТекст);
		ЧислоВхождений=Matches.Count();
		МассивВхождений = Новый Массив;
		Если ЧислоВхождений>0 Тогда 
			Для к = 0 По ЧислоВхождений-1 Цикл
				Match = Matches.Item(к);
				
				SubMatches = Match.SubMatches;
				ЧислоПодвыражений=SubMatches.Count();
				Для н = 0 По ЧислоПодвыражений-1 Цикл
					SubMatch=SubMatches.Item(н);
					Если SubMatch="""" Тогда
						Продолжить;
					КонецЕсли;    					
					МассивВхождений.Добавить(SubMatch);					
				КонецЦикла;    
			КонецЦикла;
		КонецЕсли;
		Результат = МассивВхождений;
	Иначе		
		Результат = RegExp.Test(ПроверяемыйТекст);
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции



#КонецОбласти
"}
}
},
{3,
{"Ссылка ГУИД",1,0,"",""},
{0,
{"УстановитьСсылкуНового (гуид)",0,0,"","
		////--< Данилин В.И 10 июля 2019 г. 13:26:07   
		ГУИД				=	Сред(ЗначениеВСтрокуВнутр(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()),6,36);
		СсылкаКонтрагент	=	Справочники.Контрагенты.ПолучитьСсылку(новый УникальныйИдентификатор(ГУИД));


		Запрос 				= Новый Запрос (""ВЫБРАТЬ	Контрагенты.Ссылка ИЗ	Справочник.Контрагенты КАК Контрагенты ГДЕ	Контрагенты.Ссылка = &Ссылка"");
		Запрос.УстановитьПараметр(""Ссылка"", СсылкаКонтрагент);		
		РезультатЗапроса 	= Запрос.Выполнить().Выбрать();				
		Если РезультатЗапроса.Следующий() Тогда
			//Изменить контрагента по ссылке
			Сообщить(""Корректировка"");
			НовыйКонтрагент = СсылкаКонтрагент.ПолучитьОбъект();
		Иначе
			Сообщить(""Создание"");
			//создание нового контрагента
			НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();			
			НовыйКонтрагент.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД)));
		КонецЕсли;



		//создание нового контрагента		
		ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ВыборкаДетальныеЗаписи.Ссылка,,""Owner"");
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;		
		
		Попытка
			НовыйКонтрагент.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД)));
			НовыйКонтрагент.Записать();
"}
},
{0,
{"Получить ссылку из ком. источника",0,0,"","//Источник	-	ком коннектор
НС.ГУИД_Номенклатура 	= Источник.String(Выборка.НоменклатураСсылка.УникальныйИдентификатор()); 

//плохо
//ГУИД				=	Сред(ЗначениеВСтрокуВнутр(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()),6,36);

Уи = ВНешБаза.XMLСтрока(ВНешБаза.Документы.МойДокумент.НайтиПоНомеру());"}
},
{0,
{"ДатаСозданияСсылки любой!",0,0,""," Функция ДатаСозданияСсылки(Ссылка)
    ГУИД = Ссылка.УникальныйИдентификатор();
    Строка16 = Сред(ГУИД, 16, 3) + Сред(ГУИД, 10, 4) + Сред(ГУИД, 1, 8);
    Разрядность = СтрДлина(Строка16);
    ЧислоСек = 0;
    Для Позиция = 1 По Разрядность Цикл
        ЧислоСек = ЧислоСек + Найти(""123456789abcdef"",Сред(Строка16,Позиция,1))*Pow(16,Разрядность - Позиция);
    КонецЦикла;
    ЧислоСек = ЧислоСек / 10000000;
    Возврат Дата(1582, 10, 15, 04, 00, 00) + ЧислоСек;
КонецФункции  "}
}
},
{3,
{"Сообщения",1,0,"",""},
{0,
{"Привязка к реквизиту",0,0,"","		Сообщение 				= 	Новый СообщениеПользователю();
		Сообщение.Текст 		= 	""Необходимо записать документ"";
		Сообщение.Поле 			= 	""Объект.НомерСчета"";		
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();	
		
//ТекстСообщения
//Некорректно заполнена колонка ""Количество"" в строке 1 списка ""Материалы"".
//Указанное количество превышает остаток. Остаток: 0; Не хватает: 10

ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Регистратор, ПолеКоличество, ""Объект"", Отказ);
ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""""+мТекстСообщений+?(ДокументОбъект.Проведен,""V "",""О "")+ДокументОбъект.Ссылка, ДокументОбъект.Ссылка, """", ""Объект"", Ложь);
"}
},
{0,
{"Всплываемое сообщение (справа)",0,0,"","
ПоказатьОповещениеПользователя (<Текст>, <НавигационнаяССылка>, <Пояснение>, <Картинка>)
//https://xn----1-bedvffifm4g.xn--p1ai/articles/%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4-%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B9-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8E/"}
},
{0,
{"ТрансЛИТ",0,0,"","
Функция Транслит(знач Вход) Экспорт
	
	Вход = СтрЗаменить(Вход,"" "",""_"");
	
	Коды = Новый Соответствие;
	Коды.Вставить(""ё"",""yo"");
	Коды.Вставить(""Ё"",""Yo"");
	Нач = КодСимвола(""А"");
	Англ = ""A"" ""B"" ""V"" ""G"" ""D"" ""E"" ""Zh"" ""Z"" ""I"" ""Y"" ""K"" ""L"" ""M"" ""N"" ""O"" ""P"" ""R"" ""S"" ""T"" ""U"" ""F"" ""Kh"" ""Ts"" ""Ch"" ""Sh"" ""Shch"" """" ""Y"" """" ""E"" ""Yu"" ""Ya"" ""a"" ""b"" ""v"" ""g"" ""d"" ""e"" ""zh"" ""z"" ""i"" ""y"" ""k"" ""l"" ""m"" ""n"" ""o"" ""p"" ""r"" ""s"" ""t"" ""u"" ""f"" ""kh"" ""ts"" ""ch"" ""sh"" ""shch"" """" ""y"" """" ""e"" ""yu"" ""ya"";
	Для К = Нач по КодСимвола(""я"") Цикл
		Коды.Вставить(Символ(К), СтрПолучитьСтроку(Англ, К - Нач + 1));
	КонецЦикла;
	Выход = """";
	Для К=1 по СтрДлина(Вход) Цикл
		Бкв = Сред(Вход,К,1);
		Зн = Коды.Получить(Бкв);
		Выход = Выход + ?(Зн = Неопределено, ""_"", Зн);
	КонецЦикла;
	Возврат Выход;
КонецФункции
"}
}
},
{2,
{"КАРТИНКИ",1,0,"",""},
{0,
{"Вставить в ТабДок",0,0,"","НовыйРисунок			=	ОбластьКартинки.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
НовыйРисунок.картинка	=	Новый Картинка(новый ДвоичныеДанные(ТекЭлемент));		
НовыйРисунок.Высота		=	280;
НовыйРисунок.Ширина		=	180;
ТабДокСчета.Вывести(ОбластьКартинки);	
ТабДокСчета.ВывестиГоризонтальныйРазделительСтраниц();
"}
},
{0,
{"QR",0,0,"","Процедура СформироватьQR(QRСтрока,Расшифровка)
	
	об 		      = РеквизитФормыВЗначение(""Объект"");
	Макет         = об.ПолучитьМакет(""Макет"");
	ОбластьКод_ЛК = Макет.ПолучитьОбласть(""ОбластьКод|ЛеваяКолонка"");
	ОбластьКод_ПК = Макет.ПолучитьОбласть(""ОбластьКод|ПраваяКолонка"");

	
	ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190);
	
	Если ТипЗнч(ДанныеQRКода) = Тип(""ДвоичныеДанные"") Тогда
		
		КартинкаQRКода = Новый Картинка(ДанныеQRКода);			
		Счетчик = Счетчик + 1;		
		
		Если Счетчик % 2 <> 0 Тогда								
			ОбластьКод_ЛК.Параметры.Пользователь    = Расшифровка;
			ОбластьКод_ЛК.Параметры.QRКодКартинка   = КартинкаQRКода;							
			ТабДок.Присоединить(ОбластьКод_ЛК);
		Иначе		
			ОбластьКод_ПК.Параметры.Пользователь    = Расшифровка;
			ОбластьКод_ПК.Параметры.QRКодКартинка   = КартинкаQRКода;							
			ТабДок.Вывести(ОбластьКод_ПК);
		КонецЕсли;			
	Иначе			
		Сообщить(""Не удалось сформировать QR-код"");				
	КонецЕсли;
	
	
КонецПроцедуры
"}
}
},
{7,
{"МАССИВЫ / Строки",1,0,"",""},
{0,
{"РазложитьСтрокуВМассивПодстрок",0,0,"","МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолей, "";"");	"}
},
{0,
{"ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивКБК)",0,0,"","ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивКБК)"}
},
{0,
{"УдалитьПоследнийСимволВСтроке(СтрокаПредставления,2);		",0,0,"","СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаПредставления,2);		"}
},
{0,
{"СократитьНаименование(Функция)",0,0,"","Функция СократитьНаименование(знач стр_Наименование) Экспорт 
	
	мСтрокаРезультат	=	"""";
	стр_Наименование	=	СтрЗаменить(стр_Наименование,""ЛБК ООО"", """");
	
	//ЛБК ООО/АДМИНИСТРАТИВНО-УПРАВЛЕНЧЕСКИЙ ПЕРСОНАЛ
	МассивПолей 			=	СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(стр_Наименование, ""/"");	
	МассивПолей				=	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивПолей);
	Для каждого ТекЭлемента из МассивПолей Цикл
		Если ПустаяСтрока(ТекЭлемента) Тогда
			Продолжить;
		КонецЕсли;
		
		мСтрокаРезультат	=		мСтрокаРезультат+ТекЭлемента+""/"";
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(мСтрокаРезультат,1);	
	
	Возврат мСтрокаРезультат;
	
КонецФункции
"}
},
{0,
{"Преобразование ТЗ в Массив",0,0,"","
//Альтернатива 			//Результат			=	ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса);
Функция ПреобразованиеТаблицыЗначенийВСтруктуру()
	
	
	СтруктураДанных		=	новый Структура;
	//стрКолонки			=	"""";
	Для каждого ТекКолонки из КоллекцияКолонок Цикл 
		СтруктураДанных.Вставить(ТекКолонки.Имя,Новый Массив);
		//стрКолонки	=	стрКолонки+?(ПустаяСтрока(стрКолонки),"""","", "")+ТекКолонки.Имя;				
	КонецЦикла;
	Для каждого текСтрока из РезультатЗапроса Цикл 
		Для каждого ТекКолонки из КоллекцияКолонок Цикл 
			СтруктураДанных[ТекКолонки.Имя].Добавить(текСтрока[ТекКолонки.Имя]);			
		КонецЦикла;				
	КонецЦикла;
	
	
КонецФункции"}
},
{0,
{"Преобразование ТЗ в текст с разделителем",0,0,"","
Функция ТЗ_Текст(РезультатЗапроса)
	
	////Транспонирование в обычный текст
	мТекстРезультат	=	"""";
	Для каждого ТекКолонки из КоллекцияКолонок Цикл 
		мТекстРезультат	=	мТекстРезультат+?(ПустаяСтрока(мТекстРезультат),"""",""; "")+ТекКолонки.Имя;								
	КонецЦикла;
	
	Для каждого ТекСтрока из РезультатЗапроса Цикл 			
		мТекСтрока	=	"""";
		Для каждого ТекКолонки из КоллекцияКолонок Цикл 
			мТекСтрока	=	мТекСтрока+?(ПустаяСтрока(мТекСтрока),"""",""; "")+текСтрока[ТекКолонки.Имя];					
		КонецЦикла;	
		мТекстРезультат	=	мТекстРезультат+Символы.ПС+мТекСтрока;		
	КонецЦикла;
	
КонецФункции"}
},
{0,
{"Преобразование ТЗ_html",0,0,"","Функция ТЗ_html(РезультатЗапроса)
	
	////Транспонирование в хтмл текст
	мТекстРезультат	=	""<tr>"";
	Для каждого ТекКолонки из КоллекцияКолонок Цикл 
		мТекстРезультат	=	мТекстРезультат+""<td>""+ТекКолонки.Имя+""</td>"";								
	КонецЦикла;
	мТекстРезультат	=	мТекстРезультат+""</tr>"";
	
	Для каждого ТекСтрока из РезультатЗапроса Цикл 	
		
		мТекСтрока	=	Символы.ПС;
		Для каждого ТекКолонки из КоллекцияКолонок Цикл 
			мТекСтрока	=	мТекСтрока+""<td>""+текСтрока[ТекКолонки.Имя]+""</td>"";					
		КонецЦикла;	
		
		мТекстРезультат	=	мТекстРезультат+""<tr>""+мТекСтрока+""</tr>"";
		
	КонецЦикла;			
	
	Результат	=	""<html><body><table>""+мТекстРезультат+""</table></body></html>"";
	
КонецФункции"}
}
},
{0,
{"НазначитьТипРеквизиту",0,0,"","&НаСервере
Процедура НазначитьТипРеквизиту()
	
	ИмяМетаданные	=		Объект.Ссылка.Метаданные().Имя;
	мЗначение		=	Неопределено;
	Если Метаданные.Документы.Найти(ИмяМетаданные)<>Неопределено Тогда
		мЗначение	=	Документы[ИмяМетаданные].пустаяСсылка();	
	ИначеЕсли Метаданные.Справочники.Найти(ИмяМетаданные)<>Неопределено Тогда
		мЗначение	=	Справочники[ИмяМетаданные].пустаяСсылка();			
	ИначеЕсли Метаданные.ПланыСчетов.Найти(ИмяМетаданные)<>Неопределено Тогда
		мЗначение	=	ПланыСчетов[ИмяМетаданные].пустаяСсылка();			
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ИмяМетаданные)<>Неопределено Тогда
		мЗначение	=	ПланыВидовХарактеристик[ИмяМетаданные].пустаяСсылка();					
	Иначе
		Сообщить(""Не удалось опеределить тип."");
	КонецЕсли;
	
	СсылкаСравнения	=	мЗначение;
	
	
КонецПроцедуры
"}
},
{0,
{"НОМЕР НА ПЕЧАТЬ",0,0,"","
НоваяСтрокаДок.НомерРеализации		=	ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерРеализации, Истина, Истина);
НоваяСтрокаДок.НомерСФ				=	ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерСФ, Истина, Истина);
"}
},
{0,
{"ВЫЗОВ ПРОЦЕДУРЫ ОБЪЕКТА (УФ)",0,0,"","ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");
ОбработкаОбъект.Пересчитать();
//ЗначениеВРеквизитФормы(ОбработкаОбъект, ""Объект"");"}
},
{0,
{"ВОПРОС С АНАЛИЗОМ РЕЗУЛЬТАТА",0,0,"","
&НаСервере
Процедура ОставитьСтрокиСоСкладомНаСервере(СкладНаименование)
	
	
//действвия	
	
КонецПроцедуры

&НаКлиенте
Процедура ОставитьСтрокиСоСкладомАСС(Результат, ТекДанныеСтрока) Экспорт

	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	ОставитьСтрокиСоСкладомНаСервере(ТекДанныеСтрока.СкладНаименование);	
	
КонецПроцедуры


&НаКлиенте
Процедура ОставитьСтрокиСоСкладом(Команда)
	
	ТекДанныеСтрока 							= Элементы.ФильтрСклады.ТекущиеДанные;
	
	Если ТекДанныеСтрока <> Неопределено Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения(""ОставитьСтрокиСоСкладомАСС"", ЭтотОбъект,ТекДанныеСтрока),
		""Оставить только склад: <""+ТекДанныеСтрока.СкладНаименование+"">?"", РежимДиалогаВопрос.ДаНет);					
		
	КонецЕсли;	
	
КонецПроцедуры

"}
},
{0,
{"ВСТАВКА времени",0,0,"","РегистрационныеДанные.Вставить(""Версия"", ""<?""Время"", ДатаВремя, ""ДФ=dd/MM/yy"">"");"}
},
{0,
{"DanV - комментарий",0,0,"Дора[ботка]","//--< DVI <?"""", ДатаВремя, ""ДЛФ=DDT"">   <?""Номер заявки?"">"}
},
{0,
{"ПолучитьРеквизит (&НаСервереБезКонтекста)",0,0,"","&НаСервереБезКонтекста
Функция ПолучитьРеквизит(Объект, ИмяРеквизита)
	Возврат Объект[ИмяРеквизита];
КонецФункции
"}
},
{0,
{"Транзакции по 100",0,0,"","	КолОбъектов						=	0;
	НачатьТранзакцию();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КолОбъектов			=	КолОбъектов+1;
		
		Если КолОбъектов%РазмерТранзакции = 0 Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;
		
		ДО					=	ВыборкаДетальныеЗаписи.ссылка.получитьОбъект();
		ДО.дата				=	ВыборкаДетальныеЗаписи.Дата;
		ЗаписатьСУчетомПроведения(ДО);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
"}
},
{0,
{"Подсчет Времени остатка",0,0,"","	ФормаИндикатора	=	ПолучитьОбщуюФорму(""ФормаИндикатора"");
	ФормаИндикатора.Открыть();
	ФормаИндикатора.МаксимальноеЗначение	=	ВыборкаДокументОприходования.Количество();
	НачальноеВремя	=	ТекущаяДата();
	
	ИтераторОИ		=	1;
	ФормаИндикатора.ЗначениеИндикатора	=	ИтераторОИ;
		
		
		//тело цикла начало
		
		АктуальныйМомент		=	ТекущаяДата();
		РазницаВремени			=	АктуальныйМомент-НачальноеВремя;
		Длительность1Документа	=	РазницаВремени/ИтераторОИ;
		ОсталосьВремени			=	(ФормаИндикатора.МаксимальноеЗначение-ИтераторОИ)*Длительность1Документа;
		ФормаИндикатора.НадписьСостоянияИндикатораОбщая	=	Строка(""Осталось:""+ВернутьПравильноеВремя(ОсталосьВремени));
		ФормаИндикатора.НадписьСостоянияИндикатораТекущая	=	Строка(""Прошло:""+ВернутьПравильноеВремя(РазницаВремени));
		
		ФормаИндикатора.ЗначениеИндикатора	=	ИтераторОИ*100/ФормаИндикатора.МаксимальноеЗначение;
		ИтераторОИ	=	ИтераторОИ+1;
		//тело цикла конец
		
		
	ФормаИндикатора.Закрыть();	
	
	
	
	
	Функция ВернутьПравильноеВремя(КоличествоСекунд)
	
	
	Минут	=	Цел(КоличествоСекунд/	60);
	Часов	=	Цел(минут/60);
	Секунд	=	Цел(КоличествоСекунд-Минут*60);
	
	СтрокаСообщения="""";
	
	Если Часов>0 Тогда
		
		СтрокаСообщения	=	""Часов(""+часов+"") :"";
	КонецЕсли;
	
	Если Минут>0 Тогда		
		СтрокаСообщения	=	СтрокаСообщения+"" мин(""+Минут+""):"";
	КонецЕсли;

	Если Секунд>0 Тогда		
		СтрокаСообщения	=	СтрокаСообщения+"" сек(""+Секунд+"") "";
	КонецЕсли;
	
	Возврат(СтрокаСообщения);
	
КонецФункции


"}
},
{0,
{"РаботаС источниками данных из построителя отчета",0,0,"","  	//ПостроительОтчетов					=	Новый ПостроительОтчета;
	ПостроительОтчетов.ИсточникДанных	=	Новый ОписаниеИсточникаДанных(мВременнаяТаблица);	
	ПостроительОтчетов.ЗаполнитьНастройки();	
	Отбор = ПостроительОтчетов.Отбор;
	Если Отбор.Найти(""Служебная"")=	Неопределено Тогда
		Отбор.Добавить(""Служебная"");
	КонецЕсли;	
	
	Отбор[""Служебная""].Использование = Истина;
	Отбор[""Служебная""].Значение = 1;
	Отбор[""Служебная""].ВидСравнения = ВидСравнения.Больше; 
	
	ПостроительОтчетов.Выполнить();
	врТаблицаЗначений	=	ПостроительОтчетов.Результат.Выгрузить();
"}
},
{0,
{"Сохранение Табличного документа в разных форматах",0,0,"","

мПостроительОтчета	=	Новый ПостроительОтчета;
мПостроительОтчета.ИсточникДанных	=	Новый ОписаниеИсточникаДанных(РезультатЗапроса);
мПостроительОтчета.Выполнить();
мТабличныйДокумент	=	Новый ТабличныйДокумент;
мПостроительОтчета.Вывести(мТабличныйДокумент);


Путь			=	(ВосстановитьЗначение(""ДиректорияСохраненияФайла""));
Путь			=	?(Путь="""" или Путь=Неопределено,""c:\"",Путь);

ИмяФайла		=	Строка(ммПостроитель)+Строка(КоличествоСохранений)+"".mxl"";	
ПолноеИмяФайла	=	Путь+ИмяФайла;	
мТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.MXL); //для сохранения в HTML-файл	
Сообщить("" Файл:""+ПолноеИмяФайла+"" сохранен."");
"}
},
{0,
{"ВыборЗначенияПоОтбору(склада)",0,0,"","	СтандартнаяОбработка	=	Ложь;
	
	ФормаВыбора								=	Справочники.Склады.ПолучитьФормуВыбора(""ФормаВыбора"",Элемент);
	
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр	=	Ложь;
	
	ОтборСкладов							=	ФормаВыбора.Отбор;
	ОтборСкладов.Организация.ВидСравнения	=	ВидСравнения.Равно;
	ОтборСкладов.Организация.Значение		=	СкладОтправитель.Организация;
	ОтборСкладов.Организация.Использование	=	Истина;
	
	ФормаВыбора.Открыть();
"}
},
{0,
{"Сумма прописью Процедура",0,0,"","
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек=Ложь) Экспорт
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = ""Л=ru_RU; ДП=Ложь"";
	ПарамПредмета = ""рубль, рубля, рублей, м, копейка, копейки, копеек, ж"";
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,""0"")-1);
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()
"}
},
{0,
{"ФункцияПо переводу строки дата(стан. представления) в тип дату формата предприятия",0,0,"","
	 Значение	=	""№133-012650 от 16.10.2007""; 

	 СКакого	=	Найти(Значение,""№"");
	 ПоКакой	=	Найти(Значение,""от"");
	 
	 Вхдата		=	СокрЛП(Сред(Значение,ПоКакой+2));	
	 Год		=	Прав(Вхдата,4);
	 Дата		=	лев(Вхдата,2);	
	 Месяц		=	СокрЛП(Сред(Вхдата,4,2));
	 
	 Вхдата		=	Дата(год+месяц+дата);
"}
},
{0,
{"Фунции для сравнения 2х чисел  по модулю",0,0,"","Функция РавныПоМодулю(Число1,Число2)
	
	А	=	Число1;
	Б	=	Число2;
	
	Если Модуль(А)=Модуль(Б) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
      
Функция Модуль(мчисло)
	Если мчисло<0 Тогда
		мчисло	=	мчисло*(-1);
	КонецЕсли;
	Возврат мчисло;		
КонецФункции
"}
},
{0,
{"ЗаписатьСообщение в файл (сообщение,Статус)",0,0,"","Процедура ЗаписатьСообщениеВФайл(СтрокаСообщения,Статус)
	#Если Клиент Тогда
	НаименованиеВременногоФайла	=	КаталогВременныхФайлов()+""LogObr.txt"";	
	Попытка
		ПолноеИмяФайла	=	СокрЛП(НаименованиеВременногоФайла);
		Файл	=	Новый Файл(ПолноеИмяФайла);
		Если не Файл.Существует()Тогда 
			Файл = Новый ТекстовыйДокумент;
			Файл.Записать(ПолноеИмяФайла,КодировкаТекста.ANSI); 		
		КонецЕсли;
		
		Файл	=	Новый ТекстовыйДокумент;	
		Файл.Прочитать(ПолноеИмяФайла,КодировкаТекста.ANSI);
		Файл.ДобавитьСтроку(""""+Строка(ТекущаяДата())+""|""+СтрокаСообщения);
		Файл.Записать(ПолноеИмяФайла,КодировкаТекста.ANSI); 	
		Если Статус	=	Неопределено тогда
			Сообщить(СокрЛП(СтрокаСообщения));
		Иначе
			Сообщить(СокрЛП(СтрокаСообщения),Статус);			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
		
	#КонецЕсли
		
КонецПроцедуры
"}
},
{0,
{"ОформитьПодвалТаблицы",0,0,"","Процедура ОформитьПодвалТаблицы(ТабличноеПоле)	
	
	ТаблицаЗначений								=	ЭлементыФормы[ТабличноеПоле].Значение;
	ЭлементыФормы[ТабличноеПоле].Подвал			=	Истина;
	
	Для каждого ТекКолонка из ЭлементыФормы[ТабличноеПоле].Колонки Цикл
		ТипКолонки								=	ТаблицаЗначений.Колонки[ТекКолонка.Имя].ТипЗначения;		
		
		Если ТипКолонки.СодержитТип(Тип(""Число""))	Тогда
			ТекКолонка.ОтображатьИтогиВПодвале	=	Истина;
		Иначе
			ТекКолонка.ТекстПодвала				=	ТипКолонки;						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры "}
},
{0,
{"Вывести сообщение Когда счетчик Кратен 100",0,0,"","		Итератор=Итератор+1;
		Если итератор%100=0 Тогда
			Состояние(""Обработка:""+Строка(Итератор)+""/""+Строка(Обкол));
		КонецЕсли;  
"}
},
{0,
{"Двоичные данные 00100110011",0,0,"","	  
	  ДвоичныйМакет	=	ПолучитьМакет(""ПустаяТаблица"");
	  ИмяФайла		=	ПолучитьИмяВременногоФайла(""tmp"");
	  ДвоичныйМакет.Записать(ИмяФайла);
	  ЗначениеИзФайла(ИмяФайла);
"}
},
{0,
{"Таблица Слепков",0,0,"","
Перем ТаблицаСлепков;



Процедура СделатьСлепокДокумента(мДокумент)
	
	Если ТаблицаСлепков	=	Неопределено Тогда
		ТаблицаСлепков	=	новый ТаблицаЗначений;	
	КонецЕсли;
	
	НомерКолонки	=	ТаблицаСлепков.Колонки.Количество();
	ИмяКолонки		=	""Слеп_""+НомерКолонки;
	ТаблицаСлепков.Колонки.Добавить(ИмяКолонки);
	
	
	МетаданныеДОк				=	мДокумент.Метаданные();
	Итератор					=	0;
	Для каждого текРеквизита из МетаданныеДОк.Реквизиты Цикл
		Если НомерКолонки		=	0 Тогда
			НоваяСтрока			=	ТаблицаСлепков.Добавить();
		Иначе			
			НоваяСтрока			=	ТаблицаСлепков[Итератор];
			Итератор			=	Итератор+1;
		КонецЕсли;
		
		
		НоваяСтрока[ИмяКолонки]	=	""(""+текРеквизита.имя+"")""+мДокумент[текРеквизита.имя];		
		
		Если НомерКолонки>0 Тогда
			мИмяКолонки			=	""Слеп_""+(НомерКолонки-1);
			Если НоваяСтрока[ИмяКолонки]<>НоваяСтрока[мИмяКолонки] Тогда
				Сообщить(""Отличие""+НоваяСтрока[ИмяКолонки]+"" от ""+НоваяСтрока[мИмяКолонки]);				
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
КонецПроцедуры


"}
},
{0,
{"Отладка ЗАПРОСОВ",0,0,"","ЗначениеВФайл(""F:\1С_Запрос\отладка_""+СтрЗаменить(Формат(ТекущаяДата(),""ДЛФ=T""),"":"",""_"")+"".znc"",Новый Структура(""текстЗапроса,Параметры"",Запрос.Текст,Запрос.Параметры))


Функция ЗапросВКонсоль(пЗапрос) Экспорт;
   рез = Новый Структура;
   рез.Вставить(""Текст"",пЗапрос.Текст);
   рез.Вставить(""Параметры"",пЗапрос.Параметры);
   строкаРез = ЗначениеВСтрокуВнутр(рез);
   Попытка
      Объект = Новый COMОбъект(""htmlfile"");
      Объект.ParentWindow.ClipboardData.Setdata(""Text"", строкаРез);
   Исключение
      Возврат Ложь;
   КонецПопытки;
   Возврат Истина;
КонецФункции


 рез = Новый Структура;  рез.Вставить(""Текст"",пЗапрос.Текст);  рез.Вставить(""Параметры"",пЗапрос.Параметры);  строкаРез = ЗначениеВСтрокуВнутр(рез);Объект = Новый COMОбъект(""htmlfile"");Объект.ParentWindow.ClipboardData.Setdata(""Text"", строкаРез);
"}
}
}
}